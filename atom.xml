<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://protonlml.github.io/atom.xml" rel="self"/>
  
  <link href="https://protonlml.github.io/"/>
  <updated>2024-07-23T14:06:32.241Z</updated>
  <id>https://protonlml.github.io/</id>
  
  <author>
    <name>𝚲𝚳𝚲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>悬挂年兽 喜增龙年</title>
    <link href="https://protonlml.github.io/2024/01/01/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%8C%82%E5%B9%B4%E5%85%BD/"/>
    <id>https://protonlml.github.io/2024/01/01/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%8C%82%E5%B9%B4%E5%85%BD/</id>
    <published>2024-01-01T03:00:00.000Z</published>
    <updated>2024-07-23T14:06:32.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码"><a href="#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码" class="headerlink" title="换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码"></a>换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码</h1><ul><li><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>这篇文章介绍了一个在博客网站右上角添加悬挂年兽的方法。通过在CSS代码中插入相应的素材链接，可以实现在网站右上角挂上一个龙的效果。对于自定义主题的网站，可以将相关的CSS和HTML代码添加到自定义头部中。对于全屏网站，建议在CSS代码的16行左右插入一行代码以实现相应效果。</li></ul></li></ul><h1 id="一、简介-教程"><a href="#一、简介-教程" class="headerlink" title="一、简介-教程"></a>一、简介-教程</h1><blockquote><p>换新颜新气象，给网站右上角挂一个龙，吸吸龙气</p><p>css第6行放入下面素材链接（本站开了防盗所以给你也无用就放下面了）</p><p>如果你的主题是自定义，那就是主题设置自定义里面</p><p>自定义css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">850px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.NewYear</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://img.ly522.com/LY/uploads/2023/12/longgyaj.gif</span>) no-repeat <span class="number">50%</span>/<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">85.8%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">50</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">animation</span>: new-year <span class="number">1.2s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@keyframes</span> new-year&#123;</span><br><span class="line">      <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="number">100%</span>&#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">10deg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="html放到你的自定义头部html即可！！"><a href="#html放到你的自定义头部html即可！！" class="headerlink" title="html放到你的自定义头部html即可！！"></a>html放到你的自定义头部html即可！！</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;NewYear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：如果你的是全屏网站建议在pointer-events: none;下面加一行。即css代码16行左右哪里加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;</span><br></pre></td></tr></table></figure><blockquote><h3 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h3></blockquote><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160941751.png" alt="image-20240118020305488"></p><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div><p>​     </p></escape>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot;&gt;&lt;a href=&quot;#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot; class=&quot;headerlink&quot; title=&quot;换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码&quot;&gt;&lt;/a&gt;换新颜给博客网站</summary>
      
    
    
    
    <category term="博客相关" scheme="https://protonlml.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://protonlml.github.io/tags/Hexo/"/>
    
    <category term="Pure主题" scheme="https://protonlml.github.io/tags/Pure%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>matery主题的使用</title>
    <link href="https://protonlml.github.io/2020/03/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://protonlml.github.io/2020/03/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-17T03:00:00.000Z</published>
    <updated>2024-06-16T02:11:38.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matery主题的使用"><a href="#matery主题的使用" class="headerlink" title="matery主题的使用"></a>matery主题的使用</h1><h1 id="一、下载matery主题"><a href="#一、下载matery主题" class="headerlink" title="一、下载matery主题"></a>一、下载matery主题</h1><ul><li><h3 id="1-GitHub源项目"><a href="#1-GitHub源项目" class="headerlink" title="1.GitHub源项目"></a>1.GitHub源项目</h3></li><li><p><a href="https://github.com/blinkfox/hexo-theme-matery">GitHub - blinkfox&#x2F;hexo-theme-matery: 一个基于材料设计和响应式设计而成的全面、美观的Hexo主题。</a></p></li><li><h3 id="2-在本地clone下来"><a href="#2-在本地clone下来" class="headerlink" title="2.在本地clone下来"></a>2.在本地clone下来</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/blinkfox/hexo-theme-matery.git</span></span><br></pre></td></tr></table></figure><h1 id="二、配置hexo根yml文件"><a href="#二、配置hexo根yml文件" class="headerlink" title="二、配置hexo根yml文件"></a>二、配置hexo根yml文件</h1><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011622.png" alt="image-20240112005024106"></li></ul><h1 id="三、自定义主题"><a href="#三、自定义主题" class="headerlink" title="三、自定义主题"></a>三、自定义主题</h1><ul><li><h3 id="1-修改导航名称和路径图标"><a href="#1-修改导航名称和路径图标" class="headerlink" title="1.修改导航名称和路径图标"></a>1.修改导航名称和路径图标</h3><ul><li><h5 id="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"><a href="#添加导航二级菜单的写法（如下是“关于”一级菜单修改）" class="headerlink" title="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"></a>添加导航二级菜单的写法（如下是“关于”一级菜单修改）</h5></li><li><p>注意：1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) </p></li><li><p>​             2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找  ,线上的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">About:</span><br><span class="line">   url: /about</span><br><span class="line">   # icon: fas fa-user-circle 注释掉原来的，加上下面这一段</span><br><span class="line">   icon: fas fa-list</span><br><span class="line">   children:</span><br><span class="line">     - name: 爱的颜色</span><br><span class="line">       url: /love</span><br><span class="line">       icon: fas fa-heart</span><br><span class="line">     - name: 生日快乐</span><br><span class="line">       url: /birthday</span><br><span class="line">       icon: fas fa-cake</span><br></pre></td></tr></table></figure></li><li><h3 id="2-手机二级菜单配置"><a href="#2-手机二级菜单配置" class="headerlink" title="2.手机二级菜单配置"></a>2.手机二级菜单配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navMenu:</span></span><br><span class="line">  <span class="attr">mleft:</span> <span class="literal">true</span>    <span class="comment">#  二级侧栏子菜单是否对齐左边</span></span><br><span class="line">  <span class="attr">bgColor:</span> <span class="string">&quot; &quot;</span>   <span class="comment">#  二级侧栏子菜单背景颜色,留空即为全局背景色</span></span><br></pre></td></tr></table></figure></li><li><h3 id="3-首页中间右侧-banner"><a href="#3-首页中间右侧-banner" class="headerlink" title="3.首页中间右侧 banner"></a>3.首页中间右侧 banner</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubLink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                   <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/sitoi/sitoi.github.io</span>  <span class="comment"># GitHub 仓库地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Fork</span> <span class="string">Me</span>                                 <span class="comment"># 显示文字</span></span><br></pre></td></tr></table></figure></li><li><h3 id="4-首页轮播图相关配置"><a href="#4-首页轮播图相关配置" class="headerlink" title="4.首页轮播图相关配置"></a>4.首页轮播图相关配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">showPrevNext:</span> <span class="literal">false</span>     <span class="comment"># 是否显示左右切换按钮</span></span><br><span class="line">  <span class="attr">showIndicators:</span> <span class="literal">false</span>   <span class="comment"># 是否显示指示器</span></span><br><span class="line">  <span class="attr">autoLoop:</span> <span class="literal">false</span>         <span class="comment"># 是否自动轮播</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">120</span>           <span class="comment"># 切换延迟时间，默认单位 秒</span></span><br><span class="line">  <span class="attr">intervalTime:</span> <span class="number">5000</span>      <span class="comment"># 自动切换下一张的间隔时间</span></span><br></pre></td></tr></table></figure></li></ul><p>参考：</p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 (blinkfox.github.io)</a></p><p><a href="https://sitoi.cn/posts/63466.html">基于 Hexo GitHub 从零开始搭建个人博客（三）：Matery 主题（DIY 版）详细配置教程，附博客源码 | Sitoi</a></p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-23">(๑•̀ㅂ•́) ✧被发现了～ (sunhwee.com)</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;matery主题的使用&quot;&gt;&lt;a href=&quot;#matery主题的使用&quot; class=&quot;headerlink&quot; title=&quot;matery主题的使用&quot;&gt;&lt;/a&gt;matery主题的使用&lt;/h1&gt;&lt;h1 id=&quot;一、下载matery主题&quot;&gt;&lt;a href=&quot;#一、下载m</summary>
      
    
    
    
    <category term="博客相关" scheme="https://protonlml.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://protonlml.github.io/tags/Hexo/"/>
    
    <category term="matery主题" scheme="https://protonlml.github.io/tags/matery%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>3.git初始化仓库的两种方式</title>
    <link href="https://protonlml.github.io/2019/10/10/%E7%BB%8F%E9%AA%8C/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://protonlml.github.io/2019/10/10/%E7%BB%8F%E9%AA%8C/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2019-10-10T06:00:00.000Z</published>
    <updated>2024-06-16T15:09:12.803Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c412e3fdbb4d2cfac502551cc305c6113c006d2bc7f138a85aa252cc03c022d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="经验" scheme="https://protonlml.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="经验" scheme="https://protonlml.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://protonlml.github.io/2019/10/10/java%E5%9F%BA%E7%A1%80/Maven/"/>
    <id>https://protonlml.github.io/2019/10/10/java%E5%9F%BA%E7%A1%80/Maven/</id>
    <published>2019-10-10T03:00:00.000Z</published>
    <updated>2024-06-16T02:15:54.402Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Maven</center></h1><h2 id="一、Maven的一些理解"><a href="#一、Maven的一些理解" class="headerlink" title="一、Maven的一些理解"></a>一、Maven的一些理解</h2><ul><li>1.项目的构建，是指项目的“打包”，“编译”，“部署”，“运行”等一系列操作。 </li><li>2.用Maven就可以使我们的项目，能够自动化构建。 </li><li>3.maven是java项目的自动化构建工具。   </li><li>4.Maven可以，将一个大型的项目的不同功能，拆分成多个模块，分别进行开发管理。 </li><li>5.Maven可以，通过配置poom文件，来导入某个技术的jar包，同时会自动的导入这个jar包的相关依赖jar包。</li></ul><h2 id="二、Maven程序的执行原理"><a href="#二、Maven程序的执行原理" class="headerlink" title="二、Maven程序的执行原理"></a>二、Maven程序的执行原理</h2><ol><li><p>maven核心程序指的是，解压后的maven程序目录。也是maven软件的目录里面的内容。</p></li><li><p>Maven在自动构建项目的时候，使用插件会在本地仓库中找，使用依赖jar包也在本地仓库中找。本地找不到就到中央仓库中下载。 </p></li><li><p>怎么使用maven？（不用开发工具）</p><ol><li>创建一个maven规定的项目目录结构，在有poom.xml文件的目录下面，执行maven命令</li><li>当我们执行的Maven命令需要用到某些插件的时候，Maven核心程序会首先到本地仓库中查找</li><li>本地仓库的默认位置：[系统当前用户的家目录].m2\repository(Maven找插件的时候，自动创建)</li><li>Maven核心程序如果在本地仓库中找不到需要的插件的时候，那么它会自动联网，到中央仓库中下载。</li></ol></li><li><p>Maven的生命周期就是指的是“项目的构建过程”，项目的构建是有顺序的，执行的任何一个Maven命令都是从生命周期的头开始。</p></li><li><p>Maven构建项目完成之后，生成的“产品”就放在“项目src所在目录”中的“target”目录中。</p></li><li><p>Pom</p><ol><li>【1】含义：project Object Model 项目对象模型。</li><li>pom.xml对于Maven工程师核心配置文件，与构建过程相关的一切设置都在这个文件中进行</li></ol></li><li><p>Maven坐标类比一下：</p><ol><li><p>数学中可以用（x,yz）三个项量来确定一个空间的点。</p></li><li><p>Maven的pom文件中，也是使用三个项量，来在仓库中唯一定位一个Maven工程</p><ul><li>[1]：<strong>g</strong>roupid：公司或组织域名倒序+项目名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;cn.itcast&lt;/groupId&gt;</span><br></pre></td></tr></table></figure><ul><li>[2]：<strong>a</strong>rtifactid：模块名 </li><li>[3]：<strong>v</strong>ersion：版本<ul><li>只要讲“<strong>gav</strong>”就讲的是Maven的坐标。</li></ul></li><li>[4] :Maven工程的坐标与仓库中的路径对应关系。<ul><li>在Maven仓库里面。每一个Maven工程，他的坐标一定是不重复的，即标识了这个Maven工程信息，同时也决定了他在仓库中存放的目录是什么。</li></ul></li></ul></li></ol></li><li><p>仓库中保存的内容：宽泛的说就是（Maven工程项目）  </p><ul><li>主要有3大块：<ul><li>-[1]：Maven核心软件，自身所需要的一些插件</li><li>[2]：第三方框架或工具的jar包(其实就是第三方项目，打成了jar包)</li><li>[3]：我们自己开发的工程。Maven将“插件”、“框架jar包”、“我们自己的项目”都用统一的目录结构，放在了仓库中，这样就方便Maven核心程序的管理和使用。</li></ul></li></ul></li><li><p>pom.xml文件解析。</p><ul><li>创建的Maven项目中有pom.xml文件，他是Maven项目的核心配置文件。<ul><li>【1】.除了上面三个坐标用来，定位当前项目用Maven核心程序安装在仓库中的位置。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011049.png" alt="Image"></li><li>2】.中间部分是“依赖部分”，就是指当前项目，所使用的到的“其他模块项目和jar包”，在Maven仓库中的坐标。如果仓库中没有指定的依赖jar包，就会自动从私服上面下载，私服上面没有就会到中央仓库中下载。<ul><li>但是如果当前项目，用到我们自己写的模块，这时候就需要将，要使用的模块项目给“安装”到仓库中，用“ mvn install”命令进行安装。是不可能从网上下载的，因为这是我们自己写的，不是第三方jar包项目。这样我们就可以将一个大的项目，进行拆分成很多小的模块，然后各个模块之间用“依赖坐标”，来互相关联。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011083.png" alt="Image"></li></ul></li><li>【3】最下面是“插件”部分。<ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011313.png" alt="Image"></li></ul></li></ul></li></ul></li><li><p>依赖</p><ol><li>①Maven解析依赖信息时会到本地仓库中查找被依赖的jar包。<ul><li>对于我们自己开发的Maven工程，使用mvn install命令安装后就可以进入仓库。</li></ul></li><li>②依赖的范围<ul><li>【1】在pom.xml文件中<scope>依赖的范围</scope></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012747.png" alt="Image"></li><li>依赖的范围一般常用的有三个：compile，test、provided三个。</li><li>依赖范围：意思就是，当前项目所依赖的这个“依赖”，在编译，测试，打包。过程当中时候有效。<ul><li>[1]compile范围的“依赖”（编译范围）</li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：参与</li><li>是否 参与部署：参与</li><li>[2]test范围的“依赖”（测试范围）</li><li>对主程序是否有效：无效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：“junit依赖”它就是测试依赖，这个jar包，不参与打包，在主程序中没有。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012081.png" alt="Image"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012133.png" alt="Image"></li><li>[3]provided范围的“依赖”，通常是为web工程来添加的（不参与部署的范围）。<ul><li>说明只要加了provided范围的“依赖”，web容器中都有。比如：servlet的这个依赖，部署的时候就不需要，因为Tomcat服务器本身就有servlet的jar包。</li></ul></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012653.png" alt="Image"></li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：servlet-api.jar</li></ul></li></ul></li></ol></li><li><p>maven命令是什么？</p><ul><li>maven这个程序，用来构建项目所使用的命令。（这些命令的顺序，就是生命周期的顺序）</li><li>比如【1】清理：mvn clean</li><li>【2】：编译主程序：mvn compile</li><li>【3】：编译测试程序：mvn test-compile</li><li>【4】：执行测试：mvn test</li><li>【5】：打包：mvn package</li><li>【6】：安装：mvn install</li><li>【7】：生成站点：mvn site这些命令，构成了Maven构建项目时的，不同生命周期，</li></ul></li><li><p>12.Maven的生命周期</p><ul><li>【1】意思：就是Maven构建项目的的，各个构建环节执行的顺序。：不能打乱顺序，必须按照既定的正确顺序来执行，是生命周期的各个阶段的命令来实现的。</li><li>【2】生命周期是在Maven的核心程序中定义了，抽象的生命周期。 生命周期中各个阶段的具体任务是由插件来完成的。</li><li>【3】有三套独立的生命周期：<ul><li>①Clean Lifecycle（清理生命周期）在进行，在真正的构建一个项目之前，必须先进行一些清理工作。</li><li>②Default lifecycle（默认的生命周期）构建的核心部分，编译，测试，打包，安装，部署等等。</li><li>③Site Lifecycle（生成站点生命周期）生成项目报告，站点，发布站点。</li></ul></li><li>【4】每个生命周期的具体实现<ul><li>比如：只执行“mvn clean 清理命令”就会进行清理生命周期。</li><li>执行“mvn install 安装命令”就会进行Maven构建项目的默认生命周期，此时Maven核心程序，会从头开始执行“clean清理”,“compile 编译”，“test-compile 编译测试”，“test 执行测试”，“package 打包”，“install 安装”这一系列的过程。</li><li>执行“site 生成站点”，也会从头开始，将所有过程进行一边。这是生成站点生命周期</li><li>Maven核心程序为了更好的实现自动化构建，按照这一的特点执行生命周期中的各个阶段：不论现在要执行生命周期中的哪一个阶段，都是从这个生命周期最初的位置开始执行。</li></ul></li><li>【5】生命周期的各个阶段仅仅定义了要执行的任务是什么（命令）完成这个命令，是由特定的Maven插件来完成的。<ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012162.png" alt="Image"></li></ul></li></ul></li><li><p>创建Maven工程之前，需要将IDEA编辑器，和本地下载的Maven程序，进行关联配置。具体操作，见文末。</p></li></ol><hr><hr><h2 id="三、使用IDEA创建普通的javaMaven工程"><a href="#三、使用IDEA创建普通的javaMaven工程" class="headerlink" title="三、使用IDEA创建普通的javaMaven工程"></a>三、使用IDEA创建普通的javaMaven工程</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012762.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012115.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012201.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013282.png" alt="Image"></p><h2 id="四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）"><a href="#四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）" class="headerlink" title="四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）"></a>四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）</h2><ul><li><p>【1】必须先创建一个空的工程。在空的工程中添加模块。（每次添加模块都要使用快捷键“ctrl+alt+shift+s”来调出<strong>Project Structure窗口，在这个窗口中添加模块，不能直接在模块上面右键添加模块。（在模块上右键模块会添加到“模块里面”）</strong>）</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013762.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013442.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013622.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013162.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013194.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014349.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014424.png" alt="Image"></p></li><li><h3 id="【标准的Maven工程，分模块的大型web项目，目录结构】"><a href="#【标准的Maven工程，分模块的大型web项目，目录结构】" class="headerlink" title="【标准的Maven工程，分模块的大型web项目，目录结构】"></a>【标准的Maven工程，分模块的大型web项目，目录结构】</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014593.png" alt="Image"></p></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><h5 id="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"><a href="#我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。" class="headerlink" title="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"></a>我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。</h5></li></ul><h2 id="五、依赖"><a href="#五、依赖" class="headerlink" title="五、依赖"></a>五、依赖</h2><ul><li><h3 id="依赖的传递性："><a href="#依赖的传递性：" class="headerlink" title="依赖的传递性："></a>依赖的传递性：</h3><ul><li>【1】依赖的传递性是指，如果在一个大型的项目当中，各个模块相互依赖，那么在“最下面的模块（依赖关系最下面，这个模块只是被依赖，不去依赖别的模块）”中，pom.xml文件里面，配置的<strong>compile</strong>”范围的依赖jar包，其他模块的pom.xml文件虽然没有声明一样的<strong>compile</strong>”范围的依赖jar包，但是也可以使用这个依赖。</li><li>【2】前提是“<strong>compile</strong>”范围的依赖才能传递，“<strong>test</strong>”“<strong>provided</strong>”范围的依赖不能传递。所以在各个工程模块中，能够传递的依赖，只在“最下面”模块中声明一次就可以了，不能够传递的“<strong>test</strong>”“<strong>provided</strong>”范围的依赖就得各个模块中重复声明依赖。比如：servlet的依赖，他就是“provided范围的模块”，需要在每一个项目模块pom.xml文件中，都要重复声明。</li><li>【3】我们在开发项目的时候，会有一个专门的模块来负责维护这些框架jar包的依赖信息的。在这个模块中，全部都写“<strong>compile</strong>”范围的依赖”，让其他功能模块，来依赖这个“专门模块”，就可以实现“<strong>compile</strong>”范围的依赖”通用。</li><li>【4】子类继承了父类模块，也可以实现依赖传递，默认就是依赖的，不需要再在子类中，重新声明依赖父类，只在子类中声明父类就可以了。</li></ul></li><li><h3 id="依赖的排除："><a href="#依赖的排除：" class="headerlink" title="依赖的排除："></a>依赖的排除：</h3><ul><li>依赖的排除，在哪个工程里面排除的，就在哪个工程里面生效。</li><li>【1】当我们导入某些依赖jar包的时候，Maven会自动将这个jar的其他依赖jar包也一起导入到工程当中，这个时候，如果不需要这个额外的jar包，就可以用“排除依赖”来进行排除。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014762.png" alt="Image"></li><li>【2】找到要排除的依赖的ID（假如spring-jcl依赖要被排除）</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014723.png" alt="Image"></li><li>3】添加<exclusions> </exclusions>标签</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014062.png" alt="Image"></li></ul></li><li><h3 id="依赖原则："><a href="#依赖原则：" class="headerlink" title="依赖原则："></a>依赖原则：</h3><ul><li><h4 id="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"><a href="#解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）" class="headerlink" title="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"></a>解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）</h4></li><li><p>前提是因为“依赖的传递性”导致的jar包冲突问题。</p></li><li><p>冲突情景：</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015782.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281057892.png" alt="Image"></p></li><li><p><strong>properties标签</strong>配合自定义标签声明数据的配置并。(可以利用这个标签，实现在一个页面上，同种类型的框架jar包，版本号相同，)在父模块中就更简便了</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015754.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015765.png" alt="Image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span> <span class="comment">&lt;!--不是只能用于声明依赖的版本号。凡是需要统一声明后再引用的场合都可以使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="六、Mavne继承（pom文件的继承）"><a href="#六、Mavne继承（pom文件的继承）" class="headerlink" title="六、Mavne继承（pom文件的继承）"></a>六、Mavne继承（pom文件的继承）</h2><ul><li><p>存在的问题：我们都知道在一个“模块项目1”中配置了“<strong>compile</strong>”范围的依赖jar包”，“其他模块项目”来依赖这个“模块项目1”的时候，“其他模块项目”中会自动的存在了“项目模块1的”“<strong>compile</strong>”范围的依赖jar包”。这是依赖的传递性。只用在“模块项目1”中声明一份就可以了。</p></li><li><p>但是：如果是““<strong>test</strong>”“<strong>provided</strong>”范围的依赖是不能传递的”，需要在每一个模块中都要，重复的手动添加““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”，比如“junit依赖”，他就是“test范围的依赖”。（不能够传递的依赖，他就是零散的分散在各个模块当中，就很容易造成各个模块工程之间的版本不一致）。</p></li><li><p>这就存在一个问题，开发一个大型项目的时候，各个模块是不同开发组来开发的，使用“junit这种依赖”的时候，可能版本号就会不相同，导致各个模块之间不统一。</p></li><li><p>解决办法：使用Maven的继承，统一成同一个版本。（以junit依赖为例）</p></li><li><p>【1】专门创建一个模块是所有模块的“父模块”，可以用作““<strong>compile</strong>”范围的依赖jar包”传递依赖。也可以用作““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”的版本管理。</p></li><li><p>【2】解决思路：将junit依赖统一提取到“父”工程中，在子工程中声明junit依赖时不指定版本，以父工程中统一设定的为准。同时也便于修改。</p></li><li><p>【3】操作步骤  [1]创建一个Maven工程作为父工程。注意：打包的方式pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015851.png" alt="Image"></p></li><li><p>[2]在子工程中声明对父工程的引用（认干爹的一个仪式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子工程中声明父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--以当前pom文件为基准的,找父工程pom.xml文件的相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[3]在父工程中统一管理junit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理，这里专门用来管理，不能够传递的依赖，进行版本号控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- junit是“test”范围的依赖，不能够传递，在这里面统一管理版本号--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[4]在子工程中删除junit依赖的版本号部分 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;version&gt;4.11&lt;/version&gt;--&gt;</span> 删除掉</span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[5]实现效果</p><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015552.png" alt="Image"></li></ul></li><li><p>[6]：父模块的Pom.xml文件的配置。</p><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015722.png" alt="Image"></li></ul></li></ul><h2 id="七、Maven的聚合："><a href="#七、Maven的聚合：" class="headerlink" title="七、Maven的聚合："></a>七、Maven的聚合：</h2><ul><li><p>（聚合就是Maven中，各个模块的一键安装。）</p></li><li><p>注意：配置了继承的模块，在执行安装命令（ install）的时候，要先安装 “父模块”再安装其他模块才能成功。</p></li><li><p>Maven中的一件安装，就可以自动的按顺序，将每个模块都按依赖顺序进行安装。</p></li><li><p>实现一件安装步骤：</p><ul><li><p>【1】创建一个“总的聚合工程”，（一般把“父模块”作为“总的聚合工程”，大的情况下也是将，聚合的配置，也配在父模块内）</p></li><li><p>【2】在一个”总的聚合工程”的pom.xml文件中，配置各个參与聚合的模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置聚合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--指定各个子工程的相对路径--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hellow<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HellowFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="八、Maven仓库地址"><a href="#八、Maven仓库地址" class="headerlink" title="八、Maven仓库地址"></a>八、Maven仓库地址</h2><ul><li><a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a></li><li><a href="https://developer.aliyun.com/mvn/search">仓库服务 (aliyun.com)</a></li></ul><h2 id="九、IDEA中Maven配置"><a href="#九、IDEA中Maven配置" class="headerlink" title="九、IDEA中Maven配置"></a>九、IDEA中Maven配置</h2><p><a href="https://www.jb51.net/article/259780.htm">IDEA配置Maven的超详细步骤_java_脚本之家 (jb51.net)</a></p><p><a href="https://blog.csdn.net/qq_42057154/article/details/106114515">IDEA配置Maven（详细版）_idea maven-CSDN博客</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Maven&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、Maven的一些理解&quot;&gt;&lt;a href=&quot;#一、Maven的一些理解&quot; class=&quot;headerlink&quot; title=&quot;一、Maven的一些理解&quot;&gt;&lt;/a&gt;一、Maven的一些理解&lt;/h2&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    <category term="maven" scheme="https://protonlml.github.io/categories/java/maven/"/>
    
    
    <category term="maven" scheme="https://protonlml.github.io/tags/maven/"/>
    
    <category term="项目自动化构建工具" scheme="https://protonlml.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2.Servlet</title>
    <link href="https://protonlml.github.io/2019/10/07/javaweb/2.Servlet/"/>
    <id>https://protonlml.github.io/2019/10/07/javaweb/2.Servlet/</id>
    <published>2019-10-07T01:00:00.000Z</published>
    <updated>2024-11-27T17:33:02.724Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Servlet</center></h1><h2 id="1-什么是Servlet"><a href="#1-什么是Servlet" class="headerlink" title="1.什么是Servlet"></a>1.什么是Servlet</h2><blockquote><p>&#x3D;&#x3D;<code>Servlet 是运行在服务端（tomcat）的 java 小程序</code>&#x3D;&#x3D;，是sun公司提供的一套定义动态资源规范；从代码层面上来讲Servlet就是一个接口</p></blockquote><ul><li>用来接收、处理客户端请求、响应给浏览器的动态资源。在整个Web应用中，Servlet主要负责接收处理请求、协同调度功能以及响应数据。我们可以把Servlet称为Web应用中的&#x3D;&#x3D;控制器&#x3D;&#x3D;</li><li>不是所有的JAVA类都能用于处理客户端请求，能处理客户端请求并做出响应的一套技术标准就是Servlet </li><li>Servlet是运行在服务端的，所以Servlet &#x3D;&#x3D;<code>必须在WEB项目中</code>&#x3D;&#x3D;开发且在Tomcat 这样的服务容器中运行</li></ul><h2 id="2-浏览器请求-服务器响应的过程"><a href="#2-浏览器请求-服务器响应的过程" class="headerlink" title="2.浏览器请求-服务器响应的过程"></a>2.浏览器请求-服务器响应的过程</h2><p>​2.1 首先要知道，在Tomcat(web项目运行容器)中，lib目录下就有Servlet.jar     api  ，这个是tomcat自带的，我们在web项目中，不需要重复导入这个jar包。但是项目在Modules设置中要加入tomcat依赖才能生效。</p><pre><code>     2.2我们要自定义Servlet类，来继承HttpServlet 这个抽象类，（它是Servlet.jar包中的）</code></pre><p>​        重写 service方法（HttpServlet中的service方法，是用来判断请求是哪种类型的请求，如果是get就跳转到doGet 方法执行，如果是post方式请求则跳转doPost 方法执行）或者直接重写  doGet 或者 doPost方法</p><p>​2.3 在web.xml文件中，配置servlet路径映射。注意标签不要写颠倒了. </p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411272111359.png" alt="image-20241127211141030"></p><h2 id="3-Concent-type"><a href="#3-Concent-type" class="headerlink" title="3.Concent_type"></a>3.Concent_type</h2><p>Concent_type 应答类型</p><p>浏览器 上传文件时，在请求头中，有一行是Concent_type:text 这种，告诉服务器tomcat上传的数据是什么类型的。</p><p>在响应头中也有Concent_type 一行的值。 告诉浏览器，响应的是什么类型的资源。浏览器好作出响应的解析</p><p>这种映射关系，是tomcat中的web.xml文件中的映射，tomcat提前已经写好了</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411280001093.png" alt="image-20241128000116783"></p><h2 id="4-请求路径，怎么找到servlet资源的"><a href="#4-请求路径，怎么找到servlet资源的" class="headerlink" title="4.请求路径，怎么找到servlet资源的."></a>4.请求路径，怎么找到servlet资源的.</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411280029090.png" alt="image-20241128000455241"></p><h2 id="5-Servlet的注解方式配置"><a href="#5-Servlet的注解方式配置" class="headerlink" title="5.Servlet的注解方式配置"></a>5.Servlet的注解方式配置</h2><p>直接在Servlet类上面，使用@WebServlet注解来映射地址，这样就不用在web.xml配置文件中书写一大堆servl映射了。</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411280029810.png" alt="image-20241128002741401"></p><h2 id="6-Servlet生命周期"><a href="#6-Servlet生命周期" class="headerlink" title="6.Servlet生命周期"></a>6.Servlet生命周期</h2><p>应用程序中的对象不仅在空间上有层次结构的关系，在时间上也会因为处于程序运行过程中的不同阶段而表现出不同状态和不同行为，这就是对象的生命周期。</p><p>简单的叙述生命周期，就是对象在容器中从开始创建到销毁的过程。</p><p>Servlet对象是Servlet容器创建的，生命周期方法都是由容器（目前我们使用的是Tomcat）调用的。这一点和我们之前所编写的代码有很大不同。在今后的学习中我们会看到，越来越多的对象交给容器或框架来创建，越来越多的方法由容器或框架来调用，开发人员要尽可能多的将精力放在业务逻辑的实现上。</p><p>servlet对象一般是在第一次请求时，才进行创建,而且时单例的（请求时稍慢）</p><p>如果配置了loadOnStartup 配置的是正数，那么就会在tomcat启动时就创建servlet(请求时就快了)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletLifeCycle<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.ServletLifeCycle<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--load-on-startup</span></span><br><span class="line"><span class="comment"> 如果配置的是正整数 则表示容器在启动时就要实例化Servlet,  数字表示的是实例化的顺序 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletLifeCycle<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletLiftCycle<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解方式：&#x3D;&#x3D;@WebServlet(value&#x3D;”&#x2F;s1”,loadOnStartup &#x3D; 6)&#x3D;&#x3D;</p><h3 id="6-1生命周期总结"><a href="#6-1生命周期总结" class="headerlink" title="6.1生命周期总结"></a>6.1生命周期总结</h3><p>1.通过生命周期测试发现Servlet&gt;对象在容器中是单例的；</p><p>2.容器是可以处理并发的用户请求的，每个请求在容器中都会开启一个线程；</p><p>3.多个线程可能会使用相同的Servlet对象，所以在Servlet中，&#x3D;&#x3D;我们不要轻易定义一些需要经常修改的成员变量；&#x3D;&#x3D;</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411280103727.png" alt="image-20241128010320114"></p><p>4.load-on-startupl中定义的正整数表示实例化顺序，如果数字重复了，容器会自行解决实例化顺序问题，但是应该避免重复：</p><p>5.Tomcat容器中，已经定义了一些随系统启动实例化的Servlet，自定义的Servlet的load-on-startup尽量不要占用数字1-5；</p><h2 id="7-defaultServlet"><a href="#7-defaultServlet" class="headerlink" title="7.defaultServlet"></a>7.defaultServlet</h2><p>defaultServlet是tomcat中自带的在tomcat的web.xml文件中设置了<load-on-startup>1</load-on-startup></p><p>它是在启动tomcat的时候，就创建了。</p><p>作用是：请求所有的静态资源都会走这个defaultServlet 根据请求的资源路径以及名称去找对应的资源，然后将IO流的方式写入到response对象中，返回给前端。</p><p>springMVC中也有一个servlet，如果项目不是前后端分离，单体ssm项目，那这个springmvc会导致这个tomcat中默认的defaultServlet失效，导致访问不到静态资源，需要配置才能恢复访问。</p><h2 id="8-servlet的继承结构"><a href="#8-servlet的继承结构" class="headerlink" title="8.servlet的继承结构"></a>8.servlet的继承结构</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411280125087.png" alt="image-20241128012505065"></p><p>在HttpServlet中的service方法，是用来判断请求是哪种类型的请求，如果是get就跳转到doGet 方法执行，如果是post方式请求则跳转doPost 方法执行</p><p>继承HttpServlet后，要么重写service 要么重写 doGet&#x2F;doPost</p><p>如果两个都重写了，则service优先</p><h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Servlet&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-什么是Servlet&quot;&gt;&lt;a href=&quot;#1-什么是Servlet&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Servlet&quot;&gt;&lt;/a&gt;1.什么是Servlet&lt;/h</summary>
      
    
    
    
    <category term="Servlet" scheme="https://protonlml.github.io/categories/Servlet/"/>
    
    
    <category term="javaweb" scheme="https://protonlml.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>1.vue</title>
    <link href="https://protonlml.github.io/2019/10/06/javaweb/1.vue(%E7%BC%96%E7%A8%8B%E4%B8%8D%E8%89%AF%E4%BA%BA)/"/>
    <id>https://protonlml.github.io/2019/10/06/javaweb/1.vue(%E7%BC%96%E7%A8%8B%E4%B8%8D%E8%89%AF%E4%BA%BA)/</id>
    <published>2019-10-06T03:00:00.000Z</published>
    <updated>2024-11-30T12:59:50.460Z</updated>
    
    <content type="html"><![CDATA[<h1><center>vue</center></h1>## 1.vue简介官方定义：渐进式javascript框架==>简化页面中js操作通俗定义：js框架 用来简化页面dom操作，通过使用vue实现页面中复杂功能从而不需要频繁操作dom甚至不需要操作任何dom     vue框架 前后端分离 基础特性：MVVM双向绑定机制 Model 数据变化-----视图View## 2.Vue入门案例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>备忘录小案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个Vue对象 V 必须大写！！！！ </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>## 总结>1.一个页面中只能存在一个vue实例>2.el代表vue实例作用范围日后只有在作用范围内才能使用vue相关语法>3.data代表vue实例中一系列数据日后只能在vue作用范围内进行数据获取获取数据方式{{属性名}}>4.在使用{{属性名}}获取数据时获取数据可以进行算数逻辑 调用相关类型相关方法>5.e1代表vue实例作用范围，el值可以是任何css选择器但是推荐使用id选择器## 3.Vue指令的一些总结首先要明确，所有的Vue指令都是写在html的标签内部的，后跟 "="，==v-on=" "== ​例如：```<div v-on="fun1">div块元素</div>```### 3.1  vue指令 ① v-text ,v-html ​作用：都是用来获取vue实例中data中声明的属性值，渲染在页面上​语法:​ 例如：```<span v-text="msg"></span>```​ ```<span v-html="msg"></span>```v-text、{{}}区别：1.v-text取值覆盖标签原始内容  而 {{}}直接将值插入到指定位置：插值表达式 2.v-text在网络条件比较差情况下避免插值闪烁v-text、v-html1.v-text直接将获取的数据以文本方式渲染到页面中相当于 innerText2.v-html获取的数据先进行html标签解析解析之后在渲染    innerHTML<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    v-text 和 v-html 的使用</span></span><br><span class="line"><span class="comment">            v-text 相当于 innerText 获取或者插入 父标签 的 子标签插入 text文本</span></span><br><span class="line"><span class="comment">            v-html 相当于 innerHtml 获取或者设置 父标签的 子标签 为 新标签</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;users[1].age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    v-text 原样显示 tag内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    v-html 解析tag中的内容，有html标签会解析--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;tag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;这是msg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;黄智贤&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">studentID</span>: <span class="number">20240901</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;蔡徐坤&quot;</span>, <span class="attr">age</span>: <span class="number">11</span>, <span class="attr">studentID</span>: <span class="number">20240902</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;黄晓明&quot;</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">studentID</span>: <span class="number">20240903</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;成龙&quot;</span>, <span class="attr">age</span>: <span class="number">53</span>, <span class="attr">studentID</span>: <span class="number">20240904</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">product</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;手机&quot;</span>, <span class="attr">price</span>: <span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tag</span>: <span class="string">&quot;&lt;a href=&#x27;www.baidu.com&#x27;&gt;百度一下&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>-----②.v-on事件绑定事件三要素：1.事件源2.事件3.监听器作用：用来给html标签绑定指定事件简化写法：@​例如：button标签绑定 单击事件​```<button @click="fun"></button>```<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.v-on 绑定点击事件 v-on  可简写为 @ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   点击事件 @click=&quot;&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-on:click</span>=<span class="string">&quot;fun1($event)&quot;</span>&gt;</span>测试@click<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. @mouseover 鼠标移动到上面 事件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">mouseover</span>=<span class="string">&quot;fun2()&quot;</span>&gt;</span>测试mouseover<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. @mouseout鼠标移除事件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">mouseout</span>=<span class="string">&quot;fun3()&quot;</span>&gt;</span>测试mouseout<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4. @keydown  键盘按下事件 ，并同时获取keyCod --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    取event对象 一定使用 $ 来取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">keydown</span>=<span class="string">&quot;fun4($event)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>按下的键盘按键的 key_Code是&#123;&#123; key_code &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  按键修饰符，和键盘事件连用   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;fun7&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">keydown.ctrl</span>=<span class="string">&quot;fun8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    5. --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事件传递  子事件，会传递到父标签上  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid rebeccapurple&quot;</span> @<span class="attr">mouseover</span>=<span class="string">&quot;fun5()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 属性值，不能使用 &#123;&#123;&#125;&#125;  插值表达式来设置值</span></span><br><span class="line"><span class="comment">                    src=&quot;&#123;&#123;img&#125;&#125;&quot; 这样写可以显示但是会报错</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                应该使用v-bind:src 来绑定属性值</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;切水果&quot;</span> @<span class="attr">mouseover</span>=<span class="string">&quot;fun2()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">img</span>: <span class="string">&quot;./2312.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;黄智贤&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">studentID</span>: <span class="number">20240901</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;蔡徐坤&quot;</span>, <span class="attr">age</span>: <span class="number">11</span>, <span class="attr">studentID</span>: <span class="number">20240902</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;黄晓明&quot;</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">studentID</span>: <span class="number">20240903</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;成龙&quot;</span>, <span class="attr">age</span>: <span class="number">53</span>, <span class="attr">studentID</span>: <span class="number">20240904</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">product</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;手机&quot;</span>, <span class="attr">price</span>: <span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tag</span>: <span class="string">&quot;&lt;a href=&#x27;www.baidu.com&#x27;&gt;百度一下&lt;/a&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 一定要给一个默认值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">key_code</span>: <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun1</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//    这里书写点击后的逻辑</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;点击了测试@click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun2测试 鼠标移上去了mouseover&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun3</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun3测试鼠标移走了 mouseout&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun4</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> key_code = event.<span class="property">keyCode</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">key_code</span> = key_code;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun5</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div3上面的mouseover鼠标移入事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun6</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;图片被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun7</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;回车键被按下了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun8</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ctrl被按下了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>-----③. v-show ; v-if指令​作用：都是用来控制html标签  哪些显示  哪些不显示​语法：直接在对应标签加入v-show="true"   v-if="false"​例如： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.img_sg</span> &#123;</span></span><br><span class="line"><span class="language-css">            whith: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.img_dj</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">120px</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dashed_div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed green;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.solid_div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        v-if 指令 和 v-show指令的使用</span></span><br><span class="line"><span class="comment">        这两个指令都是对页面元素的隐藏与显示</span></span><br><span class="line"><span class="comment">        需求：不同人看到的页面不一样，比如管理员能看到所有页面元素，访客可能就看不到有一些元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        v-if=&quot;true&quot;   显示</span></span><br><span class="line"><span class="comment">        v-show=&quot;true&quot; 显示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        区别：</span></span><br><span class="line"><span class="comment">            v-if 作用于标签上值为false时，会删除dom树上的这个节点（页面开销）</span></span><br><span class="line"><span class="comment">            v-show 只是控制当前标签的css样式。其dom树还在。</span></span><br><span class="line"><span class="comment">            F12查看</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;true&quot;</span>&gt;</span>hellow1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    使用vue来控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>hellow2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  v-show也可以控制页面元素是否显示  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>hellow3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    使用vue对象中的data属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>hellow4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fun2&quot;</span>&gt;</span>点我hellow2和hellow4显示或者隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//作用范围</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">img_src</span>: <span class="string">&quot;./img/2312.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">img_style</span>: <span class="string">&quot;img_sg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">div_css</span>: <span class="string">&quot;dashed_div&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun2执行le&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun3</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun3执行了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_src</span> = <span class="string">&quot;./img/2312.jpg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_style</span> = <span class="string">&quot;img_sg&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun4</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun4执行了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_src</span> = <span class="string">&quot;./img/dijia.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_style</span> = <span class="string">&quot;img_dj&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">dashedLine</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">div_css</span> = <span class="string">&quot;dashed_div&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">solidLine</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">div_css</span> = <span class="string">&quot;solid_div&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>​区别：v-if操作domv-show 操作css​总结：页面元素频繁的显示隐藏 变化快 v-show  页面元素变化慢v-if-----④.  v-bind 指令​作用：用来将html标签属性  绑定vue实例进行管理​语法：绑定哪个数据直接在属性前加入   v-bind:属性名="vue管理属性值"​简化写法：v-bind：​简化之后直接一个冒号   ：​例如：```<img  :src="img_src" >```<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.img_sg</span> &#123;</span></span><br><span class="line"><span class="language-css">            whith: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.img_dj</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">120px</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dashed_div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dashed green;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.solid_div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--    v-bind 指令的使用</span></span><br><span class="line"><span class="comment">            v-bind指令是用来，绑定 标签上的属性的，</span></span><br><span class="line"><span class="comment">            将标签属性的值，交给vue实例来管理</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    使用场景：鼠标移入照片上，切换照片，移除照片切换照片--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--思路：切换img的src 让其动态的指定不同照片的路径，使用v-bind来绑定属性</span></span><br><span class="line"><span class="comment">              鼠标移动到img图片上，和从img图片上移除，都绑定事件。来切换src照片地址</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;img src=&quot;./img/2312.jpg&quot; alt=&quot;切水果&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    这里，img图片源的 src 通过v-bind：进行绑定了。</span></span><br><span class="line"><span class="comment">            img 图片的 class 样式 也进行了绑定， 达到一定条件，样式就改变了。</span></span><br><span class="line"><span class="comment">            使用了， v-bind： 的简化写法  ： 直接一个冒号就可以了</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:class</span>=<span class="string">&quot;img_style&quot;</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;img_src&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;照片&quot;</span> @<span class="attr">mouseover</span>=<span class="string">&quot;fun3&quot;</span> @<span class="attr">mouseout</span>=<span class="string">&quot;fun4&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    只要是html标签所具有的属性，其都可以进行绑定，</span></span><br><span class="line"><span class="comment">        除了form 表单中 input框框中的value值，只能用 v-mode 来绑定</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里是div的样式为动态的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;div_css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;dashedLine&quot;</span>&gt;</span>切换为虚线<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;solidLine&quot;</span>&gt;</span>切换为实线<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//作用范围</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">img_src</span>: <span class="string">&quot;./img/2312.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">img_style</span>: <span class="string">&quot;img_sg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">div_css</span>: <span class="string">&quot;dashed_div&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun3</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun3执行了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_src</span> = <span class="string">&quot;./img/2312.jpg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_style</span> = <span class="string">&quot;img_sg&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fun4</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun4执行了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_src</span> = <span class="string">&quot;./img/dijia.jpeg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">img_style</span> = <span class="string">&quot;img_dj&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">dashedLine</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">div_css</span> = <span class="string">&quot;dashed_div&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">solidLine</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">div_css</span> = <span class="string">&quot;solid_div&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>⑤. v-for指令作用：用来对vue实例中数据进行循环遍历 到指定html标签中语法：直接在对应标签上使用对象数组数组对象v-for="（index,value,key）（index,item）（index,item）in vue实例遍历数据"​     注意：建议后面跟着  :key="唯一标识" 这是为了使vue更好的确定唯一值<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#table</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#table</span> <span class="selector-tag">tr</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    v-for的使用</span></span><br><span class="line"><span class="comment">            v-for 可以用来，遍历对象</span></span><br><span class="line"><span class="comment">            要想将哪个标签循环显示，就直接在这个标签上面使用 v-for</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &lt;td v-for=&quot;&quot; :key=&quot;&quot;&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            遍历对象固定写法：v-for=&quot; 单个值 角标 in vue实例中的属性 &quot; :key=&quot;单个值.id&quot;</span></span><br><span class="line"><span class="comment">                           例如：v-for=&quot;(index,value,key) in user&quot; :key=&quot;value.id&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             固定写法：</span></span><br><span class="line"><span class="comment">                  遍历数组</span></span><br><span class="line"><span class="comment">                  如： v-for=&quot;index,user  in users&quot; :key=&quot;user.id&quot;</span></span><br><span class="line"><span class="comment">             注意：这里面的index是当前循环的角标 0开始，而且要写在第一个位置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>做一个表格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(index,user) in users &quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;user.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-html</span>=<span class="string">&quot;user.age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.studentID &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.fraction &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(index ,user) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span>&#123;&#123; user.name &#125;&#125;_------&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    v-mode的使用 是用来绑定 form表单中的value的属性</span></span><br><span class="line"><span class="comment">            v-mode 是最能直接体现 VMMV 的  双向绑定特性</span></span><br><span class="line"><span class="comment">            如下：</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        qq: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.qq&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        注册按钮，是用来 发送 ajax请求的 获取form表单中所有的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">studentID</span>: <span class="number">20240901</span>, <span class="attr">fraction</span>: <span class="number">180</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">studentID</span>: <span class="number">20240902</span>, <span class="attr">fraction</span>: <span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;万物&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">studentID</span>: <span class="number">20240903</span>, <span class="attr">fraction</span>: <span class="string">&quot;4411&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">user</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>⑥.  v-model指令作用：用来将form表单中 绑定value 的值     value属性绑定给vue实例进行管理注意：最能直观体现双向绑定原理的指令语法：直接在对应form表单标签中加入```<input v-model="username"/>```<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#table</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#table</span> <span class="selector-tag">tr</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    v-mode的使用 是用来绑定 form表单中的value的属性</span></span><br><span class="line"><span class="comment">            v-mode 是最能直接体现 VMMV 的  双向绑定特性</span></span><br><span class="line"><span class="comment">            如下：</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        qq: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.qq&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        注册按钮，是用来 发送 ajax请求的 获取form表单中所有的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">studentID</span>: <span class="number">20240901</span>, <span class="attr">fraction</span>: <span class="number">180</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">studentID</span>: <span class="number">20240902</span>, <span class="attr">fraction</span>: <span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;万物&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">studentID</span>: <span class="number">20240903</span>, <span class="attr">fraction</span>: <span class="string">&quot;4411&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">user</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>## 4.小案例：### 4.1备忘录小案例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>备忘录小案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;javascript:&quot; @click=&quot;deleteByIndex(index)&quot;&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    a标签中的 href=&quot;javascript:&quot; 阻止了a标签的默认行为，就是加上这句话后，点击a标签，不会跳转刷新页面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;--&gt;</span></span><br><span class="line">    请输入内容：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加到备忘录&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addMemo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;li&gt;1.今天晚上吃点好吃的&lt;/li&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;li&gt;2.今天晚上一起打游戏&lt;/li&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;li&gt;3.今天晚上一起学习&lt;/li&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot; (index ,record) in lis&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;record.id&quot;</span> <span class="attr">track-by</span>=<span class="string">&quot;$index&quot;</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;.&#123;&#123; record &#125;&#125; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteByIndex(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clearMemo&quot;</span>&gt;</span>清空备忘录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前备忘录共：&#123;&#123; lis.length &#125;&#125;条<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lis</span>: [<span class="string">&quot;今天晚上吃点好吃的&quot;</span>, <span class="string">&quot;今天晚上一起打游戏&quot;</span>, <span class="string">&quot;今天晚上一起学习&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addMemo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     将input框框中的值添加到 li列表中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;请输入内容！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">lis</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">deleteByIndex</span>(<span class="params">index</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">lis</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clearMemo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     清空备忘录</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">lis</span>.<span class="title function_">deleteData</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure> ## 5.练习### 1.购物车案例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>购物车案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#table</span>, <span class="selector-id">#table</span> <span class="selector-tag">tr</span>, <span class="selector-id">#table</span> <span class="selector-tag">th</span>, <span class="selector-id">#table</span> <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物车案例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    编号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加到购物车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(index,product) in products&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;product.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; product.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; product.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;+&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;quantityIn(index)&quot;</span>&gt;</span>&amp;nbsp&#123;&#123; product.number &#125;&#125;&amp;nbsp<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;quantityRt(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--            这种计算的列，直接写计算表达式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; (product.number * product.price).toFixed(2) &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; products.length + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>总价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>&#123;&#123; totalPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">stock</span>: <span class="number">10</span>,  <span class="comment">//库存数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">products</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;iphone8&quot;</span>, <span class="attr">price</span>: <span class="number">19.95</span>, <span class="attr">number</span>: <span class="number">1</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;meta40 pro&quot;</span>, <span class="attr">price</span>: <span class="number">25.22</span>, <span class="attr">number</span>: <span class="number">1</span>&#125;],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">total</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 数量增加</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">quantityIn</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">products</span>[index].<span class="property">number</span> &lt; <span class="variable language_">this</span>.<span class="property">stock</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">products</span>[index].<span class="property">number</span>++;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 总价格变化</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">totalPrice</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;最多只能买10件&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 数量减少</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">quantityRt</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">products</span>[index].<span class="property">number</span> &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">products</span>[index].<span class="property">number</span>--;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 总价格变化</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">totalPrice</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;数量错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//做计算用的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 作用：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                用来在vue实例中完成相关业务计算工作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                日后在将某个数据渲染页面时  （如果该数据不是直出）需要经过业务处理之后(计算逻辑)再渲染就可以使用 computed</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          好处： 提升vue运行性能主要使用computed进行计算相关处理会将第一次计算结果进行缓存，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          *     便于日后页面多次使用&#123;&#123;&#125;&#125;页面中多次使用插值表达式来取这个值</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          *     使用的时候，直接写属性名totalPrice，不要写totalPrice()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//计算总价格</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 在计算值的时候，从data中取值，一定要注意 取的是字符串，一定要转为int 或者 float</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">totalPrice</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============methods=============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> totalPrice = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">products</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    totalPrice += <span class="variable language_">this</span>.<span class="property">products</span>[i].<span class="property">number</span> * <span class="variable language_">this</span>.<span class="property">products</span>[i].<span class="property">price</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> totalPrice.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">totalPrice</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>##  6.computed 属性的使用<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 作用：</span><br><span class="line">        用来在vue实例中完成相关业务计算工作</span><br><span class="line">        日后在将某个数据渲染页面时  （如果该数据不是直出）需要经过业务处理之后(计算逻辑)再渲染就可以使用 computed</span><br><span class="line">  好处： 提升vue运行性能主要使用computed进行计算相关处理会将第一次计算结果进行缓存，</span><br><span class="line">  *     便于日后页面多次使用&#123;&#123;&#125;&#125;页面中多次使用插值表达式来取这个值</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>总价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>&#123;&#123; totalPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>&#123;&#123; totalPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>&#123;&#123; totalPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">这里面页面使用了三次&#123;&#123; totalPrice &#125;&#125; 实际只计算1次，因为 totalPrice 的计算，放在了computed: &#123;&#125; 里面</span><br><span class="line">实际上，只要不是直出数据渲染到页面上，就可以将计算，放在computed: &#123;&#125; 中。来提高运行速度</span><br><span class="line">-----------------------------------------------------</span><br><span class="line"></span><br><span class="line">//做计算用的属性</span><br><span class="line">        /*</span><br><span class="line">        * 作用：</span><br><span class="line">                用来在vue实例中完成相关业务计算工作</span><br><span class="line">                日后在将某个数据渲染页面时  （如果该数据不是直出）需要经过业务处理之后(计算逻辑)再渲染就可以使用 computed</span><br><span class="line">          好处： 提升vue运行性能主要使用computed进行计算相关处理会将第一次计算结果进行缓存，</span><br><span class="line">          *     便于日后页面多次使用&#123;&#123;&#125;&#125;页面中多次使用插值表达式来取这个值</span><br><span class="line">        * */</span><br><span class="line"> new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            //计算总价格</span><br><span class="line">            // 在计算值的时候，从data中取值，一定要注意 取的是字符串，一定要转为int 或者 float</span><br><span class="line">            totalPrice() &#123;</span><br><span class="line">                console.log(&quot;===============methods=============&quot;);</span><br><span class="line">                var totalPrice = 0;</span><br><span class="line">                for (let i = 0; i &lt; this.products.length; i++) &#123;</span><br><span class="line">                        totalPrice += this.products[i].number * this.products[i].price;</span><br><span class="line">                &#125;</span><br><span class="line">                return totalPrice.toFixed(2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>## 7.事件修饰符>7.1    .stop>    作用：用来阻止事件冒泡   用来阻止事件继续问外层传递（前提是内外层的事件，是同种类型的事件）>7.2   .prevent>    作用：用来阻止标签的默认行为>7.3.self>    作用：只监所自身标签触发的事件，一般用在父级元素上面，只关注父元素本身事件，子元素就算触发了它的事件，父元素也会忽略>7.4.once>    作用：该事件只触发一次### 7.1 阻止标签的默认行为发生<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    阻止 标签的默认行行为</span></span><br><span class="line"><span class="comment">            方法1： 在事件上使用prevent修饰符来，去除a标签的默认行为</span></span><br><span class="line"><span class="comment">            方法2：在href上面写 &lt;a href=&quot;javaScript:&quot; @click=&quot;a&quot;&gt;a标签&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javaScript:&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="language-css">            //<span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div2</span> &#123;</span></span><br><span class="line"><span class="language-css">            //<span class="attribute">border</span>: <span class="number">3px</span> solid orchid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#div3</span> &#123;</span></span><br><span class="line"><span class="language-css">            //<span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    .stop</span></span><br><span class="line"><span class="comment">        作用：用来阻止事件冒泡   用来阻止事件继续问外层传递（前提是内外层的事件，是同种类型的事件）</span></span><br><span class="line"><span class="comment">    .prevent</span></span><br><span class="line"><span class="comment">        作用：用来阻止标签的默认行为</span></span><br><span class="line"><span class="comment">    .self</span></span><br><span class="line"><span class="comment">        作用：只监所自身标签触发的事件，一般用在父级元素上面，只关注父元素本身的事件，子元素就算触发了它的事件，父元素也会忽略</span></span><br><span class="line"><span class="comment">    .once</span></span><br><span class="line"><span class="comment">        作用：该事件只触发一次</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg1 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    事件冒泡：</span></span><br><span class="line"><span class="comment">                前提是，外层元素标签绑定的事件，和内层标签绑定的是同一种事件，</span></span><br><span class="line"><span class="comment">                当内层子标签，触发了它上面的事件，</span></span><br><span class="line"><span class="comment">                其外层父标签也会自动除法事件。</span></span><br><span class="line"><span class="comment">                这就是事件冒泡</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                解决办法： 不想让事件往外层冒泡，可以直接在内层标签元素的事件上面，加上事件修饰符.stop 就是 用来阻止其事件往外层传递</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;div1click&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;div2click&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;div3click&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    阻止 标签的默认行行为</span></span><br><span class="line"><span class="comment">            方法1： 在事件上使用prevent修饰符来，去除a标签的默认行为</span></span><br><span class="line"><span class="comment">            方法2：在href上面写 &lt;a href=&quot;javaScript:&quot; @click=&quot;a&quot;&gt;a标签&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javaScript:&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg1</span>: <span class="string">&quot;事件冒泡&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">div1click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div1被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">div2click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div2被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">div3click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div3被点击了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">a</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a标签被点击了，执行了该方法，默认的行为href跳转失效了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>## 8.按键修饰符（和键盘事件连用“keydown”“keyup”"keypress""）**Vue** **允许为** **v-on** **在监听键盘事件时添加按键修饰符 ****就是把我们常用的键盘按键，给做成了属性，我们在使用“keydown”“keyup”"keypress""事件的时候，可以直接在：“事件后面.属性”** >>>.enter>>.tab>>.delete (捕获"删除"和 "退格"键)>>.esc>>.space>>.up>>.down>>.left>>.right>>.ctrl>>.alt>>.shift>>.meta<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-on 按钮修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;fun1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//表示当前vue对象接管了 div 区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fun1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;你按了回车&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>子组件事件传递，子组件，调用父组件中的，函数。可以传一个参数。反过来看，就明白了？变相子组件，传数据给父组件<hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;vue&lt;/center&gt;&lt;/h1&gt;




## 1.vue简介

官方定义：渐进式javascript框架==&gt;简化页面中js操作

通俗定义：js框架 用来简化页面dom操作，通过使用vue实现页面中复杂功能从而不需要频繁操作dom甚至不需要操作任何d</summary>
      
    
    
    
    <category term="vue" scheme="https://protonlml.github.io/categories/vue/"/>
    
    
    <category term="javaweb" scheme="https://protonlml.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>10.mysql第13章约束</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/10.mysql%E7%AC%AC13%E7%AB%A0%E7%BA%A6%E6%9D%9F/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/10.mysql%E7%AC%AC13%E7%AB%A0%E7%BA%A6%E6%9D%9F/</id>
    <published>2019-10-03T10:00:00.000Z</published>
    <updated>2024-11-02T16:16:04.352Z</updated>
    
    <content type="html"><![CDATA[<h1><center>约束</center></h1><h2 id="1-约束-constraint-概述"><a href="#1-约束-constraint-概述" class="headerlink" title="1. 约束(constraint)概述"></a>1. 约束(constraint)概述</h2><h2 id="1-1-为什么需要约束"><a href="#1-1-为什么需要约束" class="headerlink" title="1. 1 为什么需要约束"></a>1. 1 为什么需要约束</h2><h4 id="数据完整性（Data-Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中"><a href="#数据完整性（Data-Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中" class="headerlink" title="数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中"></a>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中</h4><h4 id="存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。"><a href="#存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。" class="headerlink" title="存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。"></a>存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</h4><h4 id="为了保证数据的完整性，SQL规范以约束的方式对-表数据进行额外的条件限制-。从以下四个方面考虑："><a href="#为了保证数据的完整性，SQL规范以约束的方式对-表数据进行额外的条件限制-。从以下四个方面考虑：" class="headerlink" title="为了保证数据的完整性，SQL规范以约束的方式对 表数据进行额外的条件限制 。从以下四个方面考虑："></a>为了保证数据的完整性，SQL规范以约束的方式对 表数据进行额外的条件限制 。从以下四个方面考虑：</h4><h4 id="实体完整性（Entity-Integrity）：例如，同一个表中，不能存在两条完全相同无法区分的记录"><a href="#实体完整性（Entity-Integrity）：例如，同一个表中，不能存在两条完全相同无法区分的记录" class="headerlink" title="实体完整性（Entity Integrity）：例如，同一个表中，不能存在两条完全相同无法区分的记录"></a>实体完整性（Entity Integrity）：例如，同一个表中，不能存在两条完全相同无法区分的记录</h4><h4 id="域完整性（Domain-Integrity）：例如：年龄范围0-120，性别范围“男-女”"><a href="#域完整性（Domain-Integrity）：例如：年龄范围0-120，性别范围“男-女”" class="headerlink" title="域完整性（Domain Integrity）：例如：年龄范围0-120，性别范围“男&#x2F;女”"></a>域完整性（Domain Integrity）：例如：年龄范围0-120，性别范围“男&#x2F;女”</h4><h4 id="引用完整性（Referential-Integrity）：例如：员工所在部门，在部门表中要能找到这个部门"><a href="#引用完整性（Referential-Integrity）：例如：员工所在部门，在部门表中要能找到这个部门" class="headerlink" title="引用完整性（Referential Integrity）：例如：员工所在部门，在部门表中要能找到这个部门"></a>引用完整性（Referential Integrity）：例如：员工所在部门，在部门表中要能找到这个部门</h4><h4 id="用户自定义完整性（User-defined-Integrity）：例如：用户名唯一、密码不能为空等，本部门"><a href="#用户自定义完整性（User-defined-Integrity）：例如：用户名唯一、密码不能为空等，本部门" class="headerlink" title="用户自定义完整性（User-defined Integrity）：例如：用户名唯一、密码不能为空等，本部门"></a>用户自定义完整性（User-defined Integrity）：例如：用户名唯一、密码不能为空等，本部门</h4><h4 id="经理的工资不得高于本部门职工的平均工资的-5-倍。"><a href="#经理的工资不得高于本部门职工的平均工资的-5-倍。" class="headerlink" title="经理的工资不得高于本部门职工的平均工资的 5 倍。"></a>经理的工资不得高于本部门职工的平均工资的 5 倍。</h4><h2 id="1-2-什么是约束"><a href="#1-2-什么是约束" class="headerlink" title="1. 2 什么是约束"></a>1. 2 什么是约束</h2><h4 id="约束是表级的强制规定。"><a href="#约束是表级的强制规定。" class="headerlink" title="约束是表级的强制规定。"></a>约束是表级的强制规定。</h4><h4 id="可以在-创建表时规定约束（通过-CREATE-TABLE-语句）-，或者在-表创建之后通过-ALTER-TABLE-语句规定"><a href="#可以在-创建表时规定约束（通过-CREATE-TABLE-语句）-，或者在-表创建之后通过-ALTER-TABLE-语句规定" class="headerlink" title="可以在 创建表时规定约束（通过 CREATE TABLE 语句） ，或者在 表创建之后通过 ALTER TABLE 语句规定"></a>可以在 创建表时规定约束（通过 CREATE TABLE 语句） ，或者在 表创建之后通过 ALTER TABLE 语句规定</h4><h4 id="约束-。"><a href="#约束-。" class="headerlink" title="约束 。"></a>约束 。</h4><h2 id="1-3-约束的分类"><a href="#1-3-约束的分类" class="headerlink" title="1. 3 约束的分类"></a>1. 3 约束的分类</h2><h4 id="根据约束数据列的限制，-约束可分为："><a href="#根据约束数据列的限制，-约束可分为：" class="headerlink" title="根据约束数据列的限制， 约束可分为："></a>根据约束数据列的限制， 约束可分为：</h4><h4 id="单列约束-：每个约束只约束一列"><a href="#单列约束-：每个约束只约束一列" class="headerlink" title="单列约束 ：每个约束只约束一列"></a>单列约束 ：每个约束只约束一列</h4><h4 id="多列约束-：每个约束可约束多列数据"><a href="#多列约束-：每个约束可约束多列数据" class="headerlink" title="多列约束 ：每个约束可约束多列数据"></a>多列约束 ：每个约束可约束多列数据</h4><h4 id="根据约束的作用范围-，约束可分为："><a href="#根据约束的作用范围-，约束可分为：" class="headerlink" title="根据约束的作用范围 ，约束可分为："></a>根据约束的作用范围 ，约束可分为：</h4><h4 id="列级约束-：只能作用在一个列上，跟在列的定义后面"><a href="#列级约束-：只能作用在一个列上，跟在列的定义后面" class="headerlink" title="列级约束 ：只能作用在一个列上，跟在列的定义后面"></a>列级约束 ：只能作用在一个列上，跟在列的定义后面</h4><h4 id="表级约束-：可以作用在多个列上，不与列一起，而是单独定义"><a href="#表级约束-：可以作用在多个列上，不与列一起，而是单独定义" class="headerlink" title="表级约束 ：可以作用在多个列上，不与列一起，而是单独定义"></a>表级约束 ：可以作用在多个列上，不与列一起，而是单独定义</h4><h4 id="根据约束起的作用-，约束可分为："><a href="#根据约束起的作用-，约束可分为：" class="headerlink" title="根据约束起的作用 ，约束可分为："></a>根据约束起的作用 ，约束可分为：</h4><h4 id="NOT-NULL-非空约束，规定某个字段不能为空"><a href="#NOT-NULL-非空约束，规定某个字段不能为空" class="headerlink" title="NOT NULL 非空约束，规定某个字段不能为空"></a>NOT NULL 非空约束，规定某个字段不能为空</h4><h4 id="UNIQUE-唯一约束-，-规定某个字段在整个表中是唯一的"><a href="#UNIQUE-唯一约束-，-规定某个字段在整个表中是唯一的" class="headerlink" title="UNIQUE 唯一约束 ， 规定某个字段在整个表中是唯一的"></a>UNIQUE 唯一约束 ， 规定某个字段在整个表中是唯一的</h4><h4 id="PRIMARY-KEY-主键-非空且唯一-约束"><a href="#PRIMARY-KEY-主键-非空且唯一-约束" class="headerlink" title="PRIMARY KEY 主键(非空且唯一)约束"></a>PRIMARY KEY 主键(非空且唯一)约束</h4><h4 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY 外键约束"></a>FOREIGN KEY 外键约束</h4><h4 id="CHECK-检查约束"><a href="#CHECK-检查约束" class="headerlink" title="CHECK 检查约束"></a>CHECK 检查约束</h4><h4 id="DEFAULT-默认值约束"><a href="#DEFAULT-默认值约束" class="headerlink" title="DEFAULT 默认值约束"></a>DEFAULT 默认值约束</h4><h5 id="位置-支持的约束类型-是否可以起约束名"><a href="#位置-支持的约束类型-是否可以起约束名" class="headerlink" title="位置 支持的约束类型 是否可以起约束名"></a>位置 支持的约束类型 是否可以起约束名</h5><h5 id="列级约束：-列的后面-语法都支持，但外键没有效果-不可以"><a href="#列级约束：-列的后面-语法都支持，但外键没有效果-不可以" class="headerlink" title="列级约束： 列的后面 语法都支持，但外键没有效果 不可以"></a>列级约束： 列的后面 语法都支持，但外键没有效果 不可以</h5><h5 id="表级约束：-所有列的下面-默认和非空不支持，其他支持-可以（主键没有效果）"><a href="#表级约束：-所有列的下面-默认和非空不支持，其他支持-可以（主键没有效果）" class="headerlink" title="表级约束： 所有列的下面 默认和非空不支持，其他支持 可以（主键没有效果）"></a>表级约束： 所有列的下面 默认和非空不支持，其他支持 可以（主键没有效果）</h5><h4 id="注意：-MySQL不支持check约束，但可以使用check约束，而没有任何效果"><a href="#注意：-MySQL不支持check约束，但可以使用check约束，而没有任何效果" class="headerlink" title="注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果"></a>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果</h4><h4 id="查看某个表已有的约束"><a href="#查看某个表已有的约束" class="headerlink" title="查看某个表已有的约束"></a>查看某个表已有的约束</h4><h2 id="2-非空约束"><a href="#2-非空约束" class="headerlink" title="2. 非空约束"></a>2. 非空约束</h2><h3 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2. 1 作用"></a>2. 1 作用</h3><h4 id="限定某个字段-某列的值不允许为空"><a href="#限定某个字段-某列的值不允许为空" class="headerlink" title="限定某个字段&#x2F;某列的值不允许为空"></a>限定某个字段&#x2F;某列的值不允许为空</h4><h3 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2. 2 关键字"></a>2. 2 关键字</h3><h4 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h4><h3 id="2-3-特点"><a href="#2-3-特点" class="headerlink" title="2. 3 特点"></a>2. 3 特点</h3><h4 id="默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型"><a href="#默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型" class="headerlink" title="默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型"></a>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型</h4><h4 id="非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空"><a href="#非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空" class="headerlink" title="非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空"></a>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</h4><h4 id="一个表可以有很多列都分别限定了非空"><a href="#一个表可以有很多列都分别限定了非空" class="headerlink" title="一个表可以有很多列都分别限定了非空"></a>一个表可以有很多列都分别限定了非空</h4><h4 id="空字符串’’不等于NULL，-0-也不等于NULL"><a href="#空字符串’’不等于NULL，-0-也不等于NULL" class="headerlink" title="空字符串’’不等于NULL， 0 也不等于NULL"></a>空字符串’’不等于NULL， 0 也不等于NULL</h4><h3 id="2-4-添加非空约束"><a href="#2-4-添加非空约束" class="headerlink" title="2. 4 添加非空约束"></a>2. 4 添加非空约束</h3><h4 id="（-1-）建表时"><a href="#（-1-）建表时" class="headerlink" title="（ 1 ）建表时"></a>（ 1 ）建表时</h4><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#information_schema数据库名（系统库）</span><br><span class="line">#table_constraints表名称（专门存储各个表的约束）</span><br><span class="line">SELECT * FROM information_schema.table_constraints</span><br><span class="line">WHERE table_name = &#x27;表名称&#x27;;</span><br></pre></td></tr></table></figure><h5 id="CREATE-TABLE-表名称"><a href="#CREATE-TABLE-表名称" class="headerlink" title="CREATE TABLE 表名称("></a>CREATE TABLE 表名称(</h5><h5 id="字段名-数据类型"><a href="#字段名-数据类型" class="headerlink" title="字段名 数据类型,"></a>字段名 数据类型,</h5><h5 id="字段名-数据类型-NOT-NULL"><a href="#字段名-数据类型-NOT-NULL" class="headerlink" title="字段名 数据类型 NOT NULL,"></a>字段名 数据类型 NOT NULL,</h5><h5 id="字段名-数据类型-NOT-NULL-1"><a href="#字段名-数据类型-NOT-NULL-1" class="headerlink" title="字段名 数据类型 NOT NULL"></a>字段名 数据类型 NOT NULL</h5><h5 id=""><a href="#" class="headerlink" title=");"></a>);</h5><h4 id="（-2-）建表后"><a href="#（-2-）建表后" class="headerlink" title="（ 2 ）建表后"></a>（ 2 ）建表后</h4><h4 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h4><h3 id="2-5-删除非空约束"><a href="#2-5-删除非空约束" class="headerlink" title="2. 5 删除非空约束"></a>2. 5 删除非空约束</h3><h4 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h4><h2 id="3-唯一性约束"><a href="#3-唯一性约束" class="headerlink" title="3. 唯一性约束"></a>3. 唯一性约束</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp(</span><br><span class="line">id INT( 10 ) NOT NULL,</span><br><span class="line">NAME VARCHAR( 20 ) NOT NULL,</span><br><span class="line">sex CHAR NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">sid int,</span><br><span class="line">sname varchar( 20 ) not null,</span><br><span class="line">tel char( 11 ) ,</span><br><span class="line">cardid char( 18 ) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 1 ,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;110222198912032545&#x27;); #成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 2 ,&#x27;李四&#x27;,&#x27;13710011002&#x27;,null);#身份证号为空</span><br><span class="line">ERROR 1048 ( 23000 ): Column &#x27;cardid&#x27; cannot be null</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 2 ,&#x27;李四&#x27;,null,&#x27;110222198912032546&#x27;);#成功，tel允许为空</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 3 ,null,null,&#x27;110222198912032547&#x27;);#失败</span><br><span class="line">ERROR 1048 ( 23000 ): Column &#x27;sname&#x27; cannot be null</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 not null;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">MODIFY sex VARCHAR( 30 ) NOT NULL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table student modify sname varchar( 20 ) not null;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 NULL;#去掉not null，相当于修改某个非注解字段，该字段允</span><br><span class="line">许为空</span><br></pre></td></tr></table></figure><h5 id="或"><a href="#或" class="headerlink" title="或"></a>或</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型;#去掉not null，相当于修改某个非注解字段，该字段允许为空</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">MODIFY sex VARCHAR( 30 ) NULL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">MODIFY NAME VARCHAR( 15 ) DEFAULT &#x27;abc&#x27; NULL;</span><br></pre></td></tr></table></figure><h3 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3. 1 作用"></a>3. 1 作用</h3><h4 id="用来限制某个字段-某列的值不能重复。"><a href="#用来限制某个字段-某列的值不能重复。" class="headerlink" title="用来限制某个字段&#x2F;某列的值不能重复。"></a>用来限制某个字段&#x2F;某列的值不能重复。</h4><h3 id="3-2-关键字"><a href="#3-2-关键字" class="headerlink" title="3. 2 关键字"></a>3. 2 关键字</h3><h4 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h4><h3 id="3-3-特点"><a href="#3-3-特点" class="headerlink" title="3. 3 特点"></a>3. 3 特点</h3><h4 id="同一个表可以有多个唯一约束。"><a href="#同一个表可以有多个唯一约束。" class="headerlink" title="同一个表可以有多个唯一约束。"></a>同一个表可以有多个唯一约束。</h4><h4 id="唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。"><a href="#唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。" class="headerlink" title="唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。"></a>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</h4><h4 id="唯一性约束允许列值为空。"><a href="#唯一性约束允许列值为空。" class="headerlink" title="唯一性约束允许列值为空。"></a>唯一性约束允许列值为空。</h4><h4 id="在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。"><a href="#在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。" class="headerlink" title="在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。"></a>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</h4><h4 id="MySQL会给唯一约束的列上默认创建一个唯一索引。"><a href="#MySQL会给唯一约束的列上默认创建一个唯一索引。" class="headerlink" title="MySQL会给唯一约束的列上默认创建一个唯一索引。"></a>MySQL会给唯一约束的列上默认创建一个唯一索引。</h4><h3 id="3-4-添加唯一约束"><a href="#3-4-添加唯一约束" class="headerlink" title="3. 4 添加唯一约束"></a>3. 4 添加唯一约束</h3><h4 id="（-1-）建表时-1"><a href="#（-1-）建表时-1" class="headerlink" title="（ 1 ）建表时"></a>（ 1 ）建表时</h4><h4 id="举例：-3"><a href="#举例：-3" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型 unique,</span><br><span class="line">字段名 数据类型 unique key,</span><br><span class="line">字段名 数据类型</span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">[constraint 约束名] unique key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="表示用户名和密码组合不能重复"><a href="#表示用户名和密码组合不能重复" class="headerlink" title="表示用户名和密码组合不能重复"></a>表示用户名和密码组合不能重复</h4><h4 id="（-2-）建表后指定唯一键约束"><a href="#（-2-）建表后指定唯一键约束" class="headerlink" title="（ 2 ）建表后指定唯一键约束"></a>（ 2 ）建表后指定唯一键约束</h4><h4 id="举例：-4"><a href="#举例：-4" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">sid int,</span><br><span class="line">sname varchar( 20 ),</span><br><span class="line">tel char( 11 ) unique,</span><br><span class="line">cardid char( 18 ) unique key</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_course(</span><br><span class="line">cid INT UNIQUE,</span><br><span class="line">cname VARCHAR( 100 ) UNIQUE,</span><br><span class="line">description VARCHAR( 200 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="CREATE-TABLE-USER"><a href="#CREATE-TABLE-USER" class="headerlink" title="CREATE TABLE USER("></a>CREATE TABLE USER(</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id INT NOT NULL,</span><br><span class="line">NAME VARCHAR( 25 ),</span><br><span class="line">PASSWORD VARCHAR( 16 ),</span><br><span class="line">-- 使用表级约束语法</span><br><span class="line">CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 1 ,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;101223199012015623&#x27;);</span><br><span class="line">insert into student values( 2 ,&#x27;李四&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015624&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br><span class="line">+-----+-------+-------------+--------------------+</span><br><span class="line">| sid | sname | tel | cardid |</span><br><span class="line">+-----+-------+-------------+--------------------+</span><br><span class="line">| 1 | 张三 | 13710011002 | 101223199012015623 |</span><br><span class="line">| 2 | 李四 | 13710011003 | 101223199012015624 |</span><br><span class="line">+-----+-------+-------------+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 3 ,&#x27;王五&#x27;,&#x27;13710011004&#x27;,&#x27;101223199012015624&#x27;); #身份证号重复</span><br><span class="line">ERROR 1062 ( 23000 ): Duplicate entry &#x27;101223199012015624&#x27; for key &#x27;cardid&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 3 ,&#x27;王五&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015625&#x27;);</span><br><span class="line">ERROR 1062 ( 23000 ): Duplicate entry &#x27;13710011003&#x27; for key &#x27;tel&#x27;</span><br></pre></td></tr></table></figure><h5 id="字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯"><a href="#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯" class="headerlink" title="#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯"></a>#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯</h5><h5 id="一的"><a href="#一的" class="headerlink" title="一的"></a>一的</h5><h5 id="方式-1-："><a href="#方式-1-：" class="headerlink" title="#方式 1 ："></a>#方式 1 ：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 add unique key(字段列表);</span><br></pre></td></tr></table></figure><h5 id="方式-2-："><a href="#方式-2-：" class="headerlink" title="#方式 2 ："></a>#方式 2 ：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 字段类型 unique;</span><br></pre></td></tr></table></figure><h5 id="ALTER-TABLE-USER"><a href="#ALTER-TABLE-USER" class="headerlink" title="ALTER TABLE USER"></a>ALTER TABLE USER</h5><h5 id="ADD-UNIQUE-NAME-PASSWORD"><a href="#ADD-UNIQUE-NAME-PASSWORD" class="headerlink" title="ADD UNIQUE(NAME,PASSWORD);"></a>ADD UNIQUE(NAME,PASSWORD);</h5><h4 id="举例：-5"><a href="#举例：-5" class="headerlink" title="举例："></a>举例：</h4><h3 id="3-5-关于复合唯一约束"><a href="#3-5-关于复合唯一约束" class="headerlink" title="3. 5 关于复合唯一约束"></a>3. 5 关于复合唯一约束</h3><h5 id="ALTER-TABLE-USER-1"><a href="#ALTER-TABLE-USER-1" class="headerlink" title="ALTER TABLE USER"></a>ALTER TABLE USER</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD);</span><br></pre></td></tr></table></figure><h5 id="ALTER-TABLE-USER-2"><a href="#ALTER-TABLE-USER-2" class="headerlink" title="ALTER TABLE USER"></a>ALTER TABLE USER</h5><h5 id="MODIFY-NAME-VARCHAR-20-UNIQUE"><a href="#MODIFY-NAME-VARCHAR-20-UNIQUE" class="headerlink" title="MODIFY NAME VARCHAR( 20 ) UNIQUE;"></a>MODIFY NAME VARCHAR( 20 ) UNIQUE;</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">sid int primary key,</span><br><span class="line">sname varchar( 20 ),</span><br><span class="line">tel char( 11 ) ,</span><br><span class="line">cardid char( 18 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table student add unique key(tel);</span><br><span class="line">alter table student add unique key(cardid);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多</span><br><span class="line">个字段的组合是唯一的</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="学生表"><a href="#学生表" class="headerlink" title="#学生表"></a>#学生表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">sid int, #学号</span><br><span class="line">sname varchar( 20 ), #姓名</span><br><span class="line">tel char( 11 ) unique key,  #电话</span><br><span class="line">cardid char( 18 ) unique key #身份证号</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="课程表"><a href="#课程表" class="headerlink" title="#课程表"></a>#课程表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table course(</span><br><span class="line">cid int,  #课程编号</span><br><span class="line">cname varchar( 20 ) #课程名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="选课表"><a href="#选课表" class="headerlink" title="#选课表"></a>#选课表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table student_course(</span><br><span class="line">id int,</span><br><span class="line">sid int,</span><br><span class="line">cid int,</span><br><span class="line">score int,</span><br><span class="line">unique key(sid,cid)  #复合唯一</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 1 ,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;101223199012015623&#x27;);#成功</span><br><span class="line">insert into student values( 2 ,&#x27;李四&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015624&#x27;);#成功</span><br><span class="line">insert into course values( 1001 ,&#x27;Java&#x27;),( 1002 ,&#x27;MySQL&#x27;);#成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br></pre></td></tr></table></figure><h3 id="3-5-删除唯一约束"><a href="#3-5-删除唯一约束" class="headerlink" title="3. 5 删除唯一约束"></a>3. 5 删除唯一约束</h3><h4 id="添加唯一性约束的列上也会自动创建唯一索引。"><a href="#添加唯一性约束的列上也会自动创建唯一索引。" class="headerlink" title="添加唯一性约束的列上也会自动创建唯一索引。"></a>添加唯一性约束的列上也会自动创建唯一索引。</h4><h4 id="删除唯一约束只能通过删除唯一索引的方式删除。"><a href="#删除唯一约束只能通过删除唯一索引的方式删除。" class="headerlink" title="删除唯一约束只能通过删除唯一索引的方式删除。"></a>删除唯一约束只能通过删除唯一索引的方式删除。</h4><h4 id="删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。"><a href="#删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。" class="headerlink" title="删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。"></a>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</h4><h4 id="如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和"><a href="#如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和" class="headerlink" title="如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()"></a>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()</h4><h4 id="中排在第一个的列名相同。也可以自定义唯一性约束名。"><a href="#中排在第一个的列名相同。也可以自定义唯一性约束名。" class="headerlink" title="中排在第一个的列名相同。也可以自定义唯一性约束名。"></a>中排在第一个的列名相同。也可以自定义唯一性约束名。</h4><h4 id="注意：可以通过-show-index-from-表名称-查看表的索引"><a href="#注意：可以通过-show-index-from-表名称-查看表的索引" class="headerlink" title="注意：可以通过 show index from 表名称;查看表的索引"></a>注意：可以通过 show index from 表名称;查看表的索引</h4><h5 id="—–-——-————-——————–"><a href="#—–-——-————-——————–" class="headerlink" title="+—–+——-+————-+——————–+"></a>+—–+——-+————-+——————–+</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| sid | sname | tel | cardid |</span><br><span class="line">+-----+-------+-------------+--------------------+</span><br><span class="line">| 1 | 张三 | 13710011002 | 101223199012015623 |</span><br><span class="line">| 2 | 李四 | 13710011003 | 101223199012015624 |</span><br><span class="line">+-----+-------+-------------+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from course;</span><br><span class="line">+------+-------+</span><br><span class="line">| cid | cname |</span><br><span class="line">+------+-------+</span><br><span class="line">| 1001 | Java |</span><br><span class="line">| 1002 | MySQL |</span><br><span class="line">+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into student_course values</span><br><span class="line">( 1 , 1 , 1001 , 89 ),</span><br><span class="line">( 2 , 1 , 1002 , 90 ),</span><br><span class="line">( 3 , 2 , 1001 , 88 ),</span><br><span class="line">( 4 , 2 , 1002 , 56 );#成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student_course;</span><br><span class="line">+----+------+------+-------+</span><br><span class="line">| id | sid | cid | score |</span><br><span class="line">+----+------+------+-------+</span><br><span class="line">| 1 | 1 | 1001 | 89 |</span><br><span class="line">| 2 | 1 | 1002 | 90 |</span><br><span class="line">| 3 | 2 | 1001 | 88 |</span><br><span class="line">| 4 | 2 | 1002 | 56 |</span><br><span class="line">+----+------+------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into student_course values ( 5 , 1 , 1001 , 88 );#失败</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#ERROR 1062 (23000): Duplicate entry &#x27;1-1001&#x27; for key &#x27;sid&#x27; 违反sid-cid的复合唯一</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名&#x27;; #查看都有哪</span><br><span class="line">些约束</span><br></pre></td></tr></table></figure><h5 id="ALTER-TABLE-USER-3"><a href="#ALTER-TABLE-USER-3" class="headerlink" title="ALTER TABLE USER"></a>ALTER TABLE USER</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX uk_name_pwd;</span><br></pre></td></tr></table></figure><h2 id="4-PRIMARY-KEY-约束"><a href="#4-PRIMARY-KEY-约束" class="headerlink" title="4. PRIMARY KEY 约束"></a>4. PRIMARY KEY 约束</h2><h3 id="4-1-作用"><a href="#4-1-作用" class="headerlink" title="4. 1 作用"></a>4. 1 作用</h3><h4 id="用来唯一标识表中的一行记录。"><a href="#用来唯一标识表中的一行记录。" class="headerlink" title="用来唯一标识表中的一行记录。"></a>用来唯一标识表中的一行记录。</h4><h3 id="4-2-关键字"><a href="#4-2-关键字" class="headerlink" title="4. 2 关键字"></a>4. 2 关键字</h3><h4 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h4><h3 id="4-3-特点"><a href="#4-3-特点" class="headerlink" title="4. 3 特点"></a>4. 3 特点</h3><h4 id="主键约束相当于-唯一约束-非空约束的组合-，主键约束列不允许重复，也不允许出现空值。"><a href="#主键约束相当于-唯一约束-非空约束的组合-，主键约束列不允许重复，也不允许出现空值。" class="headerlink" title="主键约束相当于 唯一约束+非空约束的组合 ，主键约束列不允许重复，也不允许出现空值。"></a>主键约束相当于 唯一约束+非空约束的组合 ，主键约束列不允许重复，也不允许出现空值。</h4><h4 id="一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。"><a href="#一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。" class="headerlink" title="一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。"></a>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</h4><h4 id="主键约束对应着表中的一列或者多列（复合主键）"><a href="#主键约束对应着表中的一列或者多列（复合主键）" class="headerlink" title="主键约束对应着表中的一列或者多列（复合主键）"></a>主键约束对应着表中的一列或者多列（复合主键）</h4><h4 id="如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。"><a href="#如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。" class="headerlink" title="如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。"></a>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</h4><h4 id="MySQL的主键名总是PRIMARY-，就算自己命名了主键约束名也没用。"><a href="#MySQL的主键名总是PRIMARY-，就算自己命名了主键约束名也没用。" class="headerlink" title="MySQL的主键名总是PRIMARY ，就算自己命名了主键约束名也没用。"></a>MySQL的主键名总是PRIMARY ，就算自己命名了主键约束名也没用。</h4><h4 id="当创建主键约束时，系统默认会在所在的列或列组合上建立对应的-主键索引-（能够根据主键查询"><a href="#当创建主键约束时，系统默认会在所在的列或列组合上建立对应的-主键索引-（能够根据主键查询" class="headerlink" title="当创建主键约束时，系统默认会在所在的列或列组合上建立对应的 主键索引 （能够根据主键查询"></a>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的 主键索引 （能够根据主键查询</h4><h4 id="的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。"><a href="#的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。" class="headerlink" title="的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。"></a>的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</h4><h4 id="需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的"><a href="#需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的" class="headerlink" title="需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的"></a>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的</h4><h4 id="值，就有可能会破坏数据的完整性。"><a href="#值，就有可能会破坏数据的完整性。" class="headerlink" title="值，就有可能会破坏数据的完整性。"></a>值，就有可能会破坏数据的完整性。</h4><h3 id="4-4-添加主键约束"><a href="#4-4-添加主键约束" class="headerlink" title="4. 4 添加主键约束"></a>4. 4 添加主键约束</h3><h4 id="（-1-）建表时指定主键约束"><a href="#（-1-）建表时指定主键约束" class="headerlink" title="（ 1 ）建表时指定主键约束"></a>（ 1 ）建表时指定主键约束</h4><h4 id="举例：-6"><a href="#举例：-6" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型 primary key, #列级模式</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型</span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">[constraint 约束名] primary key(字段名) #表级模式</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table temp(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar( 20 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc temp;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| name | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into temp values( 1 ,&#x27;张三&#x27;);#成功</span><br><span class="line">insert into temp values( 2 ,&#x27;李四&#x27;);#成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from temp;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">| 1 | 张三 |</span><br><span class="line">| 2 | 李四 |</span><br><span class="line">+----+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into temp values( 1 ,&#x27;张三&#x27;);#失败</span><br><span class="line">ERROR 1062 ( 23000 ): Duplicate（重复） entry（键入，输入） &#x27;1&#x27; for key &#x27;PRIMARY&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into temp values( 1 ,&#x27;王五&#x27;);#失败</span><br><span class="line">ERROR 1062 ( 23000 ): Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into temp values( 3 ,&#x27;张三&#x27;);#成功</span><br></pre></td></tr></table></figure><h4 id="再举例："><a href="#再举例：" class="headerlink" title="再举例："></a>再举例：</h4><h4 id="列级约束"><a href="#列级约束" class="headerlink" title="列级约束"></a>列级约束</h4><h4 id="表级约束"><a href="#表级约束" class="headerlink" title="表级约束"></a>表级约束</h4><h4 id="（-2-）建表后增加主键约束"><a href="#（-2-）建表后增加主键约束" class="headerlink" title="（ 2 ）建表后增加主键约束"></a>（ 2 ）建表后增加主键约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from temp;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">| 1 | 张三 |</span><br><span class="line">| 2 | 李四 |</span><br><span class="line">| 3 | 张三 |</span><br><span class="line">+----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into temp values( 4 ,null);#成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into temp values(null,&#x27;李琦&#x27;);#失败</span><br><span class="line">ERROR 1048 ( 23000 ): Column &#x27;id&#x27; cannot be null</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from temp;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">| 1 | 张三 |</span><br><span class="line">| 2 | 李四 |</span><br><span class="line">| 3 | 张三 |</span><br><span class="line">| 4 | NULL |</span><br><span class="line">+----+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="演示一个表建立两个主键约束"><a href="#演示一个表建立两个主键约束" class="headerlink" title="#演示一个表建立两个主键约束"></a>#演示一个表建立两个主键约束</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table temp(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar( 20 ) primary key</span><br><span class="line">);</span><br><span class="line">ERROR 1068 ( 42000 ): Multiple（多重的） primary key defined（定义）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp4(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT ,</span><br><span class="line">NAME VARCHAR( 20 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp5(</span><br><span class="line">id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR( 20 ),</span><br><span class="line">pwd VARCHAR( 15 ),</span><br><span class="line">CONSTRAINT emp5_id_pk PRIMARY KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="ALTER-TABLE-表名称-ADD-PRIMARY-KEY-字段列表-字段列表可以是一个字段，也可以是多个字段，如果是多"><a href="#ALTER-TABLE-表名称-ADD-PRIMARY-KEY-字段列表-字段列表可以是一个字段，也可以是多个字段，如果是多" class="headerlink" title="ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多"></a>ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多</h5><h5 id="个字段的话，是复合主键"><a href="#个字段的话，是复合主键" class="headerlink" title="个字段的话，是复合主键"></a>个字段的话，是复合主键</h5><h3 id="4-5-关于复合主键"><a href="#4-5-关于复合主键" class="headerlink" title="4. 5 关于复合主键"></a>4. 5 关于复合主键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student ADD PRIMARY KEY (sid);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp5 ADD PRIMARY KEY(NAME,pwd);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">primary key(字段名1,字段名2)  #表示字段 1 和字段 2 的组合是唯一的，也可以有更多个字段</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="学生表-1"><a href="#学生表-1" class="headerlink" title="#学生表"></a>#学生表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">sid int primary key,  #学号</span><br><span class="line">sname varchar( 20 ) #学生姓名</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="课程表-1"><a href="#课程表-1" class="headerlink" title="#课程表"></a>#课程表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table course(</span><br><span class="line">cid int primary key,  #课程编号</span><br><span class="line">cname varchar( 20 ) #课程名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="选课表-1"><a href="#选课表-1" class="headerlink" title="#选课表"></a>#选课表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table student_course(</span><br><span class="line">sid int,</span><br><span class="line">cid int,</span><br><span class="line">score int,</span><br><span class="line">primary key(sid,cid)  #复合主键</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student values( 1 ,&#x27;张三&#x27;),( 2 ,&#x27;李四&#x27;);</span><br><span class="line">insert into course values( 1001 ,&#x27;Java&#x27;),( 1002 ,&#x27;MySQL&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br><span class="line">+-----+-------+</span><br><span class="line">| sid | sname |</span><br><span class="line">+-----+-------+</span><br><span class="line">| 1 | 张三 |</span><br><span class="line">| 2 | 李四 |</span><br><span class="line">+-----+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from course;</span><br><span class="line">+------+-------+</span><br><span class="line">| cid | cname |</span><br><span class="line">+------+-------+</span><br><span class="line">| 1001 | Java |</span><br><span class="line">| 1002 | MySQL |</span><br><span class="line">+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into student_course values( 1 , 1001 , 89 ),( 1 , 1002 , 90 ),( 2 , 1001 , 88 ),( 2 , 1002 , 56 );</span><br></pre></td></tr></table></figure><h4 id="再举例"><a href="#再举例" class="headerlink" title="再举例"></a>再举例</h4><h3 id="4-6-删除主键约束"><a href="#4-6-删除主键约束" class="headerlink" title="4. 6 删除主键约束"></a>4. 6 删除主键约束</h3><h4 id="举例：-7"><a href="#举例：-7" class="headerlink" title="举例："></a>举例：</h4><h4 id="说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存"><a href="#说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存" class="headerlink" title="说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存"></a>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存</h4><h4 id="在。"><a href="#在。" class="headerlink" title="在。"></a>在。</h4><h2 id="5-自增列：AUTO-INCREMENT"><a href="#5-自增列：AUTO-INCREMENT" class="headerlink" title="5. 自增列：AUTO_INCREMENT"></a>5. 自增列：AUTO_INCREMENT</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student_course;</span><br><span class="line">+-----+------+-------+</span><br><span class="line">| sid | cid | score |</span><br><span class="line">+-----+------+-------+</span><br><span class="line">| 1 | 1001 | 89 |</span><br><span class="line">| 1 | 1002 | 90 |</span><br><span class="line">| 2 | 1001 | 88 |</span><br><span class="line">| 2 | 1002 | 56 |</span><br><span class="line">+-----+------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student_course values( 1 , 1001 , 100 );</span><br><span class="line">ERROR 1062 ( 23000 ): Duplicate entry &#x27;1-1001&#x27; for key &#x27;PRIMARY&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc student_course;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| sid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| cid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| score | int( 11 ) | YES | | NULL | |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp6(</span><br><span class="line">id INT NOT NULL,</span><br><span class="line">NAME VARCHAR( 20 ),</span><br><span class="line">pwd VARCHAR( 15 ),</span><br><span class="line">CONSTRAINT emp7_pk PRIMARY KEY(NAME,pwd)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 drop primary key;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp5 DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5. 1 作用"></a>5. 1 作用</h3><h4 id="某个字段的值自增"><a href="#某个字段的值自增" class="headerlink" title="某个字段的值自增"></a>某个字段的值自增</h4><h3 id="5-2-关键字"><a href="#5-2-关键字" class="headerlink" title="5. 2 关键字"></a>5. 2 关键字</h3><h4 id="auto-increment"><a href="#auto-increment" class="headerlink" title="auto_increment"></a>auto_increment</h4><h3 id="5-3-特点和要求"><a href="#5-3-特点和要求" class="headerlink" title="5. 3 特点和要求"></a>5. 3 特点和要求</h3><h4 id="（-1-）一个表最多只能有一个自增长列"><a href="#（-1-）一个表最多只能有一个自增长列" class="headerlink" title="（ 1 ）一个表最多只能有一个自增长列"></a>（ 1 ）一个表最多只能有一个自增长列</h4><h4 id="（-2-）当需要产生唯一标识符或顺序值时，可设置自增长"><a href="#（-2-）当需要产生唯一标识符或顺序值时，可设置自增长" class="headerlink" title="（ 2 ）当需要产生唯一标识符或顺序值时，可设置自增长"></a>（ 2 ）当需要产生唯一标识符或顺序值时，可设置自增长</h4><h4 id="（-3-）自增长列约束的列必须是键列（主键列，唯一键列）"><a href="#（-3-）自增长列约束的列必须是键列（主键列，唯一键列）" class="headerlink" title="（ 3 ）自增长列约束的列必须是键列（主键列，唯一键列）"></a>（ 3 ）自增长列约束的列必须是键列（主键列，唯一键列）</h4><h4 id="（-4-）自增约束的列的数据类型必须是整数类型"><a href="#（-4-）自增约束的列的数据类型必须是整数类型" class="headerlink" title="（ 4 ）自增约束的列的数据类型必须是整数类型"></a>（ 4 ）自增约束的列的数据类型必须是整数类型</h4><h4 id="（-5-）如果自增列指定了-0-和-null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接"><a href="#（-5-）如果自增列指定了-0-和-null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接" class="headerlink" title="（ 5 ）如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接"></a>（ 5 ）如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接</h4><h4 id="赋值为具体值。"><a href="#赋值为具体值。" class="headerlink" title="赋值为具体值。"></a>赋值为具体值。</h4><h4 id="错误演示："><a href="#错误演示：" class="headerlink" title="错误演示："></a>错误演示：</h4><h3 id="5-4-如何指定自增约束"><a href="#5-4-如何指定自增约束" class="headerlink" title="5. 4 如何指定自增约束"></a>5. 4 如何指定自增约束</h3><h4 id="（-1-）建表时-2"><a href="#（-1-）建表时-2" class="headerlink" title="（ 1 ）建表时"></a>（ 1 ）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">eid int auto_increment,</span><br><span class="line">ename varchar( 20 )</span><br><span class="line">);</span><br><span class="line"># ERROR 1075 (42000): Incorrect table definition; there can be only one auto column</span><br><span class="line">and it must be defined as a key</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">eid int primary key,</span><br><span class="line">ename varchar( 20 ) unique key auto_increment</span><br><span class="line">);</span><br><span class="line"># ERROR 1063 (42000): Incorrect column specifier for column &#x27;ename&#x27; 因为ename不是整数类</span><br><span class="line">型</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型 primary key auto_increment,</span><br><span class="line">字段名 数据类型 unique key not null,</span><br><span class="line">字段名 数据类型 unique key,</span><br><span class="line">字段名 数据类型 not null default 默认值,</span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型 default 默认值 ,</span><br><span class="line">字段名 数据类型 unique key auto_increment,</span><br><span class="line">字段名 数据类型 not null default 默认值,,</span><br><span class="line">primary key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">eid int primary key auto_increment,</span><br><span class="line">ename varchar( 20 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="（-2-）建表后-1"><a href="#（-2-）建表后-1" class="headerlink" title="（ 2 ）建表后"></a>（ 2 ）建表后</h4><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><h3 id="5-5-如何删除自增约束"><a href="#5-5-如何删除自增约束" class="headerlink" title="5. 5 如何删除自增约束"></a>5. 5 如何删除自增约束</h3><h3 id="5-6-MySQL-8-0-新特性—自增变量的持久化"><a href="#5-6-MySQL-8-0-新特性—自增变量的持久化" class="headerlink" title="5. 6 MySQL 8. 0 新特性—自增变量的持久化"></a>5. 6 MySQL 8. 0 新特性—自增变量的持久化</h3><h4 id="在MySQL-8-0之前，自增主键AUTO-INCREMENT的值如果大于max-primary-key-1，在MySQL重启后，会重"><a href="#在MySQL-8-0之前，自增主键AUTO-INCREMENT的值如果大于max-primary-key-1，在MySQL重启后，会重" class="headerlink" title="在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重"></a>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重</h4><h4 id="置AUTO-INCREMENT-max-primary-key-1，这种现象在某些情况下会导致业务主键冲突或者其他难以发"><a href="#置AUTO-INCREMENT-max-primary-key-1，这种现象在某些情况下会导致业务主键冲突或者其他难以发" class="headerlink" title="置AUTO_INCREMENT&#x3D;max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发"></a>置AUTO_INCREMENT&#x3D;max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发</h4><h4 id="现的问题。-下面通过案例来对比不同的版本中自增变量是否持久化。-在MySQL-5-7版本中，测试步骤如"><a href="#现的问题。-下面通过案例来对比不同的版本中自增变量是否持久化。-在MySQL-5-7版本中，测试步骤如" class="headerlink" title="现的问题。 下面通过案例来对比不同的版本中自增变量是否持久化。 在MySQL 5.7版本中，测试步骤如"></a>现的问题。 下面通过案例来对比不同的版本中自增变量是否持久化。 在MySQL 5.7版本中，测试步骤如</h4><h4 id="下：-创建的数据表中包含自增主键的id字段，语句如下："><a href="#下：-创建的数据表中包含自增主键的id字段，语句如下：" class="headerlink" title="下： 创建的数据表中包含自增主键的id字段，语句如下："></a>下： 创建的数据表中包含自增主键的id字段，语句如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | auto_increment |</span><br><span class="line">| ename | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 auto_increment;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">eid int primary key ,</span><br><span class="line">ename varchar( 20 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employee modify eid int auto_increment;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | auto_increment |</span><br><span class="line">| ename | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employee modify eid int;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| ename | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="插入-4-个空值，执行如下："><a href="#插入-4-个空值，执行如下：" class="headerlink" title="插入 4 个空值，执行如下："></a>插入 4 个空值，执行如下：</h4><h4 id="查询数据表test1中的数据，结果如下："><a href="#查询数据表test1中的数据，结果如下：" class="headerlink" title="查询数据表test1中的数据，结果如下："></a>查询数据表test1中的数据，结果如下：</h4><h4 id="删除id为-4-的记录，语句如下："><a href="#删除id为-4-的记录，语句如下：" class="headerlink" title="删除id为 4 的记录，语句如下："></a>删除id为 4 的记录，语句如下：</h4><h4 id="再次插入一个空值，语句如下："><a href="#再次插入一个空值，语句如下：" class="headerlink" title="再次插入一个空值，语句如下："></a>再次插入一个空值，语句如下：</h4><h4 id="查询此时数据表test1中的数据，结果如下："><a href="#查询此时数据表test1中的数据，结果如下：" class="headerlink" title="查询此时数据表test1中的数据，结果如下："></a>查询此时数据表test1中的数据，结果如下：</h4><h4 id="从结果可以看出，虽然删除了id为-4-的记录，但是再次插入空值时，并没有重用被删除的-4-，而是分配了"><a href="#从结果可以看出，虽然删除了id为-4-的记录，但是再次插入空值时，并没有重用被删除的-4-，而是分配了" class="headerlink" title="从结果可以看出，虽然删除了id为 4 的记录，但是再次插入空值时，并没有重用被删除的 4 ，而是分配了"></a>从结果可以看出，虽然删除了id为 4 的记录，但是再次插入空值时，并没有重用被删除的 4 ，而是分配了</h4><h4 id="5-。-删除id为-5-的记录，结果如下："><a href="#5-。-删除id为-5-的记录，结果如下：" class="headerlink" title="5 。 删除id为 5 的记录，结果如下："></a>5 。 删除id为 5 的记录，结果如下：</h4><h4 id="重启数据库-，重新插入一个空值。"><a href="#重启数据库-，重新插入一个空值。" class="headerlink" title="重启数据库 ，重新插入一个空值。"></a>重启数据库 ，重新插入一个空值。</h4><h4 id="再次查询数据表test1中的数据，结果如下："><a href="#再次查询数据表test1中的数据，结果如下：" class="headerlink" title="再次查询数据表test1中的数据，结果如下："></a>再次查询数据表test1中的数据，结果如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test1(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO test</span><br><span class="line">VALUES( 0 ),( 0 ),( 0 ),( 0 );</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test1;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">| 1 |</span><br><span class="line">| 2 |</span><br><span class="line">| 3 |</span><br><span class="line">| 4 |</span><br><span class="line">+----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM test1 WHERE id = 4 ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO test1 VALUES( 0 );</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test1;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">| 1 |</span><br><span class="line">| 2 |</span><br><span class="line">| 3 |</span><br><span class="line">| 5 |</span><br><span class="line">+----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM test1 where id= 5 ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO test1 values( 0 );</span><br></pre></td></tr></table></figure><h4 id="从结果可以看出，新插入的-0-值分配的是-4-，按照重启前的操作逻辑，此处应该分配-6-。出现上述结果的主"><a href="#从结果可以看出，新插入的-0-值分配的是-4-，按照重启前的操作逻辑，此处应该分配-6-。出现上述结果的主" class="headerlink" title="从结果可以看出，新插入的 0 值分配的是 4 ，按照重启前的操作逻辑，此处应该分配 6 。出现上述结果的主"></a>从结果可以看出，新插入的 0 值分配的是 4 ，按照重启前的操作逻辑，此处应该分配 6 。出现上述结果的主</h4><h4 id="要原因是自增主键没有持久化。-在MySQL-5-7-系统中，对于自增主键的分配规则，是由InnoDB数据字典"><a href="#要原因是自增主键没有持久化。-在MySQL-5-7-系统中，对于自增主键的分配规则，是由InnoDB数据字典" class="headerlink" title="要原因是自增主键没有持久化。 在MySQL 5. 7 系统中，对于自增主键的分配规则，是由InnoDB数据字典"></a>要原因是自增主键没有持久化。 在MySQL 5. 7 系统中，对于自增主键的分配规则，是由InnoDB数据字典</h4><h4 id="内部一个计数器来决定的，而该计数器只在内存中维护，并不会持久化到磁盘中。当数据库重启时，该"><a href="#内部一个计数器来决定的，而该计数器只在内存中维护，并不会持久化到磁盘中。当数据库重启时，该" class="headerlink" title="内部一个计数器来决定的，而该计数器只在内存中维护，并不会持久化到磁盘中。当数据库重启时，该"></a>内部一个计数器来决定的，而该计数器只在内存中维护，并不会持久化到磁盘中。当数据库重启时，该</h4><h4 id="计数器会被初始化。"><a href="#计数器会被初始化。" class="headerlink" title="计数器会被初始化。"></a>计数器会被初始化。</h4><h4 id="在MySQL-8-0-版本中，上述测试步骤最后一步的结果如下："><a href="#在MySQL-8-0-版本中，上述测试步骤最后一步的结果如下：" class="headerlink" title="在MySQL 8. 0 版本中，上述测试步骤最后一步的结果如下："></a>在MySQL 8. 0 版本中，上述测试步骤最后一步的结果如下：</h4><h4 id="从结果可以看出，自增变量已经持久化了。"><a href="#从结果可以看出，自增变量已经持久化了。" class="headerlink" title="从结果可以看出，自增变量已经持久化了。"></a>从结果可以看出，自增变量已经持久化了。</h4><h4 id="MySQL-8-0-将自增主键的计数器持久化到重做日志中。每次计数器发生改变，都会将其写入重做日志"><a href="#MySQL-8-0-将自增主键的计数器持久化到重做日志中。每次计数器发生改变，都会将其写入重做日志" class="headerlink" title="MySQL 8. 0 将自增主键的计数器持久化到重做日志中。每次计数器发生改变，都会将其写入重做日志"></a>MySQL 8. 0 将自增主键的计数器持久化到重做日志中。每次计数器发生改变，都会将其写入重做日志</h4><h4 id="中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。"><a href="#中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。" class="headerlink" title="中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。"></a>中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。</h4><h2 id="6-FOREIGN-KEY-约束"><a href="#6-FOREIGN-KEY-约束" class="headerlink" title="6. FOREIGN KEY 约束"></a>6. FOREIGN KEY 约束</h2><h3 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6. 1 作用"></a>6. 1 作用</h3><h4 id="限定某个表的某个字段的引用完整性。"><a href="#限定某个表的某个字段的引用完整性。" class="headerlink" title="限定某个表的某个字段的引用完整性。"></a>限定某个表的某个字段的引用完整性。</h4><h4 id="比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。"><a href="#比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。" class="headerlink" title="比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。"></a>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test1;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">| 1 |</span><br><span class="line">| 2 |</span><br><span class="line">| 3 |</span><br><span class="line">| 4 |</span><br><span class="line">+----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test1;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">| 1 |</span><br><span class="line">| 2 |</span><br><span class="line">| 3 |</span><br><span class="line">| 6 |</span><br><span class="line">+----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="6-2-关键字"><a href="#6-2-关键字" class="headerlink" title="6. 2 关键字"></a>6. 2 关键字</h3><h4 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h4><h3 id="6-3-主表和从表-父表和子表"><a href="#6-3-主表和从表-父表和子表" class="headerlink" title="6. 3 主表和从表&#x2F;父表和子表"></a>6. 3 主表和从表&#x2F;父表和子表</h3><h4 id="主表（父表）：被引用的表，被参考的表"><a href="#主表（父表）：被引用的表，被参考的表" class="headerlink" title="主表（父表）：被引用的表，被参考的表"></a>主表（父表）：被引用的表，被参考的表</h4><h4 id="从表（子表）：引用别人的表，参考别人的表"><a href="#从表（子表）：引用别人的表，参考别人的表" class="headerlink" title="从表（子表）：引用别人的表，参考别人的表"></a>从表（子表）：引用别人的表，参考别人的表</h4><h4 id="例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。"><a href="#例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。" class="headerlink" title="例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。"></a>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。</h4><h4 id="例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是"><a href="#例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是" class="headerlink" title="例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是"></a>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是</h4><h4 id="主表，选课表是从表。"><a href="#主表，选课表是从表。" class="headerlink" title="主表，选课表是从表。"></a>主表，选课表是从表。</h4><h3 id="6-4-特点"><a href="#6-4-特点" class="headerlink" title="6. 4 特点"></a>6. 4 特点</h3><h4 id="（-1-）从表的外键列，必须引用-参考主表的主键或唯一约束的列"><a href="#（-1-）从表的外键列，必须引用-参考主表的主键或唯一约束的列" class="headerlink" title="（ 1 ）从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列"></a>（ 1 ）从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列</h4><h4 id="为什么？因为被依赖-被参考的值必须是唯一的"><a href="#为什么？因为被依赖-被参考的值必须是唯一的" class="headerlink" title="为什么？因为被依赖&#x2F;被参考的值必须是唯一的"></a>为什么？因为被依赖&#x2F;被参考的值必须是唯一的</h4><h4 id="（-2-）在创建外键约束时，如果不给外键约束命名，-默认名不是列名，而是自动产生一个外键名-（例如"><a href="#（-2-）在创建外键约束时，如果不给外键约束命名，-默认名不是列名，而是自动产生一个外键名-（例如" class="headerlink" title="（ 2 ）在创建外键约束时，如果不给外键约束命名， 默认名不是列名，而是自动产生一个外键名 （例如"></a>（ 2 ）在创建外键约束时，如果不给外键约束命名， 默认名不是列名，而是自动产生一个外键名 （例如</h4><h4 id="student-ibfk-1-），也可以指定外键约束名。"><a href="#student-ibfk-1-），也可以指定外键约束名。" class="headerlink" title="student_ibfk_1;），也可以指定外键约束名。"></a>student_ibfk_1;），也可以指定外键约束名。</h4><h4 id="（-3-）创建-CREATE-表时就指定外键约束的话，先创建主表，再创建从表"><a href="#（-3-）创建-CREATE-表时就指定外键约束的话，先创建主表，再创建从表" class="headerlink" title="（ 3 ）创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表"></a>（ 3 ）创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表</h4><h4 id="（-4-）删表时，先删从表（或先删除外键约束），再删除主表"><a href="#（-4-）删表时，先删从表（或先删除外键约束），再删除主表" class="headerlink" title="（ 4 ）删表时，先删从表（或先删除外键约束），再删除主表"></a>（ 4 ）删表时，先删从表（或先删除外键约束），再删除主表</h4><h4 id="（-5-）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖"><a href="#（-5-）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖" class="headerlink" title="（ 5 ）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖"></a>（ 5 ）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖</h4><h4 id="该记录的数据，然后才可以删除主表的数据"><a href="#该记录的数据，然后才可以删除主表的数据" class="headerlink" title="该记录的数据，然后才可以删除主表的数据"></a>该记录的数据，然后才可以删除主表的数据</h4><h4 id="（-6-）在“从表”中指定外键约束，并且一个表可以建立多个外键约束"><a href="#（-6-）在“从表”中指定外键约束，并且一个表可以建立多个外键约束" class="headerlink" title="（ 6 ）在“从表”中指定外键约束，并且一个表可以建立多个外键约束"></a>（ 6 ）在“从表”中指定外键约束，并且一个表可以建立多个外键约束</h4><h4 id="（-7-）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类"><a href="#（-7-）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类" class="headerlink" title="（ 7 ）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类"></a>（ 7 ）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类</h4><h4 id="型不一样，创建子表时，就会出现错误“ERROR-1005-HY000-Can’t-create"><a href="#型不一样，创建子表时，就会出现错误“ERROR-1005-HY000-Can’t-create" class="headerlink" title="型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create"></a>型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create</h4><h4 id="table’database-tablename’-errno-150-”。"><a href="#table’database-tablename’-errno-150-”。" class="headerlink" title="table’database.tablename’(errno: 150)”。"></a>table’database.tablename’(errno: 150)”。</h4><h4 id="例如：都是表示部门编号，都是int类型。"><a href="#例如：都是表示部门编号，都是int类型。" class="headerlink" title="例如：都是表示部门编号，都是int类型。"></a>例如：都是表示部门编号，都是int类型。</h4><h4 id="（-8-）-当创建外键约束时，系统默认会在所在的列上建立对应的普通索引-。但是索引名是外键的约束"><a href="#（-8-）-当创建外键约束时，系统默认会在所在的列上建立对应的普通索引-。但是索引名是外键的约束" class="headerlink" title="（ 8 ） 当创建外键约束时，系统默认会在所在的列上建立对应的普通索引 。但是索引名是外键的约束"></a>（ 8 ） 当创建外键约束时，系统默认会在所在的列上建立对应的普通索引 。但是索引名是外键的约束</h4><h4 id="名。（根据外键查询效率很高）"><a href="#名。（根据外键查询效率很高）" class="headerlink" title="名。（根据外键查询效率很高）"></a>名。（根据外键查询效率很高）</h4><h4 id="（-9-）删除外键约束后，必须手动删除对应的索引"><a href="#（-9-）删除外键约束后，必须手动删除对应的索引" class="headerlink" title="（ 9 ）删除外键约束后，必须手动删除对应的索引"></a>（ 9 ）删除外键约束后，必须手动删除对应的索引</h4><h3 id="6-5-添加外键约束"><a href="#6-5-添加外键约束" class="headerlink" title="6. 5 添加外键约束"></a>6. 5 添加外键约束</h3><h4 id="（-1-）建表时-3"><a href="#（-1-）建表时-3" class="headerlink" title="（ 1 ）建表时"></a>（ 1 ）建表时</h4><h4 id="（-2-）建表后-2"><a href="#（-2-）建表后-2" class="headerlink" title="（ 2 ）建表后"></a>（ 2 ）建表后</h4><h4 id="一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不"><a href="#一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不" class="headerlink" title="一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不"></a>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不</h4><h4 id="过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那"><a href="#过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那" class="headerlink" title="过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那"></a>过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那</h4><h4 id="么，就要用修改表的方式来补充定义。"><a href="#么，就要用修改表的方式来补充定义。" class="headerlink" title="么，就要用修改表的方式来补充定义。"></a>么，就要用修改表的方式来补充定义。</h4><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><h4 id="举例：-8"><a href="#举例：-8" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 主表名称(</span><br><span class="line">字段 1 数据类型 primary key,</span><br><span class="line">字段 2 数据类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 从表名称(</span><br><span class="line">字段 1 数据类型 primary key,</span><br><span class="line">字段 2 数据类型,</span><br><span class="line">[CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段)</span><br><span class="line">);</span><br><span class="line">#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样</span><br><span class="line">#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样</span><br></pre></td></tr></table></figure><h5 id="–-FOREIGN-KEY-在表级指定子表中的列"><a href="#–-FOREIGN-KEY-在表级指定子表中的列" class="headerlink" title="– FOREIGN KEY: 在表级指定子表中的列"></a>– FOREIGN KEY: 在表级指定子表中的列</h5><h5 id="–-REFERENCES-标示在父表中的列"><a href="#–-REFERENCES-标示在父表中的列" class="headerlink" title="– REFERENCES: 标示在父表中的列"></a>– REFERENCES: 标示在父表中的列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept( #主表</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table emp(#从表</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid int, #员工所在的部门</span><br><span class="line">foreign key (deptid) references dept(did) #在从表中指定外键约束</span><br><span class="line">#emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（ 1 ）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。</span><br><span class="line">（ 2 ）删除表时，先删除从表emp，再删除主表dept</span><br></pre></td></tr></table></figure><h5 id="ALTER-TABLE-从表名-ADD-CONSTRAINT-约束名-FOREIGN-KEY-从表的字段-REFERENCES-主表名-被引用"><a href="#ALTER-TABLE-从表名-ADD-CONSTRAINT-约束名-FOREIGN-KEY-从表的字段-REFERENCES-主表名-被引用" class="headerlink" title="ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用"></a>ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段) [on update xx][on delete xx];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">ADD [CONSTRAINT emp_dept_id_fk] FOREIGN KEY(dept_id) REFERENCES dept(dept_id);</span><br></pre></td></tr></table></figure><h4 id="举例：-9"><a href="#举例：-9" class="headerlink" title="举例："></a>举例：</h4><h3 id="6-6-演示问题"><a href="#6-6-演示问题" class="headerlink" title="6. 6 演示问题"></a>6. 6 演示问题</h3><h4 id="（-1-）失败：不是键列"><a href="#（-1-）失败：不是键列" class="headerlink" title="（ 1 ）失败：不是键列"></a>（ 1 ）失败：不是键列</h4><h4 id="（-2-）失败：数据类型不一致"><a href="#（-2-）失败：数据类型不一致" class="headerlink" title="（ 2 ）失败：数据类型不一致"></a>（ 2 ）失败：数据类型不一致</h4><h4 id="（-3-）成功，两个表字段名一样"><a href="#（-3-）成功，两个表字段名一样" class="headerlink" title="（ 3 ）成功，两个表字段名一样"></a>（ 3 ）成功，两个表字段名一样</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid int #员工所在的部门</span><br><span class="line">);</span><br><span class="line">#这两个表创建时，没有指定外键的话，那么创建顺序是随意</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table emp add foreign key (deptid) references dept(did);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int , #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid int, #员工所在的部门</span><br><span class="line">foreign key (deptid) references dept(did)</span><br><span class="line">);</span><br><span class="line">#ERROR 1215 (HY000): Cannot add foreign key constraint 原因是dept的did不是键列</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid char, #员工所在的部门</span><br><span class="line">foreign key (deptid) references dept(did)</span><br><span class="line">);</span><br><span class="line">#ERROR 1215 (HY000): Cannot add foreign key constraint 原因是从表的deptid字段和主表的did字</span><br><span class="line">段的数据类型不一致，并且要它俩的逻辑意义一致</span><br></pre></td></tr></table></figure><h4 id="（-4-）添加、删除、修改问题"><a href="#（-4-）添加、删除、修改问题" class="headerlink" title="（ 4 ）添加、删除、修改问题"></a>（ 4 ）添加、删除、修改问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">did int, #员工所在的部门</span><br><span class="line">foreign key (did) references dept(did)</span><br><span class="line">#emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号</span><br><span class="line">#是否重名没问题，因为两个did在不同的表中</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid int, #员工所在的部门</span><br><span class="line">foreign key (deptid) references dept(did)</span><br><span class="line">#emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into dept values( 1001 ,&#x27;教学部&#x27;);</span><br><span class="line">insert into dept values( 1003 , &#x27;财务部&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into emp values( 1 ,&#x27;张三&#x27;, 1001 ); #添加从表记录成功，在添加这条记录时，要求部门表有 1001 部门</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into emp values( 2 ,&#x27;李四&#x27;, 1005 );#添加从表记录失败</span><br><span class="line">ERROR 1452 ( 23000 ): Cannot add（添加） or update（修改） a child row: a foreign key</span><br><span class="line">constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`)</span><br><span class="line">REFERENCES `dept` (`did`)) 从表emp添加记录失败，因为主表dept没有 1005 部门</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+------+--------+</span><br><span class="line">| did | dname |</span><br><span class="line">+------+--------+</span><br><span class="line">| 1001 | 教学部 |</span><br><span class="line">| 1003 | 财务部 |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| eid | ename | deptid |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 1 | 张三 | 1001 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="总结：约束关系是针对双方的"><a href="#总结：约束关系是针对双方的" class="headerlink" title="总结：约束关系是针对双方的"></a>总结：约束关系是针对双方的</h4><h4 id="添加了外键约束后，主表的修改和删除数据受约束"><a href="#添加了外键约束后，主表的修改和删除数据受约束" class="headerlink" title="添加了外键约束后，主表的修改和删除数据受约束"></a>添加了外键约束后，主表的修改和删除数据受约束</h4><h4 id="添加了外键约束后，从表的添加和修改数据受约束"><a href="#添加了外键约束后，从表的添加和修改数据受约束" class="headerlink" title="添加了外键约束后，从表的添加和修改数据受约束"></a>添加了外键约束后，从表的添加和修改数据受约束</h4><h4 id="在从表上建立外键，要求主表必须存在"><a href="#在从表上建立外键，要求主表必须存在" class="headerlink" title="在从表上建立外键，要求主表必须存在"></a>在从表上建立外键，要求主表必须存在</h4><h4 id="删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除"><a href="#删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除" class="headerlink" title="删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除"></a>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</h4><h3 id="6-7-约束等级"><a href="#6-7-约束等级" class="headerlink" title="6. 7 约束等级"></a>6. 7 约束等级</h3><h4 id="Cascade方式：在父表上update-delete记录时，同步update-delete掉子表的匹配记录"><a href="#Cascade方式：在父表上update-delete记录时，同步update-delete掉子表的匹配记录" class="headerlink" title="Cascade方式：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录"></a>Cascade方式：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录</h4><h4 id="Set-null方式：在父表上update-delete记录时，将子表上匹配记录的列设为null，但是要注意子"><a href="#Set-null方式：在父表上update-delete记录时，将子表上匹配记录的列设为null，但是要注意子" class="headerlink" title="Set null方式：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子"></a>Set null方式：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子</h4><h4 id="表的外键列不能为not-null"><a href="#表的外键列不能为not-null" class="headerlink" title="表的外键列不能为not null"></a>表的外键列不能为not null</h4><h4 id="No-action方式：如果子表中有匹配的记录，则不允许对父表对应候选键进行update-delete操作"><a href="#No-action方式：如果子表中有匹配的记录，则不允许对父表对应候选键进行update-delete操作" class="headerlink" title="No action方式：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作"></a>No action方式：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作</h4><h4 id="Restrict方式：同no-action，-都是立即检查外键约束"><a href="#Restrict方式：同no-action，-都是立即检查外键约束" class="headerlink" title="Restrict方式：同no action， 都是立即检查外键约束"></a>Restrict方式：同no action， 都是立即检查外键约束</h4><h4 id="Set-default方式（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置"><a href="#Set-default方式（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置" class="headerlink" title="Set default方式（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置"></a>Set default方式（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置</h4><h4 id="成一个默认的值，但Innodb不能识别"><a href="#成一个默认的值，但Innodb不能识别" class="headerlink" title="成一个默认的值，但Innodb不能识别"></a>成一个默认的值，但Innodb不能识别</h4><h4 id="如果没有指定等级，就相当于Restrict方式。"><a href="#如果没有指定等级，就相当于Restrict方式。" class="headerlink" title="如果没有指定等级，就相当于Restrict方式。"></a>如果没有指定等级，就相当于Restrict方式。</h4><h4 id="对于外键约束，最好是采用-ON-UPDATE-CASCADE-ON-DELETE-RESTRICT-的方式。"><a href="#对于外键约束，最好是采用-ON-UPDATE-CASCADE-ON-DELETE-RESTRICT-的方式。" class="headerlink" title="对于外键约束，最好是采用: ON UPDATE CASCADE ON DELETE RESTRICT 的方式。"></a>对于外键约束，最好是采用: ON UPDATE CASCADE ON DELETE RESTRICT 的方式。</h4><h4 id="（-1-）演示-1-：on-update-cascade-on-delete-set-null"><a href="#（-1-）演示-1-：on-update-cascade-on-delete-set-null" class="headerlink" title="（ 1 ）演示 1 ：on update cascade on delete set null"></a>（ 1 ）演示 1 ：on update cascade on delete set null</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update emp set deptid = 1002 where eid = 1 ;#修改从表失败</span><br><span class="line">ERROR 1452 ( 23000 ): Cannot add（添加） or update（修改） a child row（子表的记录）: a</span><br><span class="line">foreign key constraint fails（外键约束失败） (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1`</span><br><span class="line">FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`))  #部门表did字段现在没有 1002 的值，所以员工</span><br><span class="line">表中不能修改员工所在部门deptid为 1002</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update dept set did = 1002 where did = 1001 ;#修改主表失败</span><br><span class="line">ERROR 1451 ( 23000 ): Cannot delete（删除） or update（修改） a parent row（父表的记录）: a</span><br><span class="line">foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY</span><br><span class="line">(`deptid`) REFERENCES `dept` (`did`)) #部门表did的 1001 字段已经被emp引用了，所以部门表的 1001 字</span><br><span class="line">段就不能修改了。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update dept set did = 1002 where did = 1003 ;#修改主表成功 因为部门表的 1003 部门没有被emp表引</span><br><span class="line">用，所以可以修改</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delete from dept where did= 1001 ; #删除主表失败</span><br><span class="line">ERROR 1451 ( 23000 ): Cannot delete（删除） or update（修改） a parent row（父表记录）: a</span><br><span class="line">foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY</span><br><span class="line">(`deptid`) REFERENCES `dept` (`did`))  #因为部门表did的 1001 字段已经被emp引用了，所以部门表的</span><br><span class="line">1001 字段对应的记录就不能被删除</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid int, #员工所在的部门</span><br><span class="line">foreign key (deptid) references dept(did)  on update cascade on delete set null</span><br><span class="line">#把修改操作设置为级联修改等级，把删除操作设置为set null等级</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>insert into dept values( 1001 ,’教学部’);<br>insert into dept values( 1002 , ‘财务部’);<br>insert into dept values( 1003 , ‘咨询部’);</p><p>insert into emp values( 1 ,’张三’, 1001 ); #在添加这条记录时，要求部门表有 1001 部门<br>insert into emp values( 2 ,’李四’, 1001 );<br>insert into emp values( 3 ,’王五’, 1002 );</p><p>mysql&gt; select * from dept;</p><p>mysql&gt; select * from emp;</p><h5 id="修改主表成功，从表也跟着修改，修改了主表被引用的字段-1002-为-1004-，从表的引用字段就跟着修改为-1004-了"><a href="#修改主表成功，从表也跟着修改，修改了主表被引用的字段-1002-为-1004-，从表的引用字段就跟着修改为-1004-了" class="headerlink" title="#修改主表成功，从表也跟着修改，修改了主表被引用的字段 1002 为 1004 ，从表的引用字段就跟着修改为 1004 了"></a>#修改主表成功，从表也跟着修改，修改了主表被引用的字段 1002 为 1004 ，从表的引用字段就跟着修改为 1004 了</h5><p>mysql&gt; update dept set did &#x3D; 1004 where did &#x3D; 1002 ;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1 Changed: 1 Warnings: 0</p><p>mysql&gt; select * from dept;<br>+——+——–+<br>| did | dname |<br>+——+——–+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #原来是 1002 ，修改为 1004<br>+——+——–+<br>3 rows in set (0.00 sec)</p><p>mysql&gt; select * from emp;<br>+—–+——-+——–+<br>| eid | ename | deptid |<br>+—–+——-+——–+<br>| 1 | 张三 | 1001 |<br>| 2 | 李四 | 1001 |<br>| 3 | 王五 | 1004 | #原来是 1002 ，跟着修改为 1004<br>+—–+——-+——–+<br>3 rows in set (0.00 sec)</p><p>#删除主表的记录成功，从表对应的字段的值被修改为null<br>mysql&gt; delete from dept where did &#x3D; 1001 ;<br>Query OK, 1 row affected (0.01 sec)</p><p>mysql&gt; select * from dept;<br>+——+——–+<br>| did | dname | #记录 1001 部门被删除了<br>+——+——–+<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 |<br>+——+——–+<br>2 rows in set (0.00 sec)</p><p>mysql&gt; select * from emp;<br>+—–+——-+——–+<br>| eid | ename | deptid |<br>+—–+——-+——–+</p><h4 id="（-2-）演示-2-：on-update-set-null-on-delete-cascade"><a href="#（-2-）演示-2-：on-update-set-null-on-delete-cascade" class="headerlink" title="（ 2 ）演示 2 ：on update set null on delete cascade"></a>（ 2 ）演示 2 ：on update set null on delete cascade</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 1 | 张三 | NULL | #原来引用 1001 部门的员工，deptid字段变为null</span><br><span class="line">| 2 | 李四 | NULL |</span><br><span class="line">| 3 | 王五 | 1004 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid int, #员工所在的部门</span><br><span class="line">foreign key (deptid) references dept(did)  on update set null on delete cascade</span><br><span class="line">#把修改操作设置为set null等级，把删除操作设置为级联删除等级</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into dept values( 1001 ,&#x27;教学部&#x27;);</span><br><span class="line">insert into dept values( 1002 , &#x27;财务部&#x27;);</span><br><span class="line">insert into dept values( 1003 , &#x27;咨询部&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into emp values( 1 ,&#x27;张三&#x27;, 1001 ); #在添加这条记录时，要求部门表有 1001 部门</span><br><span class="line">insert into emp values( 2 ,&#x27;李四&#x27;, 1001 );</span><br><span class="line">insert into emp values( 3 ,&#x27;王五&#x27;, 1002 );</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+------+--------+</span><br><span class="line">| did | dname |</span><br><span class="line">+------+--------+</span><br><span class="line">| 1001 | 教学部 |</span><br><span class="line">| 1002 | 财务部 |</span><br><span class="line">| 1003 | 咨询部 |</span><br><span class="line">+------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| eid | ename | deptid |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 1 | 张三 | 1001 |</span><br><span class="line">| 2 | 李四 | 1001 |</span><br><span class="line">| 3 | 王五 | 1002 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#修改主表，从表对应的字段设置为null</span><br><span class="line">mysql&gt; update dept set did = 1004 where did = 1002 ;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1 Changed: 1 Warnings: 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+------+--------+</span><br><span class="line">| did | dname |</span><br></pre></td></tr></table></figure><h4 id="（-3-）演示：on-update-cascade-on-delete-cascade"><a href="#（-3-）演示：on-update-cascade-on-delete-cascade" class="headerlink" title="（ 3 ）演示：on update cascade on delete cascade"></a>（ 3 ）演示：on update cascade on delete cascade</h4><h5 id="——-——–"><a href="#——-——–" class="headerlink" title="+——+——–+"></a>+——+——–+</h5><h5 id="1001-教学部"><a href="#1001-教学部" class="headerlink" title="| 1001 | 教学部 |"></a>| 1001 | 教学部 |</h5><h5 id="1003-咨询部"><a href="#1003-咨询部" class="headerlink" title="| 1003 | 咨询部 |"></a>| 1003 | 咨询部 |</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 1004 | 财务部 | #原来did是 1002</span><br><span class="line">+------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| eid | ename | deptid |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 1 | 张三 | 1001 |</span><br><span class="line">| 2 | 李四 | 1001 |</span><br><span class="line">| 3 | 王五 | NULL | #原来deptid是 1002 ，因为部门表 1002 被修改了， 1002 没有对应的了，就设置为</span><br><span class="line">null</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="删除主表的记录成功，主表的-1001-行被删除了，从表相应的记录也被删除了"><a href="#删除主表的记录成功，主表的-1001-行被删除了，从表相应的记录也被删除了" class="headerlink" title="#删除主表的记录成功，主表的 1001 行被删除了，从表相应的记录也被删除了"></a>#删除主表的记录成功，主表的 1001 行被删除了，从表相应的记录也被删除了</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from dept where did= 1001 ;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+------+--------+</span><br><span class="line">| did | dname | #部门表中 1001 部门被删除</span><br><span class="line">+------+--------+</span><br><span class="line">| 1003 | 咨询部 |</span><br><span class="line">| 1004 | 财务部 |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| eid | ename | deptid |#原来 1001 部门的员工也被删除了</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 3 | 王五 | NULL |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">did int primary key, #部门编号</span><br><span class="line">dname varchar( 50 ) #部门名称</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">eid int primary key,  #员工编号</span><br><span class="line">ename varchar( 5 ), #员工姓名</span><br><span class="line">deptid int, #员工所在的部门</span><br><span class="line">foreign key (deptid) references dept(did)  on update cascade on delete cascade</span><br><span class="line">#把修改操作设置为级联修改等级，把删除操作也设置为级联删除等级</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>insert into dept values( 1001 ,’教学部’);<br>insert into dept values( 1002 , ‘财务部’);<br>insert into dept values( 1003 , ‘咨询部’);</p><p>insert into emp values( 1 ,’张三’, 1001 ); #在添加这条记录时，要求部门表有 1001 部门<br>insert into emp values( 2 ,’李四’, 1001 );<br>insert into emp values( 3 ,’王五’, 1002 );</p><p>mysql&gt; select * from dept;<br>+——+——–+<br>| did | dname |<br>+——+——–+<br>| 1001 | 教学部 |<br>| 1002 | 财务部 |<br>| 1003 | 咨询部 |<br>+——+——–+<br>3 rows in set (0.00 sec)</p><p>mysql&gt; select * from emp;<br>+—–+——-+——–+<br>| eid | ename | deptid |<br>+—–+——-+——–+<br>| 1 | 张三 | 1001 |<br>| 2 | 李四 | 1001 |<br>| 3 | 王五 | 1002 |<br>+—–+——-+——–+<br>3 rows in set (0.00 sec)</p><h5 id="修改主表，从表对应的字段自动修改"><a href="#修改主表，从表对应的字段自动修改" class="headerlink" title="#修改主表，从表对应的字段自动修改"></a>#修改主表，从表对应的字段自动修改</h5><p>mysql&gt; update dept set did &#x3D; 1004 where did &#x3D; 1002 ;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1 Changed: 1 Warnings: 0</p><p>mysql&gt; select * from dept;<br>+——+——–+<br>| did | dname |<br>+——+——–+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #部门 1002 修改为 1004<br>+——+——–+<br>3 rows in set (0.00 sec)</p><p>mysql&gt; select * from emp;<br>+—–+——-+——–+<br>| eid | ename | deptid |<br>+—–+——-+——–+<br>| 1 | 张三 | 1001 |<br>| 2 | 李四 | 1001 |<br>| 3 | 王五 | 1004 | #级联修改<br>+—–+——-+——–+<br>3 rows in set (0.00 sec)</p><h5 id="删除主表的记录成功，主表的-1001-行被删除了，从表相应的记录也被删除了-1"><a href="#删除主表的记录成功，主表的-1001-行被删除了，从表相应的记录也被删除了-1" class="headerlink" title="#删除主表的记录成功，主表的 1001 行被删除了，从表相应的记录也被删除了"></a>#删除主表的记录成功，主表的 1001 行被删除了，从表相应的记录也被删除了</h5><p>mysql&gt; delete from dept where did&#x3D; 1001 ;<br>Query OK, 1 row affected (0.00 sec)</p><h3 id="6-8-删除外键约束"><a href="#6-8-删除外键约束" class="headerlink" title="6. 8 删除外键约束"></a>6. 8 删除外键约束</h3><h4 id="流程如下："><a href="#流程如下：" class="headerlink" title="流程如下："></a>流程如下：</h4><h4 id="举例：-10"><a href="#举例：-10" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+------+--------+</span><br><span class="line">| did | dname | #1001部门被删除了</span><br><span class="line">+------+--------+</span><br><span class="line">| 1003 | 咨询部 |</span><br><span class="line">| 1004 | 财务部 |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| eid | ename | deptid |  #1001部门的员工也被删除了</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 3 | 王五 | 1004 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="1-第一步先查看约束名和删除外键约束"><a href="#1-第一步先查看约束名和删除外键约束" class="headerlink" title="( 1 )第一步先查看约束名和删除外键约束"></a>( 1 )第一步先查看约束名和删除外键约束</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;#查看某个</span><br><span class="line">表的约束名</span><br></pre></td></tr></table></figure><h5 id="ALTER-TABLE-从表名-DROP-FOREIGN-KEY-外键约束名"><a href="#ALTER-TABLE-从表名-DROP-FOREIGN-KEY-外键约束名" class="headerlink" title="ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;"></a>ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;</h5><h5 id="（-2-）第二步查看索引名和删除索引。（注意，只能手动删除）"><a href="#（-2-）第二步查看索引名和删除索引。（注意，只能手动删除）" class="headerlink" title="（ 2 ）第二步查看索引名和删除索引。（注意，只能手动删除）"></a>（ 2 ）第二步查看索引名和删除索引。（注意，只能手动删除）</h5><h5 id="SHOW-INDEX-FROM-表名称-查看某个表的索引名"><a href="#SHOW-INDEX-FROM-表名称-查看某个表的索引名" class="headerlink" title="SHOW INDEX FROM 表名称; #查看某个表的索引名"></a>SHOW INDEX FROM 表名称; #查看某个表的索引名</h5><h5 id="ALTER-TABLE-从表名-DROP-INDEX-索引名"><a href="#ALTER-TABLE-从表名-DROP-INDEX-索引名" class="headerlink" title="ALTER TABLE 从表名 DROP INDEX 索引名;"></a>ALTER TABLE 从表名 DROP INDEX 索引名;</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;emp&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table emp drop foreign key emp_ibfk_1;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0 Duplicates: 0 Warnings: 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show index from emp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table emp drop index deptid;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0 Duplicates: 0 Warnings: 0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  show index from emp;</span><br></pre></td></tr></table></figure><h3 id="6-9-开发场景"><a href="#6-9-开发场景" class="headerlink" title="6. 9 开发场景"></a>6. 9 开发场景</h3><h4 id="问题-1-：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否"><a href="#问题-1-：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否" class="headerlink" title="问题 1 ：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否"></a>问题 1 ：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否</h4><h4 id="一定要建外键约束？"><a href="#一定要建外键约束？" class="headerlink" title="一定要建外键约束？"></a>一定要建外键约束？</h4><h4 id="答：不是的"><a href="#答：不是的" class="headerlink" title="答：不是的"></a>答：不是的</h4><h4 id="问题-2-：建和不建外键约束有什么区别？"><a href="#问题-2-：建和不建外键约束有什么区别？" class="headerlink" title="问题 2 ：建和不建外键约束有什么区别？"></a>问题 2 ：建和不建外键约束有什么区别？</h4><h4 id="答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限"><a href="#答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限" class="headerlink" title="答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限"></a>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限</h4><h4 id="制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。"><a href="#制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。" class="headerlink" title="制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。"></a>制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</h4><h4 id="不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的引用完整"><a href="#不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的引用完整" class="headerlink" title="不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的引用完整"></a>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的引用完整</h4><h4 id="性，只能依靠程序员的自觉，或者是在Java程序中进行限定。例如：在员工表中，可以添加一个员工的"><a href="#性，只能依靠程序员的自觉，或者是在Java程序中进行限定。例如：在员工表中，可以添加一个员工的" class="headerlink" title="性，只能依靠程序员的自觉，或者是在Java程序中进行限定。例如：在员工表中，可以添加一个员工的"></a>性，只能依靠程序员的自觉，或者是在Java程序中进行限定。例如：在员工表中，可以添加一个员工的</h4><h4 id="信息，它的部门指定为一个完全不存在的部门。"><a href="#信息，它的部门指定为一个完全不存在的部门。" class="headerlink" title="信息，它的部门指定为一个完全不存在的部门。"></a>信息，它的部门指定为一个完全不存在的部门。</h4><h4 id="问题-3-：那么建和不建外键约束和查询有没有关系？"><a href="#问题-3-：那么建和不建外键约束和查询有没有关系？" class="headerlink" title="问题 3 ：那么建和不建外键约束和查询有没有关系？"></a>问题 3 ：那么建和不建外键约束和查询有没有关系？</h4><h4 id="答：没有"><a href="#答：没有" class="headerlink" title="答：没有"></a>答：没有</h4><h4 id="在-MySQL-里，外键约束是有成本的，需要消耗系统资源。对于大并发的-SQL-操作，有可能会不适"><a href="#在-MySQL-里，外键约束是有成本的，需要消耗系统资源。对于大并发的-SQL-操作，有可能会不适" class="headerlink" title="在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适"></a>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适</h4><h4 id="合。比如大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以，-MySQL-允"><a href="#合。比如大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以，-MySQL-允" class="headerlink" title="合。比如大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以， MySQL 允"></a>合。比如大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以， MySQL 允</h4><h4 id="许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不"><a href="#许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不" class="headerlink" title="许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不"></a>许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不</h4><h4 id="用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。"><a href="#用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。" class="headerlink" title="用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。"></a>用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</h4><h3 id="6-10-阿里开发规范"><a href="#6-10-阿里开发规范" class="headerlink" title="6. 10 阿里开发规范"></a>6. 10 阿里开发规范</h3><h4 id="【强制】不得使用外键与级联，一切外键概念必须在应用层解决。"><a href="#【强制】不得使用外键与级联，一切外键概念必须在应用层解决。" class="headerlink" title="【强制】不得使用外键与级联，一切外键概念必须在应用层解决。"></a>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</h4><h4 id="说明：（概念解释）学生表中的-student-id-是主键，那么成绩表中的-student-id-则为外键。如果更新学"><a href="#说明：（概念解释）学生表中的-student-id-是主键，那么成绩表中的-student-id-则为外键。如果更新学" class="headerlink" title="说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学"></a>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学</h4><h4 id="生表中的-student-id，同时触发成绩表中的-student-id-更新，即为级联更新。外键与级联更新适用于单"><a href="#生表中的-student-id，同时触发成绩表中的-student-id-更新，即为级联更新。外键与级联更新适用于单" class="headerlink" title="生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单"></a>生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单</h4><h4 id="机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响"><a href="#机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响" class="headerlink" title="机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响"></a>机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响</h4><h4 id="数据库的插入速度。"><a href="#数据库的插入速度。" class="headerlink" title="数据库的插入速度。"></a>数据库的插入速度。</h4><h2 id="7-CHECK-约束"><a href="#7-CHECK-约束" class="headerlink" title="7. CHECK 约束"></a>7. CHECK 约束</h2><h3 id="7-1-作用"><a href="#7-1-作用" class="headerlink" title="7. 1 作用"></a>7. 1 作用</h3><h4 id="检查某个字段的值是否符号xx要求，一般指的是值的范围"><a href="#检查某个字段的值是否符号xx要求，一般指的是值的范围" class="headerlink" title="检查某个字段的值是否符号xx要求，一般指的是值的范围"></a>检查某个字段的值是否符号xx要求，一般指的是值的范围</h4><h3 id="2-、关键字"><a href="#2-、关键字" class="headerlink" title="2 、关键字"></a>2 、关键字</h3><h4 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h4><h3 id="3-、说明：MySQL-5-7-不支持"><a href="#3-、说明：MySQL-5-7-不支持" class="headerlink" title="3 、说明：MySQL 5. 7 不支持"></a>3 、说明：MySQL 5. 7 不支持</h3><h4 id="MySQL5-7-可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警"><a href="#MySQL5-7-可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警" class="headerlink" title="MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警"></a>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警</h4><h4 id="告"><a href="#告" class="headerlink" title="告"></a>告</h4><h4 id="但是-MySQL-8-0中可以使用check约束了-。"><a href="#但是-MySQL-8-0中可以使用check约束了-。" class="headerlink" title="但是 MySQL 8.0中可以使用check约束了 。"></a>但是 MySQL 8.0中可以使用check约束了 。</h4><h4 id="再举例-1"><a href="#再举例-1" class="headerlink" title="再举例"></a>再举例</h4><h4 id="再举例-2"><a href="#再举例-2" class="headerlink" title="再举例"></a>再举例</h4><h4 id="再举例-3"><a href="#再举例-3" class="headerlink" title="再举例"></a>再举例</h4><h2 id="8-DEFAULT约束"><a href="#8-DEFAULT约束" class="headerlink" title="8. DEFAULT约束"></a>8. DEFAULT约束</h2><h3 id="8-1-作用"><a href="#8-1-作用" class="headerlink" title="8. 1 作用"></a>8. 1 作用</h3><h4 id="给某个字段-某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默"><a href="#给某个字段-某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默" class="headerlink" title="给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默"></a>给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默</h4><h4 id="认值。"><a href="#认值。" class="headerlink" title="认值。"></a>认值。</h4><h3 id="8-2-关键字"><a href="#8-2-关键字" class="headerlink" title="8. 2 关键字"></a>8. 2 关键字</h3><h4 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h4><h3 id="8-3-如何给字段加默认值"><a href="#8-3-如何给字段加默认值" class="headerlink" title="8. 3 如何给字段加默认值"></a>8. 3 如何给字段加默认值</h3><h4 id="（-1-）建表时-4"><a href="#（-1-）建表时-4" class="headerlink" title="（ 1 ）建表时"></a>（ 1 ）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">eid int primary key,</span><br><span class="line">ename varchar( 5 ),</span><br><span class="line">gender char check (&#x27;男&#x27; or &#x27;女&#x27;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into employee values( 1 ,&#x27;张三&#x27;,&#x27;妖&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from employee;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| eid | ename | gender |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 1 | 张三 | 妖 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE temp(</span><br><span class="line">id INT AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR( 20 ),</span><br><span class="line">age INT CHECK(age &gt; 20 ),</span><br><span class="line">PRIMARY KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age tinyint check(age &gt; 20 ) 或 sex char( 2 ) check(sex in(‘男’,’女’))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHECK(height&gt;= 0 AND height&lt; 3 )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">字段名 数据类型 primary key,</span><br><span class="line">字段名 数据类型 unique key not null,</span><br><span class="line">字段名 数据类型 unique key,</span><br><span class="line">字段名 数据类型 not null default 默认值,</span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br></pre></td></tr></table></figure><h4 id="再举例：-1"><a href="#再举例：-1" class="headerlink" title="再举例："></a>再举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 default 默认值 ,</span><br><span class="line">字段名 数据类型 not null default 默认值,</span><br><span class="line">字段名 数据类型 not null default 默认值,</span><br><span class="line">primary key(字段名),</span><br><span class="line">unique key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="说明：默认值约束一般不在唯一键和主键列上加"><a href="#说明：默认值约束一般不在唯一键和主键列上加" class="headerlink" title="说明：默认值约束一般不在唯一键和主键列上加"></a>说明：默认值约束一般不在唯一键和主键列上加</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">eid int primary key,</span><br><span class="line">ename varchar( 20 ) not null,</span><br><span class="line">gender char default &#x27;男&#x27;,</span><br><span class="line">tel char( 11 ) not null default &#x27;&#x27; #默认是空字符串</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| ename | varchar( 20 ) | NO | | NULL | |</span><br><span class="line">| gender | char( 1 ) | YES | | 男 | |</span><br><span class="line">| tel | char( 11 ) | NO | | | |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into employee values( 1 ,&#x27;汪飞&#x27;,&#x27;男&#x27;,&#x27;13700102535&#x27;); #成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from employee;</span><br><span class="line">+-----+-------+--------+-------------+</span><br><span class="line">| eid | ename | gender | tel |</span><br><span class="line">+-----+-------+--------+-------------+</span><br><span class="line">| 1 | 汪飞 | 男 | 13700102535 |</span><br><span class="line">+-----+-------+--------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into employee(eid,ename) values( 2 ,&#x27;天琪&#x27;); #成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from employee;</span><br><span class="line">+-----+-------+--------+-------------+</span><br><span class="line">| eid | ename | gender | tel |</span><br><span class="line">+-----+-------+--------+-------------+</span><br><span class="line">| 1 | 汪飞 | 男 | 13700102535 |</span><br><span class="line">| 2 | 天琪 | 男 | |</span><br><span class="line">+-----+-------+--------+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into employee(eid,ename) values( 3 ,&#x27;二虎&#x27;);</span><br><span class="line">#ERROR 1062 (23000): Duplicate entry &#x27;&#x27; for key &#x27;tel&#x27;</span><br><span class="line">#如果tel有唯一性约束的话会报错，如果tel没有唯一性约束，可以添加成功</span><br></pre></td></tr></table></figure><h4 id="（-2-）建表后-3"><a href="#（-2-）建表后-3" class="headerlink" title="（ 2 ）建表后"></a>（ 2 ）建表后</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myemp(</span><br><span class="line">id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">NAME VARCHAR( 15 ),</span><br><span class="line">salary DOUBLE( 10 , 2 ) DEFAULT 2000</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 default 默认值;</span><br></pre></td></tr></table></figure><h5 id="如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被"><a href="#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被" class="headerlink" title="#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被"></a>#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被</h5><h5 id="删除了"><a href="#删除了" class="headerlink" title="删除了"></a>删除了</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默</span><br><span class="line">认值约束，否则就删除了</span><br><span class="line">alter table 表名称 modify 字段名 数据类型 default 默认值 not null;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">eid int primary key,</span><br><span class="line">ename varchar( 20 ),</span><br><span class="line">gender char,</span><br><span class="line">tel char( 11 ) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| ename | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">| gender | char( 1 ) | YES | | NULL | |</span><br><span class="line">| tel | char( 11 ) | NO | | NULL | |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table employee modify gender char default &#x27;男&#x27;;  #给gender字段增加默认值约束</span><br><span class="line">alter table employee modify tel char( 11 ) default &#x27;&#x27;; #给tel字段增加默认值约束</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| ename | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">| gender | char( 1 ) | YES | | 男 | |</span><br><span class="line">| tel | char( 11 ) | YES | | | |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table employee modify tel char( 11 ) default &#x27;&#x27; not null;#给tel字段增加默认值约束，并</span><br><span class="line">保留非空约束</span><br></pre></td></tr></table></figure><h3 id="8-4-如何删除默认值约束"><a href="#8-4-如何删除默认值约束" class="headerlink" title="8. 4 如何删除默认值约束"></a>8. 4 如何删除默认值约束</h3><h2 id="9-面试"><a href="#9-面试" class="headerlink" title="9. 面试"></a>9. 面试</h2><h4 id="面试-1-、为什么建表时，加-not-null-default-‘’-或-default-0"><a href="#面试-1-、为什么建表时，加-not-null-default-‘’-或-default-0" class="headerlink" title="面试 1 、为什么建表时，加 not null default ‘’ 或 default 0"></a>面试 1 、为什么建表时，加 not null default ‘’ 或 default 0</h4><h4 id="答：不想让表中出现null值。"><a href="#答：不想让表中出现null值。" class="headerlink" title="答：不想让表中出现null值。"></a>答：不想让表中出现null值。</h4><h4 id="面试-2-、为什么不想要-null-的值"><a href="#面试-2-、为什么不想要-null-的值" class="headerlink" title="面试 2 、为什么不想要 null 的值"></a>面试 2 、为什么不想要 null 的值</h4><h4 id="答-（-1-）不好比较。null是一种特殊值，比较时只能用专门的is-null-和-is-not-null来比较。碰到运算符，通"><a href="#答-（-1-）不好比较。null是一种特殊值，比较时只能用专门的is-null-和-is-not-null来比较。碰到运算符，通" class="headerlink" title="答:（ 1 ）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通"></a>答:（ 1 ）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通</h4><h4 id="常返回null。"><a href="#常返回null。" class="headerlink" title="常返回null。"></a>常返回null。</h4><h4 id="（-2-）效率不高。影响提高索引效果。因此，我们往往在建表时-not-null-default-‘’-或-default-0"><a href="#（-2-）效率不高。影响提高索引效果。因此，我们往往在建表时-not-null-default-‘’-或-default-0" class="headerlink" title="（ 2 ）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0"></a>（ 2 ）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0</h4><h4 id="面试-3-、带AUTO-INCREMENT约束的字段值是从-1-开始的吗？-在MySQL中，默认AUTO-INCREMENT的初始"><a href="#面试-3-、带AUTO-INCREMENT约束的字段值是从-1-开始的吗？-在MySQL中，默认AUTO-INCREMENT的初始" class="headerlink" title="面试 3 、带AUTO_INCREMENT约束的字段值是从 1 开始的吗？ 在MySQL中，默认AUTO_INCREMENT的初始"></a>面试 3 、带AUTO_INCREMENT约束的字段值是从 1 开始的吗？ 在MySQL中，默认AUTO_INCREMENT的初始</h4><h4 id="值是-1-，每新增一条记录，字段值自动加-1-。设置自增属性（AUTO-INCREMENT）的时候，还可以指定第"><a href="#值是-1-，每新增一条记录，字段值自动加-1-。设置自增属性（AUTO-INCREMENT）的时候，还可以指定第" class="headerlink" title="值是 1 ，每新增一条记录，字段值自动加 1 。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第"></a>值是 1 ，每新增一条记录，字段值自动加 1 。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第</h4><h4 id="一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一"><a href="#一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一" class="headerlink" title="一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一"></a>一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一</h4><h4 id="条记录，同时指定id值为-5-，则以后插入的记录的id值就会从-6-开始往上增加。添加主键约束时，往往需要"><a href="#条记录，同时指定id值为-5-，则以后插入的记录的id值就会从-6-开始往上增加。添加主键约束时，往往需要" class="headerlink" title="条记录，同时指定id值为 5 ，则以后插入的记录的id值就会从 6 开始往上增加。添加主键约束时，往往需要"></a>条记录，同时指定id值为 5 ，则以后插入的记录的id值就会从 6 开始往上增加。添加主键约束时，往往需要</h4><h4 id="设置字段自动增加属性。"><a href="#设置字段自动增加属性。" class="headerlink" title="设置字段自动增加属性。"></a>设置字段自动增加属性。</h4><h4 id="面试-4-、并不是每个表都可以任意选择存储引擎？-外键约束（FOREIGN-KEY）不能跨引擎使用。"><a href="#面试-4-、并不是每个表都可以任意选择存储引擎？-外键约束（FOREIGN-KEY）不能跨引擎使用。" class="headerlink" title="面试 4 、并不是每个表都可以任意选择存储引擎？ 外键约束（FOREIGN KEY）不能跨引擎使用。"></a>面试 4 、并不是每个表都可以任意选择存储引擎？ 外键约束（FOREIGN KEY）不能跨引擎使用。</h4><h4 id="MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来"><a href="#MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来" class="headerlink" title="MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来"></a>MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来</h4><h4 id="保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不"><a href="#保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不" class="headerlink" title="保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不"></a>保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不</h4><h4 id="能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。"><a href="#能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。" class="headerlink" title="能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。"></a>能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| ename | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">| gender | char( 1 ) | YES | | 男 | |</span><br><span class="line">| tel | char( 11 ) | NO | | | |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 not null; #删除默认值约束，保留非空约束</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table employee modify gender char; #删除gender字段默认值约束，如果有非空约束，也一并删除</span><br><span class="line">alter table employee modify tel char( 11 )  not null;#删除tel字段默认值约束，保留非空约束</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| eid | int( 11 ) | NO | PRI | NULL | |</span><br><span class="line">| ename | varchar( 20 ) | YES | | NULL | |</span><br><span class="line">| gender | char( 1 ) | YES | | NULL | |</span><br><span class="line">| tel | char( 11 ) | NO | | NULL | |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;约束&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-约束-constraint-概述&quot;&gt;&lt;a href=&quot;#1-约束-constraint-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 约束(constraint)概述&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>9.mysql第12章数据类型精讲</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/9.mysql%E7%AC%AC12%E7%AB%A0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/9.mysql%E7%AC%AC12%E7%AB%A0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/</id>
    <published>2019-10-03T09:00:00.000Z</published>
    <updated>2024-11-02T15:56:09.089Z</updated>
    
    <content type="html"><![CDATA[<h1><center>数据类型精讲</center></h1><h2 id="1-MySQL中的数据类型"><a href="#1-MySQL中的数据类型" class="headerlink" title="1. MySQL中的数据类型"></a>1. MySQL中的数据类型</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022322751.png" alt="image-20241102232236359"></p><h2 id="常见数据类型的属性-如下"><a href="#常见数据类型的属性-如下" class="headerlink" title="常见数据类型的属性,如下:"></a>常见数据类型的属性,如下:</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022323536.png" alt="image-20241102232308544"></p><h2 id="2-整数类型"><a href="#2-整数类型" class="headerlink" title="2. 整数类型"></a>2. 整数类型</h2><h3 id="2-1-类型介绍"><a href="#2-1-类型介绍" class="headerlink" title="2.1 类型介绍"></a>2.1 类型介绍</h3><p>整数类型一共有 5 种,包括 TINYINT、SMALLINT、MEDIUMINT、INT(INTEGER)和 BIGINT。</p><p>它们的区别如下表所示:</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022324114.png" alt="image-20241102232401099"></p><h3 id="2-2-适用场景"><a href="#2-2-适用场景" class="headerlink" title="2.2 适用场景"></a>2.2 适用场景</h3><blockquote><p>TINYINT :一般用于枚举数据,比如系统设定取值范围很小且固定的场景。<br>SMALLINT :可以用于较小范围的统计数据,比如统计工厂的固定资产库存数量等。<br>MEDIUMINT :用于较大整数的计算,比如车站每日的客流量等。<br>INT、INTEGER :取值范围足够大,一般情况下不用考虑超限问题,用得最多。比如商品编号。<br>BIGINT :只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证<br>券公司衍生产品持仓等。</p></blockquote><h3 id="2-4-如何选择"><a href="#2-4-如何选择" class="headerlink" title="2.4 如何选择?"></a>2.4 如何选择?</h3><p>在评估用哪种整数类型的时候,你需要考虑 存储空间 和 可靠性 的平衡问题:一方 面,用占用字节数少<br>的整数类型可以节省存储空间;另一方面,要是为了节省存储空间, 使用的整数类型取值范围太小,一<br>旦遇到超出取值范围的情况,就可能引起 系统错误 ,影响可靠性。<br>举个例子,商品编号采用的数据类型是 INT。原因就在于,客户门店中流通的商品种类较多,而且,每<br>天都有旧商品下架,新商品上架,这样不断迭代,日积月累。<br>如果使用 SMALLINT 类型,虽然占用字节数比 INT 类型的整数少,但是却不能保证数据不会超出范围<br>65535。相反,使用 INT,就能确保有足够大的取值范围,不用担心数据超出范围影响可靠性的问题。<br>你要注意的是,在实际工作中,系统故障产生的成本远远超过增加几个字段存储空间所产生的成本。因<br>此,我建议你首先确保数据不会超过取值范围,在这个前提之下,再去考虑如何节省存储空间。 </p><h2 id="3-浮点类型"><a href="#3-浮点类型" class="headerlink" title="3.浮点类型"></a>3.浮点类型</h2><h3 id="3-1-类型介绍"><a href="#3-1-类型介绍" class="headerlink" title="3.1 类型介绍"></a>3.1 类型介绍</h3><p>浮点数和定点数类型的特点是可以 处理小数 ,你可以把整数看成小数的一个特例。因此,浮点数和定点<br>数的使用场景,比整数大多了。 MySQL支持的浮点数类型,分别是 FLOAT、DOUBLE、REAL。</p><ul><li>FLOAT 表示单精度浮点数;</li><li>DOUBLE 表示双精度浮点数;</li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022325661.png" alt="image-20241102232555529"></p><ul><li><p>REAL默认就是 DOUBLE。如果你把 SQL 模式设定为启用“ REAL_AS_FLOAT ”,那 么,MySQL 就认为 REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”,可以通过以下 SQL 语句实现:</p><ul><li><pre><code class="mysql">SET sql_mode = “REAL_AS_FLOAT”;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; - 问题1:FLOAT 和 DOUBLE 这两种数据类型的区别是啥呢?</span><br><span class="line">&gt;   - FLOAT 占用字节数少,取值范围小;DOUBLE 占用字节数多,取值范围也大。</span><br><span class="line">&gt; - 问题2:为什么浮点数类型的无符号数取值范围,只相当于有符号数取值范围的一半,也就是只相当于有符号数取值范围大于等于零的部分呢?</span><br><span class="line">&gt;   - MySQL 存储浮点数的格式为: 符号(S) 、 尾数(M) 和 阶码(E) 。因此,无论有没有符号,MySQL 的浮</span><br><span class="line">&gt;     点数都会存储表示符号的部分。因此, 所谓的无符号数取值范围,其实就是有符号数取值范围大于等于</span><br><span class="line">&gt;     零的部分。</span><br><span class="line"></span><br><span class="line">### 3.2 数据精度说明</span><br><span class="line"></span><br><span class="line">对于浮点类型,在MySQL中单精度值使用 4 个字节,双精度值使用 8 个字节。</span><br><span class="line"></span><br><span class="line">从MySQL 8.0.17开始,FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用,将来可能被移除。另外,关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了,将来也可能被移除。</span><br><span class="line"></span><br><span class="line">### 3.3 精度误差说明</span><br><span class="line"></span><br><span class="line">浮点数类型有个缺陷,就是不精准。下面我来重点解释一下为什么 MySQL 的浮点数不够精准。比如,我们设计一个表,有f1这个字段,插入值分别为0.47,0.44,0.19,我们期待的运行结果是:0.47 + 0.44 + 0.19 =1.1。而使用sum之后查询:</span><br><span class="line"></span><br><span class="line">​查询结果是 1.0999999999999999。看到了吗?虽然误差很小,但确实有误差。 你也可以尝试把数据类型改成 FLOAT,然后运行求和查询,得到的是, 1.0999999940395355。显然,误差更大了。</span><br><span class="line">​那么,为什么会存在这样的误差呢?问题还是出在 MySQL 对浮点类型数据的存储方式上。</span><br><span class="line">​MySQL 用 4 个字节存储 FLOAT 类型数据,用 8 个字节来存储 DOUBLE 类型数据。无论哪个,都是采用二进制的方式来进行存储的。比如 9.625,用二进制来表达,就是 1001.101,或者表达成 1.001101×2^3。如果尾数不是 0 或 5(比如 9.624),你就无法用一个二进制数来精确表达。进而,就只好在取值允许的范围内进行四舍五入。</span><br><span class="line">​在编程中,如果用到浮点数,要特别注意误差问题,==因为浮点数是不准确的,所以我们要避免使用“=”来判断两个数是否相等。==同时,在一些对精确度要求较高的项目中,千万不要使用浮点数,不然会导致结果错误,甚至是造成不可挽回的损失。那么,MySQL 有没有精准的数据类型呢?当然有,这就是定点数类型: DECIMAL 。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4. 定点数类型</span><br><span class="line"></span><br><span class="line">### 4.1 类型介绍</span><br><span class="line"></span><br><span class="line">-  MySQL中的定点数类型只有 DECIMAL 一种类型。</span><br><span class="line">- ![image-20241102233224592](https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022332185.png)</span><br><span class="line"></span><br><span class="line">使用 DECIMAL(M,D) 的方式表示高精度小数。其中,M被称为精度,D被称为标度。0&lt;=M&lt;=65,0&lt;=D&lt;=30,D&lt;M。例如,定义DECIMAL(5,2)的类型,表示该列取值范围是-999.99~999.99。</span><br><span class="line"></span><br><span class="line">- ==DECIMAL(M,D)的最大取值范围与DOUBLE类型一样==,但是有效的数据范围是由M和D决定的。</span><br><span class="line">  DECIMAL 的存储空间并不是固定的,由精度值M决定,总共占用的存储空间为M+2个字节。也就是说,在一些对精度要求不高的场景下,比起占用同样字节长度的定点数,浮点数表达的数值范围可以更大一些。</span><br><span class="line">- 定点数在MySQL内部是以 ==字符串== 的形式进行存储,这就决定了它一定是精准的。</span><br><span class="line">- 当DECIMAL类型不指定精度和标度时,其默认为DECIMAL(10,0)。当数据的精度超出了定点数类型的精度范围时,则MySQL同样会进行四舍五入处理。</span><br><span class="line">- ==浮点数 vs 定点数==</span><br><span class="line">  - 浮点数相对于定点数的优点是在长度一定的情况下,浮点类型取值范围大,但是不精准,适用于需要取值范围大,又可以容忍微小误差的科学计算场景(比如计算化学、分子建模、流体动力学等)</span><br><span class="line">  - 定点数类型取值范围相对小,但是精准,没有误差,适合于对精度要求极高的场景 (比如涉及金额计算的场景)</span><br><span class="line"></span><br><span class="line">### 4.2 开发中经验</span><br><span class="line"></span><br><span class="line">&gt; “由于 DECIMAL 数据类型的精准性,在我们的项目中,除了极少数(比如商品编号)用到整数类型外,其他的数值都用的是 DECIMAL,原因就是这个项目所处的零售行业,要求精准,一分钱也不能差。 ” ——来自某项目经理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5. 位类型:BIT</span><br><span class="line"></span><br><span class="line">BIT类型中存储的是二进制值,类似010110。</span><br><span class="line"></span><br><span class="line">![image-20241102233413752](https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022334206.png)</span><br><span class="line"></span><br><span class="line">BIT类型,如果没有指定(M),默认是1位。这个1位,表示只能存1位的二进制值。这里(M)是表示二进制的位数,位数最小值为1,最大值为64。</span><br><span class="line"></span><br><span class="line">使用SELECT命令查询位字段时,可以用 ==BIN()== 或 ==HEX()== 函数进行读取。</span><br><span class="line"></span><br><span class="line">## 6. 日期与时间类型</span><br><span class="line"></span><br><span class="line">日期与时间是重要的信息,在我们的系统中,几乎所有的数据表都用得到。原因是客户需要知道数据的时间标签,从而进行数据查询、统计和处理MySQL有多种表示日期和时间的数据类型,不同的版本可能有所差异,MySQL8.0版本支持的日期和时间类型主要有:YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。</span><br><span class="line"></span><br><span class="line">- YEAR 类型通常用来表示年</span><br><span class="line">- DATE 类型通常用来表示年、月、日\</span><br><span class="line">- TIME 类型通常用来表示时、分、秒</span><br><span class="line">- DATETIME 类型通常用来表示年、月、日、时、分、秒</span><br><span class="line">- TIMESTAMP 类型通常用来表示带时区的年、月、日、时、分、秒</span><br><span class="line"></span><br><span class="line">![image-20241102233649031](https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022338787.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以看到,不同数据类型表示的时间内容不同、取值范围不同,而且占用的字节数也不一样,你要根据实际需要灵活选取。</span><br><span class="line">为什么时间类型 TIME 的取值范围不是 -23:59:59~23:59:59 呢?原因是 MySQL 设计的 TIME 类型,不光表示一天之内的时间,而且可以用来表示一个时间间隔,这个时间间隔可以超过 24 小时。</span><br><span class="line"></span><br><span class="line">### 6.1 YEAR类型</span><br><span class="line"></span><br><span class="line">YEAR类型用来表示年份,在所有的日期时间类型中所占用的存储空间最小,只需要 1个字节 的存储空间。</span><br><span class="line">在MySQL中,YEAR有以下几种存储格式:</span><br><span class="line"></span><br><span class="line">- 以4位字符串或数字格式表示YEAR类型,其格式为YYYY,最小值为1901,最大值为2155。</span><br><span class="line">- 以2位字符串格式表示YEAR类型,最小值为00,最大值为99。</span><br><span class="line">  - 当取值为01到69时,表示2001到2069;</span><br><span class="line">  - 当取值为70到99时,表示1970到1999;</span><br><span class="line">  - 当取值整数的0或00添加的话,那么是0000年;</span><br><span class="line">  - 当取值是日期/字符串的&#x27;0&#x27;添加的话,是2000年。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==从MySQL5.5.27开始,2位格式的YEAR已经不推荐使用==。YEAR默认格式就是“YYYY”,没必要写成YEAR(4),</span><br><span class="line">从MySQL 8.0.19开始,不推荐使用指定显示宽度的YEAR(4)数据类型。</span><br><span class="line"></span><br><span class="line">###  6.2 DATE类型</span><br><span class="line"></span><br><span class="line">DATE类型表示日期,没有时间部分,格式为 YYYY-MM-DD ,其中,YYYY表示年份,MM表示月份,DD表示日期。需要 3个字节 的存储空间。在向DATE类型的字段插入数据时,同样需要满足一定的格式条件。</span><br><span class="line"></span><br><span class="line">- 以 YYYY-MM-DD 格式或者 YYYYMMDD 格式表示的字符串日期,其最小取值为1000-01-01,最大取值为9999-12-03。YYYYMMDD格式会被转化为YYYY-MM-DD格式。</span><br><span class="line">- 以 YY-MM-DD 格式或者 YYMMDD 格式表示的字符串日期,此格式中,年份为两位数值或字符串满足YEAR类型的格式条件为:当年份取值为00到69时,会被转化为2000到2069;当年份取值为70到99时,会被转化为1970到1999。</span><br><span class="line">- 使用 CURRENT_DATE() 或者 NOW() 函数,会插入当前系统的日期。</span><br><span class="line"></span><br><span class="line">### 6.4 DATETIME类型</span><br><span class="line"></span><br><span class="line">DATETIME类型在所有的日期时间类型中占用的存储空间最大,总共需要 8 个字节的存储空间。在格式上为DATE类型和TIME类型的组合,可以表示为 YYYY-MM-DD HH:MM:SS ,其中YYYY表示年份,MM表示月份,DD表示日期,HH表示小时,MM表示分钟,SS表示秒。</span><br><span class="line"></span><br><span class="line">在向DATETIME类型的字段插入数据时,同样需要满足一定的格式条件。</span><br><span class="line"></span><br><span class="line">- 以==YYYY-MM-DD HH:MM:SS== 格式或者 ==YYYYMMDDHHMMSS== 格式的字符串插入DATETIME类型的字段时,最小值为1000-01-01 00:00:00,最大值为9999-12-03 23:59:59。</span><br><span class="line">  - 以YYYYMMDDHHMMSS格式的数字插入DATETIME==类型的字段时,会被转化为YYYY-MM-DD</span><br><span class="line">    HH:MM:SS格式。</span><br><span class="line">- 以 ==YY-MM-DD HH:MM:SS== 格式或者 ==YYMMDDHHMMSS== 格式的字符串插入DATETIME类型的字段时,两位</span><br><span class="line">  数的年份规则符合YEAR类型的规则,00到69表示2000到2069;70到99表示1970到1999。</span><br><span class="line">- 使用函数 ==CURRENT_TIMESTAMP()== 和 ==NOW()== ,可以向DATETIME类型的字段插入系统的当前日期和</span><br><span class="line">  时间。</span><br><span class="line"></span><br><span class="line">#### 举例</span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">#创建数据表,表中包含一个DATETIME类型的字段dt。</span><br><span class="line">CREATE TABLE test_datetime1(</span><br><span class="line">dt DATETIME</span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">INSERT INTO test_datetime1</span><br><span class="line">VALUES (&#x27;2021-01-01 06:50:30&#x27;), (&#x27;20210101065030&#x27;);</span><br><span class="line">INSERT INTO test_datetime1</span><br><span class="line">VALUES (&#x27;99-01-01 00:00:00&#x27;), (&#x27;990101000000&#x27;), (&#x27;20-01-01 00:00:00&#x27;),</span><br><span class="line">(&#x27;200101000000&#x27;);</span><br><span class="line">INSERT INTO test_datetime1</span><br><span class="line">VALUES (20200101000000), (200101000000), (19990101000000), (990101000000);</span><br><span class="line">INSERT INTO test_datetime1</span><br><span class="line">VALUES (CURRENT_TIMESTAMP()), (NOW());</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="6-6-开发中经验"><a href="#6-6-开发中经验" class="headerlink" title="6.6 开发中经验"></a>6.6 开发中经验</h3><p>​用得最多的日期时间类型,就是 DATETIME 。虽然 MySQL 也支持 YEAR(年)、 TIME(时间)、DATE(日期),以及 TIMESTAMP 类型,但是在实际项目中,尽量用 DATETIME 类型。因为这个数据类型包括了完整的日期和时间信息,取值范围也最大,使用起来比较方便。毕竟,如果日期时间信息分散在好几个字段,很不容易记,而且查询的时候,SQL 语句也会更加复杂。</p><p>此外,一般存注册时间、商品发布时间等,不建议使用DATETIME存储,而是使用 时间戳 ,因为DATETIME虽然直观,但不便于计算。</p><h2 id="7-文本字符串类型"><a href="#7-文本字符串类型" class="headerlink" title="7. 文本字符串类型"></a>7. 文本字符串类型</h2><p>在实际的项目中,我们还经常遇到一种数据,就是字符串数据。<br>MySQL中,文本字符串总体上分为 CHAR 、 VARCHAR 、 TINYTEXT 、 TEXT 、 MEDIUMTEXT 、LONGTEXT 、 ENUM 、 SET 等类型。</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022346720.png" alt="image-20241102234617169"></p><h3 id="7-1-CHAR与VARCHAR类型"><a href="#7-1-CHAR与VARCHAR类型" class="headerlink" title="7.1 CHAR与VARCHAR类型"></a>7.1 CHAR与VARCHAR类型</h3><p>CHAR和VARCHAR类型都可以存储比较短的字符串。</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022346540.png" alt="image-20241102234637669"></p><h3 id="CHAR类型"><a href="#CHAR类型" class="headerlink" title="CHAR类型:"></a>CHAR类型:</h3><ul><li>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M),则表示长度默认是1个字符。</li><li>如果保存时,数据的实际长度比CHAR类型声明的长度小,则会在 右侧填充 空格以达到指定的长度。当MySQL检索CHAR类型的数据时,CHAR类型的字段会去除尾部的空格。</li><li>定义CHAR类型字段时,声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test_char1(</span><br><span class="line">c1 CHAR,</span><br><span class="line">c2 CHAR(5)</span><br><span class="line">);</span><br><span class="line">DESC test_char1;</span><br></pre></td></tr></table></figure><h3 id="VARCHAR类型"><a href="#VARCHAR类型" class="headerlink" title="VARCHAR类型:"></a>VARCHAR类型:</h3><ul><li>VARCHAR(M) 定义时, 必须指定 长度M,否则报错。</li><li>MySQL4.0版本以下,varchar(20):指的是20字节,如果存放UTF8汉字时,只能存6个(每个汉字3字节) ;MySQL5.0版本以上,varchar(20):指的是20字符。</li><li>检索VARCHAR类型的字段数据时,会保留数据尾部的空格。VARCHAR类型的字段所占用的存储空间为字符串实际长度加1个字节。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE test_varchar3(</span><br><span class="line">NAME VARCHAR(5)</span><br><span class="line">);</span><br><span class="line">INSERT INTO test_varchar3</span><br><span class="line">VALUES(&#x27;尚硅谷&#x27;),(&#x27;尚硅谷教育&#x27;);</span><br></pre></td></tr></table></figure><h3 id="哪些情况使用-CHAR-或-VARCHAR-更好"><a href="#哪些情况使用-CHAR-或-VARCHAR-更好" class="headerlink" title="&#x3D;&#x3D;哪些情况使用 CHAR 或 VARCHAR 更好&#x3D;&#x3D;"></a>&#x3D;&#x3D;哪些情况使用 CHAR 或 VARCHAR 更好&#x3D;&#x3D;</h3><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022348968.png" alt="image-20241102234844766"></p><blockquote><p>情况1: 存储很短的信息。比如门牌号码101,201……这样很短的信息应该用char,因为varchar还要占个byte用于存储信息长度,本来打算节约存储的,结果得不偿失。</p><p>情况2:固定长度的。比如使用uuid作为主键,那用char应该更合适。因为他固定长度,varchar动态根据长度的特性就消失了,而且还要占个长度信息。<br>情况3:十分频繁改变的column。因为varchar每次存储都要有额外的计算,得到长度等工作,如果一个非常频繁改变的,那就要有很多的精力用于计算,而这些对于char来说是不需要的。<br>情况4:具体存储引擎中的情况:</p><ul><li>&#x3D;&#x3D;MyISAM&#x3D;&#x3D; 数据存储引擎和数据列:MyISAM数据表,最好使用固定长度(CHAR)的数据列代替可变长度(VARCHAR)的数据列。这样使得整个表静态化,从而使 &#x3D;&#x3D;数据检索更快&#x3D;&#x3D; ,用空间换时间。</li><li>&#x3D;&#x3D;MEMORY&#x3D;&#x3D; 存储引擎和数据列:MEMORY数据表目前都使用固定长度的数据行存储,因此无论使用CHAR或VARCHAR列都没有关系,两者都是作为CHAR类型处理的。</li><li>&#x3D;&#x3D;InnoDB&#x3D;&#x3D; 存储引擎,建议使用VARCHAR类型。因为对于InnoDB数据表,内部的行存储格式并没有区分固定长度和可变长度列(所有数据行都使用指向数据列值的头指针),而且&#x3D;&#x3D;主要影响性能的因素是数据行使用的存储总量&#x3D;&#x3D;,由于char平均占用的空间多于varchar,所以除了简短并且固定长度的,其他考虑varchar。这样节省空间,对磁盘I&#x2F;O和数据存储总量比较好。</li></ul></blockquote><h3 id="7-2-TEXT类型"><a href="#7-2-TEXT类型" class="headerlink" title="7.2 TEXT类型"></a>7.2 TEXT类型</h3><p>在MySQL中,TEXT用来保存文本类型的字符串,总共包含4种类型,分别为TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT 类型。<br>在向TEXT类型的字段保存和查询数据时,系统自动按照实际长度存储,不需要预先定义长度。这一点和VARCHAR类型相同。<br>每种TEXT类型保存的数据长度和所占用的存储空间不同,如下:</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022350635.png" alt="image-20241102235053468"></p><p>由于实际存储的长度不确定,MySQL 不允许 TEXT 类型的字段做主键。遇到这种情况,你只能采用<br>CHAR(M),或者 VARCHAR(M)。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据表:</span><br><span class="line">CREATE TABLE test_text(</span><br><span class="line">tx TEXT</span><br><span class="line">);</span><br><span class="line">#插入数据</span><br><span class="line">INSERT INTO test_text</span><br><span class="line">VALUES(&#x27;atguigu</span><br><span class="line"> &#x27;);</span><br><span class="line">SELECT CHAR_LENGTH(tx)</span><br><span class="line">FROM test_text; #10</span><br><span class="line"># 说明在保存和查询数据时,并没有删除TEXT类型的数据尾部的空格。</span><br></pre></td></tr></table></figure><h3 id="开发中经验"><a href="#开发中经验" class="headerlink" title="开发中经验:"></a>开发中经验:</h3><p>TEXT文本类型,可以存比较大的文本段,搜索速度稍慢,因此如果不是特别大的内容,建议使用CHAR,VARCHAR来代替。还有TEXT类型不用加默认值,加了也没用。而且text和blob类型的数据删除后容易导致“空洞”,使得文件碎片比较多,所以频繁使用的表不建议包含TEXT类型字段,建议单独分出去,单独用一个表。</p><h2 id="8-ENUM类型"><a href="#8-ENUM类型" class="headerlink" title="8. ENUM类型"></a>8. ENUM类型</h2><p>ENUM类型也叫作枚举类型,ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时,ENUM类型只允许从成员中选取单个值,不能一次选取多个值。<br>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202411022353961.png" alt="image-20241102235312051"></p><ul><li>当ENUM类型包含1~255个成员时,需要1个字节的存储空间;</li><li>当ENUM类型包含256~65535个成员时,需要2个字节的存储空间。</li><li>ENUM类型的成员个数的上限为65535个。</li></ul><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例:"></a>举例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建表如下</span><br><span class="line">CREATE TABLE test_enum(</span><br><span class="line">season ENUM(&#x27;春&#x27;,&#x27;夏&#x27;,&#x27;秋&#x27;,&#x27;冬&#x27;,&#x27;unknow&#x27;)</span><br><span class="line">);</span><br><span class="line"># 添加数据</span><br><span class="line">INSERT INTO test_enum</span><br><span class="line">VALUES(&#x27;春&#x27;),(&#x27;秋&#x27;);</span><br><span class="line"># 忽略大小写</span><br><span class="line">INSERT INTO test_enum</span><br><span class="line">VALUES(&#x27;UNKNOW&#x27;);</span><br><span class="line"># 允许按照角标的方式获取指定索引位置的枚举值</span><br><span class="line">INSERT INTO test_enum</span><br><span class="line">VALUES(&#x27;1&#x27;),(3);</span><br><span class="line"># Data truncated for column &#x27;season&#x27; at row 1</span><br><span class="line">INSERT INTO test_enum</span><br><span class="line">VALUES(&#x27;ab&#x27;);</span><br><span class="line"># 当ENUM类型的字段没有声明为NOT NULL时,插入NULL也是有效的</span><br><span class="line">INSERT INTO test_enum</span><br><span class="line">VALUES(NULL);</span><br></pre></td></tr></table></figure><h2 id="13-小结及选择建议"><a href="#13-小结及选择建议" class="headerlink" title="13. 小结及选择建议"></a>13. 小结及选择建议</h2><p>在定义数据类型时,如果确定是 &#x3D;&#x3D;整数&#x3D;&#x3D; ,就用 &#x3D;&#x3D;INT&#x3D;&#x3D; ; 如果是 &#x3D;&#x3D;小数&#x3D;&#x3D; ,一定用定点数类型&#x3D;&#x3D;DECIMAL(M,D)&#x3D;&#x3D; ; 如果是&#x3D;&#x3D;日期与时间&#x3D;&#x3D;,就用 &#x3D;&#x3D;DATETIME&#x3D;&#x3D; 。<br>这样做的好处是,首先确保你的系统不会因为数据类型定义出错。不过,凡事都是有两面的,可靠性好,并不意味着高效。比如,TEXT 虽然使用方便,但是效率不如 CHAR(M) 和 VARCHAR(M)。</p><p>关于字符串的选择,建议参考如下阿里巴巴的《Java开发手册》规范:</p><h3 id="阿里巴巴《Java开发手册》之MySQL数据库"><a href="#阿里巴巴《Java开发手册》之MySQL数据库" class="headerlink" title="&#x3D;&#x3D;阿里巴巴《Java开发手册》之MySQL数据库:&#x3D;&#x3D;"></a>&#x3D;&#x3D;阿里巴巴《Java开发手册》之MySQL数据库:&#x3D;&#x3D;</h3><ul><li>任何字段如果为非负数,必须是 UNSIGNED</li><li>【 &#x3D;&#x3D;强制&#x3D;&#x3D; 】小数类型为 DECIMAL,禁止使用 FLOAT 和 DOUBLE。说明:在存储的时候,FLOAT 和 DOUBLE 都存在精度损失的问题,很可能在比较值的时候,得到不正确的结果。如果存储的数据范围超过 DECIMAL 的范围,建议将数据拆成整数和小数并分开存储。</li><li>【 &#x3D;&#x3D;强制&#x3D;&#x3D; 】如果存储的字符串长度几乎相等,使用 CHAR 定长字符串类型。</li><li>【 &#x3D;&#x3D;强制&#x3D;&#x3D; 】VARCHAR 是可变长字符串,不预先分配存储空间,长度不要超过 5000。如果存储长度大于此值,定义字段类型为 TEXT,独立出来一张表,用主键来对应,避免影响其它字段索引效率。</li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;数据类型精讲&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-MySQL中的数据类型&quot;&gt;&lt;a href=&quot;#1-MySQL中的数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. MySQL中的数据类型&quot;&gt;&lt;/a&gt;1. MySQL中的数据</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>8.mysql第11章数据处理之增删改</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/8.mysql%E7%AC%AC11%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/8.mysql%E7%AC%AC11%E7%AB%A0%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/</id>
    <published>2019-10-03T08:00:00.000Z</published>
    <updated>2024-11-02T14:36:15.521Z</updated>
    
    <content type="html"><![CDATA[<h1><center>表中数据处理之增删改</center></h1><h2 id="1-增加一条记录"><a href="#1-增加一条记录" class="headerlink" title="1.增加一条记录"></a>1.增加一条记录</h2><h3 id="1-1-语句"><a href="#1-1-语句" class="headerlink" title="1.1 语句"></a>1.1 语句</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&gt;方式一：一次插入一行</span><br><span class="line">&gt;insert into pet(name, owner, species, sex,birth, death)</span><br><span class="line">&gt;values (&#x27;Fluffy&#x27;, &#x27;harold&#x27;, &#x27;Cat&#x27;, &#x27;f&#x27;, 2003, 2010);</span><br><span class="line">&gt;insert into pet(name, owner, species, sex,birth)</span><br><span class="line">      values (&#x27;Claws&#x27;, &#x27;gwen&#x27;, &#x27;Cat&#x27;, &#x27;m&#x27;, 2004);</span><br><span class="line"></span><br><span class="line">&gt;方式二：一次插入多行</span><br><span class="line">&gt;insert into books(name, authors, price, pubdate, note, num)</span><br><span class="line">&gt;values (&#x27;Tal of AAA&#x27;,&#x27;Dickes&#x27;,23,1995,&#x27;novel&#x27;,11),</span><br><span class="line">      (&#x27;EmmaT&#x27;,&#x27;Jane lura&#x27;,35,1993,&#x27;joke&#x27;,22),</span><br><span class="line">      (&#x27;Story of Jane&#x27;,&#x27;Jane Tim&#x27;,40,2001,&#x27;novel&#x27;,0),</span><br><span class="line">      (&#x27;Lovey Day&#x27;,&#x27;George Byron&#x27;,20,2005,&#x27;novel&#x27;,30),</span><br><span class="line">      (&#x27;Old land&#x27;,&#x27;Honore Blade&#x27;,30,2010,&#x27;law&#x27;,0),</span><br><span class="line">      (&#x27;The Battle&#x27;,&#x27;Upton Sara&#x27;,30,1999,&#x27;medicine&#x27;,40),</span><br><span class="line">      (&#x27;Rose Hood&#x27;,&#x27;Richard haggard&#x27;,28,2008,&#x27;cartoon&#x27;,28);</span><br><span class="line">      </span><br><span class="line">&gt;一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句,但是多行的INSERT语句</span><br><span class="line">&gt;在处理过程中 效率更高 。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句</span><br><span class="line">&gt;快,所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。       </span><br><span class="line">      </span><br><span class="line">&gt;方式三：直接复制一个已有的表</span><br><span class="line">INSERT INTO emp2(employee_id, last_name,email ,salary,hire_date ,commission_pct)</span><br><span class="line">&gt;SELECT employee_id, last_name, email,hire_date,salary, commission_pct</span><br><span class="line">&gt;FROM  atguigudb.employees</span><br><span class="line"></span><br><span class="line">&gt;在 INSERT 语句中加入子查询。</span><br><span class="line">&gt;不必书写 VALUES 子句。</span><br><span class="line">&gt;子查询中的值列表应与 INSERT 子句中的列名对应。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;方式四：直接复制一个已有表，但是不要其中的数据，只要字段以及其的类型</span><br><span class="line">INSERT INTO emp2(employee_id, last_name,email ,salary,hire_date ,commission_pct)</span><br><span class="line">&gt;SELECT employee_id, last_name, email,hire_date,salary, commission_pct</span><br><span class="line">&gt;FROM atguigudb.employees</span><br><span class="line">&gt;where 1=2;</span><br></pre></td></tr></table></figure><ul><li>小结:<br> VALUES 也可以写成 VALUE ,但是VALUES是标准写法。<br> 字符和日期型数据应包含在单引号中。</li></ul></blockquote><h2 id="2-更新一条记录"><a href="#2-更新一条记录" class="headerlink" title="2. 更新一条记录"></a>2. 更新一条记录</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;UPDATE table_name</span><br><span class="line">&gt;SET column1=value1, column2=value2, ... , column=valuen</span><br><span class="line">&gt;[WHERE condition]</span><br><span class="line"></span><br><span class="line">&gt;#更改数据,一次更新多条数据</span><br><span class="line">&gt;update student</span><br><span class="line">&gt;set class=&#x27;五年级一班&#x27;,num=&#x27;501025&#x27;</span><br><span class="line">&gt;where id=2;</span><br><span class="line"></span><br><span class="line">&gt;可以一次更新多条数据。</span><br><span class="line">&gt;如果需要回滚数据,需要保证在DML前,进行设置:SET AUTOCOMMIT = FALSE;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-删除记录"><a href="#3-删除记录" class="headerlink" title="3.删除记录"></a>3.删除记录</h2><h3 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;DELETE FROM table_name [WHERE &lt;condition&gt;];</span><br><span class="line">&gt;table_name指定要执行删除操作的表;“[WHERE ]”为可选参数,指定删除条件,如果没有WHERE子句,</span><br><span class="line">&gt;DELETE语句将删除表中的所有记录。</span><br><span class="line"></span><br><span class="line">&gt;delete 操作删除数据，是可以回滚的，前提是在当前会话中，提前设置了SET AUTOCOMMIT = FALSE;  当然也只能回滚到前一条操作。</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"># 第11章数据处理之增删改</span><br><span class="line">#创建数据库</span><br><span class="line">create database IF not exists test;</span><br><span class="line">#删除数据库</span><br><span class="line">drop database if exists test;</span><br><span class="line"></span><br><span class="line"># 创建数据库同时设置字符集</span><br><span class="line">create database if not exists test1 character set utf8mb4;</span><br><span class="line"></span><br><span class="line">#使用数据库</span><br><span class="line">use test1;</span><br><span class="line"></span><br><span class="line">#修改数据库</span><br><span class="line">alter database test character set gbk;</span><br><span class="line"># 查看指定数据库信息</span><br><span class="line">show create database test;</span><br><span class="line"></span><br><span class="line"># 查看当前mysql服务器上面，有多少数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 删除数据库</span><br><span class="line">drop database if exists test;</span><br><span class="line"></span><br><span class="line">#使用test1数据库</span><br><span class="line">use test1;</span><br><span class="line"># 创建表</span><br><span class="line">create table empl(</span><br><span class="line">    id int primary key auto_increment, # 主键约束 就包括 （非空 唯一） auto_increment自动递增</span><br><span class="line">    name varchar(15) not null ,</span><br><span class="line">    age int not null ,</span><br><span class="line">    email varchar(10) unique , #邮件不能重复</span><br><span class="line">    phone varchar(11) unique #手机号不能重复</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 查看表</span><br><span class="line">desc empl;</span><br><span class="line"></span><br><span class="line">#给表中插入数据</span><br><span class="line">insert into empl ( name, age, email, phone)</span><br><span class="line">values (&#x27;张三&#x27;,15,&#x27;71@qq.com&#x27;,&#x27;13456789920&#x27;);</span><br><span class="line"></span><br><span class="line">insert into empl ( name, age, email, phone)</span><br><span class="line">values (&#x27;张三&#x27;,15,&#x27;rtwrt@qq.com&#x27;,&#x27;13443256789920&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">desc empl;</span><br><span class="line"></span><br><span class="line"># 修改表（修改的是表中的列）（对未创建表。的约束不能修改）</span><br><span class="line"># 修改表中某个字段名</span><br><span class="line">alter table empl</span><br><span class="line">modify phone varchar(15) unique;</span><br><span class="line"></span><br><span class="line">#增加列</span><br><span class="line">alter table empl</span><br><span class="line">add addres Varchar(75)  default &#x27;暂时未填写&#x27;; # 增加地址列，同时添加唯一约束，设置默认值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除某一列</span><br><span class="line">alter table empl</span><br><span class="line">drop addres;</span><br><span class="line"></span><br><span class="line"># 查询表中的数据</span><br><span class="line">select * from empl;</span><br><span class="line"></span><br><span class="line"># 删除表中的数据</span><br><span class="line">delete from empl;</span><br><span class="line"></span><br><span class="line"># 删除表</span><br><span class="line">drop table empl; # 直接将整个表从数据库中删除，且不能恢复</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#------------------------------DML的操作---------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 数据处理之增删改</span><br><span class="line"></span><br><span class="line"># 如果需要回滚数据,需要保证在DML前,进行设置:</span><br><span class="line">SET AUTOCOMMIT = FALSE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 增加一条数据</span><br><span class="line"># 1.为表的指定字段插入数据,就是在INSERT语句中只向部分字段中插入值,而其他字段的值为表定义时的默认值。</span><br><span class="line"># 在 INSERT 子句中随意列出列名,但是一旦列出,VALUES中要插入的value1,....valuen需要与 column1,...columnn列一一对应。如果类型不同,将无法插入,并且MySQL会产生错误。</span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(15) not null ,</span><br><span class="line">    class varchar(10) not null ,</span><br><span class="line">    num int  unique #学号可以为空</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"># 1.插入数据，字段和值要匹配</span><br><span class="line">insert into student( name, class, num)</span><br><span class="line">values (&#x27;小明&#x27;,&#x27;一年级三班&#x27;,103015);</span><br><span class="line"></span><br><span class="line">insert into student( name, class)</span><br><span class="line">values (&#x27;小明&#x27;,&#x27;一年级三班&#x27;);</span><br><span class="line"></span><br><span class="line"># 2.同时插入多条记录</span><br><span class="line">/**</span><br><span class="line">  INSERT INTO table_name</span><br><span class="line">VALUES</span><br><span class="line">(value1 [,value2, ..., valuen]),</span><br><span class="line">(value1 [,value2, ..., valuen]),</span><br><span class="line">......</span><br><span class="line">(value1 [,value2, ..., valuen]);</span><br><span class="line"></span><br><span class="line">  或者</span><br><span class="line">  INSERT INTO table_name(column1 [, column2, ..., columnn])</span><br><span class="line">VALUES</span><br><span class="line">(value1 [,value2, ..., valuen]),</span><br><span class="line">(value1 [,value2, ..., valuen]),</span><br><span class="line">......</span><br><span class="line">(value1 [,value2, ..., valuen]);</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  小结：</span><br><span class="line">  VALUES 也可以写成 VALUE ,但是VALUES是标准写法。</span><br><span class="line">    字符和日期型数据应包含在单引号中。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  1.3 方式2:将查询结果插入到表中</span><br><span class="line">INSERT还可以将SELECT语句查询的结果插入到表中,此时不需要把每一条记录的值一个一个输入,只需</span><br><span class="line">要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入</span><br><span class="line">多行。</span><br><span class="line">基本语法格式如下:</span><br><span class="line"></span><br><span class="line">INSERT INTO 目标表名</span><br><span class="line">(tar_column1 [, tar_column2, ..., tar_columnn])</span><br><span class="line">SELECT</span><br><span class="line">(src_column1 [, src_column2, ..., src_columnn])</span><br><span class="line">FROM 源表名</span><br><span class="line">[WHERE condition]</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line">  一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句,但是多行的INSERT语句</span><br><span class="line">在处理过程中 效率更高 。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句</span><br><span class="line">快,所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"># 复制一张表过来(只要字段，不要数据)</span><br><span class="line">create table emp2</span><br><span class="line">select * from atguigudb.employees where 1=2;</span><br><span class="line"></span><br><span class="line">alter table emp2</span><br><span class="line">modify salary int;</span><br><span class="line"></span><br><span class="line">desc emp2;</span><br><span class="line">select * from emp2;</span><br><span class="line"></span><br><span class="line"># emp2数据表，快速插入数据(将employees)表中数据全部都插入进来了</span><br><span class="line">insert into emp2</span><br><span class="line">select * from atguigudb.employees ;</span><br><span class="line"></span><br><span class="line">INSERT INTO emp2(employee_id, last_name,email ,salary,hire_date ,commission_pct)</span><br><span class="line">SELECT employee_id, last_name, email,hire_date,salary, commission_pct</span><br><span class="line">FROM</span><br><span class="line"> atguigudb.employees</span><br><span class="line">WHERE</span><br><span class="line"> job_id LIKE &#x27;%REP%&#x27;;</span><br><span class="line"></span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更改数据,一次更新多条数据</span><br><span class="line">update student</span><br><span class="line">set class=&#x27;五年级一班&#x27;,num=&#x27;501025&#x27;</span><br><span class="line">where id=2;</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line">rollback ; # 回滚（只能回滚到上一次提交之后）</span><br><span class="line"></span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line">#----------------------------------------------</span><br><span class="line"></span><br><span class="line"># 删除一条数据</span><br><span class="line">delete from student</span><br><span class="line">where id=1;</span><br><span class="line"></span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"># 清空表中的所有数据</span><br><span class="line">delete from student;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DDL-和-DML综合案列"><a href="#DDL-和-DML综合案列" class="headerlink" title="DDL 和 DML综合案列"></a>DDL 和 DML综合案列</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#------------DDL和DML的综合练习----------------------------</span><br><span class="line">#练习</span><br><span class="line"># 1.创建数据库</span><br><span class="line">create database if not exists test01_library character set utf8mb4;</span><br><span class="line">#查看数据库信息</span><br><span class="line">show create database test01_library;</span><br><span class="line"></span><br><span class="line">#使用数库</span><br><span class="line">use test01_library;</span><br><span class="line"># 2.创建表 books</span><br><span class="line">create table books(</span><br><span class="line">    id int primary key auto_increment comment &#x27;书编号&#x27;,#主键自增</span><br><span class="line">    name varchar(50) not null unique comment &#x27;书名&#x27;,</span><br><span class="line">    authors varchar(100) not null comment &#x27;作者&#x27;,</span><br><span class="line">    price float not null comment &#x27;价格&#x27;,</span><br><span class="line">    pubdate year comment &#x27;出版日期 格式 YYYY&#x27;,</span><br><span class="line">    note varchar(100) comment &#x27;说明&#x27;,</span><br><span class="line">    num int not null comment &#x27;库存&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">desc books;</span><br><span class="line"></span><br><span class="line">select * from books;</span><br><span class="line"></span><br><span class="line"># 向books表中插入记录</span><br><span class="line"># # 1)不指定字段名称,插入第一条记录</span><br><span class="line">insert into books</span><br><span class="line">values (1,&#x27;成功学&#x27;,&#x27;张三&#x27;,65.80,2024,&#x27;这是一部现代哲学史诗&#x27;,500);</span><br><span class="line"># 2)指定所有字段名称,插入第二记录</span><br><span class="line">insert into books (id, name, authors, price, pubdate, note, num)</span><br><span class="line">values (2,&#x27;前行者&#x27;,&#x27;李四&#x27;,99.2,2001,&#x27;前进的道路总有坎坷，只有强者才能勇攀高峰&#x27;,800);</span><br><span class="line"># 3)同时插入多条记录(剩下的所有记录)</span><br><span class="line">insert into books(name, authors, price, pubdate, note, num)</span><br><span class="line">values (&#x27;铜墙铁壁&#x27;,&#x27;王伟&#x27;,99.2,2001,&#x27;铜墙铁壁是保护色&#x27;,264),</span><br><span class="line">       (&#x27;路途&#x27;,&#x27;增益&#x27;,99.2,2001,&#x27;路途犹如迷途，人生之道就在其中&#x27;,545),</span><br><span class="line">       (&#x27;高高兴兴&#x27;,&#x27;王晓燕&#x27;,99.2,2001,&#x27;高高兴兴干好每一件事&#x27;,851);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into books(name, authors, price, pubdate, note, num)</span><br><span class="line">values (&#x27;Tal of AAA&#x27;,&#x27;Dickes&#x27;,23,1995,&#x27;novel&#x27;,11),</span><br><span class="line">       (&#x27;EmmaT&#x27;,&#x27;Jane lura&#x27;,35,1993,&#x27;joke&#x27;,22),</span><br><span class="line">       (&#x27;Story of Jane&#x27;,&#x27;Jane Tim&#x27;,40,2001,&#x27;novel&#x27;,0),</span><br><span class="line">       (&#x27;Lovey Day&#x27;,&#x27;George Byron&#x27;,20,2005,&#x27;novel&#x27;,30),</span><br><span class="line">       (&#x27;Old land&#x27;,&#x27;Honore Blade&#x27;,30,2010,&#x27;law&#x27;,0),</span><br><span class="line">       (&#x27;The Battle&#x27;,&#x27;Upton Sara&#x27;,30,1999,&#x27;medicine&#x27;,40),</span><br><span class="line">       (&#x27;Rose Hood&#x27;,&#x27;Richard haggard&#x27;,28,2008,&#x27;cartoon&#x27;,28);</span><br><span class="line"></span><br><span class="line">select * from books where note=&#x27;novel&#x27;;</span><br><span class="line"></span><br><span class="line"># 4、将小说类型(novel)的书的价格都增加5。</span><br><span class="line">update books set price=price+5 where note=&#x27;novel&#x27;;</span><br><span class="line"></span><br><span class="line"># 5、将名称为EmmaT的书的价格改为40,并将说明改为drama。</span><br><span class="line">update books</span><br><span class="line">set price=40,note=&#x27;drama&#x27;</span><br><span class="line">where name=&#x27;EmmaT&#x27;;</span><br><span class="line"></span><br><span class="line">select * from books where name=&#x27;EmmaT&#x27;;</span><br><span class="line"></span><br><span class="line"># 6、删除库存为0的记录。</span><br><span class="line">delete from books where num=&#x27;0&#x27;;</span><br><span class="line">select * from books;</span><br><span class="line"></span><br><span class="line"># 7、统计书名中包含a字母的书</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from books</span><br><span class="line">where name like &#x27;%a%&#x27;;</span><br><span class="line"></span><br><span class="line"># 8、统计书名中包含a字母的书的数量和库存总量</span><br><span class="line">select count(1) , sum(num)</span><br><span class="line">from books</span><br><span class="line">where name like &#x27;%a%&#x27;;</span><br><span class="line"></span><br><span class="line"># 9、找出“novel”类型的书,按照价格降序排列</span><br><span class="line">select * from books</span><br><span class="line">where note=&#x27;novel&#x27;</span><br><span class="line">order by price desc;</span><br><span class="line"></span><br><span class="line"># 10、查询图书信息,按照库存量降序排列,如果库存量相同的按照note升序排列</span><br><span class="line">select *</span><br><span class="line">from books</span><br><span class="line">order by num desc , note asc;</span><br><span class="line"></span><br><span class="line"># 11、按照note分类统计书的数量</span><br><span class="line">select note, count(1)</span><br><span class="line">from books</span><br><span class="line">group by note;</span><br><span class="line"></span><br><span class="line"># 12、按照note分类统计书的库存量,显示库存量超过30本的</span><br><span class="line"></span><br><span class="line">select note,sum(num)</span><br><span class="line">from books</span><br><span class="line">group by note</span><br><span class="line">having sum(num)&gt;30;</span><br><span class="line"></span><br><span class="line"># 13、查询所有图书,每页显示5本,显示第二页</span><br><span class="line"></span><br><span class="line">select * from books;</span><br><span class="line"></span><br><span class="line">select * from books</span><br><span class="line">limit 5,5;</span><br><span class="line"># 14、按照note分类统计书的库存量,显示库存量最多的</span><br><span class="line">select note,sum(num)</span><br><span class="line">from books</span><br><span class="line">group by note</span><br><span class="line">order by sum(num) desc</span><br><span class="line">limit 0,1;</span><br><span class="line"></span><br><span class="line"># 15、查询书名达到10个字符的书,不包括里面的空格</span><br><span class="line">select * from books</span><br><span class="line"></span><br><span class="line">where char_length(replace(name,&#x27; &#x27;,&#x27;&#x27;))&gt;=10;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 16、查询书名和类型,其中note值为novel显示小说,law显示法律,medicine显示医药,cartoon显示卡通,joke显示笑话</span><br><span class="line">select name as &#x27;书名&#x27;,</span><br><span class="line">       case note when &#x27;novel&#x27;       then &#x27;小说&#x27;</span><br><span class="line">                 when &#x27;law&#x27;         then &#x27;法律&#x27;</span><br><span class="line">                 when  &#x27;medicine&#x27;   then &#x27;医药&#x27;</span><br><span class="line">                 when &#x27;cartoon&#x27;     then &#x27;卡通&#x27;</span><br><span class="line">                 when &#x27;joke&#x27;        then &#x27;笑话&#x27;</span><br><span class="line">       else &#x27;普通书籍&#x27;</span><br><span class="line">       end as &#x27;类型&#x27;</span><br><span class="line">from books;</span><br><span class="line"></span><br><span class="line"># 17、查询书名、库存,其中num值超过30本的,显示滞销,大于0并低于10的,显示畅销,为0的显示需要无货</span><br><span class="line">select * from books;</span><br><span class="line">select name , num , case  when num&gt;30 then &#x27;滞销&#x27;</span><br><span class="line">                             when num&gt;0 and num&lt;10 then &#x27;畅销&#x27;</span><br><span class="line">                             when num=0 then &#x27;需要补货&#x27;</span><br><span class="line">                             else &#x27;正常&#x27;</span><br><span class="line">                             end as &#x27;状态&#x27;</span><br><span class="line">from books;</span><br><span class="line"></span><br><span class="line"># 18、统计每一种note的库存量,并合计总量</span><br><span class="line"># 生成汇总行 WITH ROLLUP</span><br><span class="line">select IFNULL(note,&#x27;合计库存总量&#x27;) note,sum(num)</span><br><span class="line">from books</span><br><span class="line">group by note WITH ROLLUP;</span><br><span class="line"></span><br><span class="line"># 19、统计每一种note的数量,并合计总量</span><br><span class="line">select IFNULL(note,&#x27;合计总量&#x27;), count(note)</span><br><span class="line">from books</span><br><span class="line">group by note with rollup ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 20、统计库存量前三名的图书</span><br><span class="line">select * from books</span><br><span class="line">order by num desc</span><br><span class="line">limit 0,3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 21、找出最早出版的一本书</span><br><span class="line">select *</span><br><span class="line">from books</span><br><span class="line">order by pubdate</span><br><span class="line">limit 0,1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 22、找出novel中价格最高的一本书</span><br><span class="line">select * from books</span><br><span class="line">where note=&#x27;novel&#x27;</span><br><span class="line">order by price desc</span><br><span class="line">limit 0,1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 23、找出书名中字数最多的一本书,不含空格</span><br><span class="line">SELECT * FROM books ORDER BY CHAR_LENGTH(REPLACE(name,&#x27; &#x27;,&#x27;&#x27;)) DESC LIMIT 0,1;</span><br></pre></td></tr></table></figure><h2 id="课后练习题"><a href="#课后练习题" class="headerlink" title="课后练习题"></a>课后练习题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#-----------------------数据处理之增删改课后练习题------------------------------------------------------------</span><br><span class="line">#-----------------------练习一---------------------------------</span><br><span class="line">#1. 创建数据库dbtest11</span><br><span class="line">create database if not exists dbtest11;</span><br><span class="line">use dbtest11;</span><br><span class="line">#2. 运行以下脚本创建表my_employees</span><br><span class="line">CREATE TABLE my_employees(</span><br><span class="line">id INT(10),</span><br><span class="line">first_name VARCHAR(10),</span><br><span class="line">last_name VARCHAR(10),</span><br><span class="line">userid VARCHAR(10),</span><br><span class="line">salary DOUBLE(10,2)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">id INT,</span><br><span class="line">userid VARCHAR(10),</span><br><span class="line">department_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#3. 显示表my_employees的结构</span><br><span class="line">desc my_employees;</span><br><span class="line"></span><br><span class="line">#4. 向my_employees表中插入下列数据</span><br><span class="line">/**</span><br><span class="line">ID  FIRST_NAME  LAST_NAME   USERID  SALARY</span><br><span class="line">1   patel   Ralph   Rpatel  895</span><br><span class="line">2   Dancs   Betty   Bdancs  860</span><br><span class="line">3   Biri    Ben Bbiri   1100</span><br><span class="line">4   Newman  Chad    Cnewman 750</span><br><span class="line">5   Ropeburn    Audrey  Aropebur1550</span><br><span class="line"> */</span><br><span class="line">select * from my_employees;</span><br><span class="line">insert into my_employees(first_name, last_name, userid, salary)</span><br><span class="line">values (&#x27;patel&#x27;, &#x27;Ralph&#x27;, &#x27;Rpatel&#x27;, 895),</span><br><span class="line">       (&#x27;Dancs&#x27;, &#x27;Betty&#x27;, &#x27;Bdancs&#x27;, 860),</span><br><span class="line">       (&#x27;Biri&#x27;, &#x27;Ben&#x27;, &#x27;Bbiri&#x27;, 1100),</span><br><span class="line">       (&#x27;Newman&#x27;, &#x27;Chad&#x27;, &#x27;Cnewman&#x27;, 750),</span><br><span class="line">       (&#x27;Ropeburn&#x27;, &#x27;Audrey&#x27;, &#x27;Aropebur&#x27;, 1550);</span><br><span class="line"></span><br><span class="line">delete from my_employees;</span><br><span class="line"></span><br><span class="line">alter table my_employees</span><br><span class="line">modify id int primary key auto_increment;</span><br><span class="line"></span><br><span class="line">desc my_employees;</span><br><span class="line">#5. 向users表中插入数据</span><br><span class="line">/**</span><br><span class="line">1 Rpatel 10</span><br><span class="line">2 Bdancs 10</span><br><span class="line">3 Bbiri 20</span><br><span class="line">4 Cnewman 30</span><br><span class="line">5 Aropebur 40</span><br><span class="line"> */</span><br><span class="line">insert into users(id, userid, department_id)</span><br><span class="line">values (1, &#x27;Rpatel&#x27;, 10),</span><br><span class="line">       (2, &#x27;Bdancs&#x27;, 10),</span><br><span class="line">       (3, &#x27;Bbiri&#x27;, 20),</span><br><span class="line">       (4, &#x27;Cnewman&#x27;, 30),</span><br><span class="line">       (5, &#x27;Aropebur&#x27;, 40);</span><br><span class="line"></span><br><span class="line">#6. 将3号员工的last_name修改为“drelxer”</span><br><span class="line">update my_employees</span><br><span class="line">set last_name=&#x27;drelxer&#x27;</span><br><span class="line">where id=3;</span><br><span class="line"></span><br><span class="line">select * from my_employees;</span><br><span class="line"></span><br><span class="line">#7. 将所有工资少于900的员工的工资修改为1000</span><br><span class="line">select * from my_employees;</span><br><span class="line"></span><br><span class="line">update my_employees</span><br><span class="line">set salary=1000</span><br><span class="line">where salary&lt;900;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#8. 将userid为Bbiri的user表和my_employees表的记录全部删除</span><br><span class="line">DELETE u,e</span><br><span class="line">FROM users u</span><br><span class="line">JOIN my_employees e ON u.`userid`=e.`Userid`</span><br><span class="line">WHERE u.`userid`=&#x27;Bbiri&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete from my_employees</span><br><span class="line">where userid=&#x27;Bbiri&#x27;;</span><br><span class="line"></span><br><span class="line">delete from users</span><br><span class="line">where userid=&#x27;Bbiri&#x27;;</span><br><span class="line"></span><br><span class="line">select * from users;</span><br><span class="line">#9. 删除my_employees、users表所有数据</span><br><span class="line">delete from my_employees;</span><br><span class="line">delete from users;</span><br><span class="line"></span><br><span class="line">#10. 检查所作的修正</span><br><span class="line">select * from my_employees;</span><br><span class="line">select * from users;</span><br><span class="line"></span><br><span class="line">#11. 清空表my_employees</span><br><span class="line">#这个清空不能回滚了</span><br><span class="line">truncate table my_employees;</span><br><span class="line"></span><br><span class="line">#-----------------------练习二---------------------------------</span><br><span class="line"># 1. 使用现有数据库dbtest11</span><br><span class="line">use dbtest11;</span><br><span class="line"># 2. 创建表pet</span><br><span class="line">create table if not exists pet(</span><br><span class="line">    id bigint primary key auto_increment,</span><br><span class="line">    name varchar(20) comment &#x27;宠物名称&#x27;,</span><br><span class="line">    owner varchar(20) not null unique comment &#x27;宠物主人&#x27;,</span><br><span class="line">    species varchar(20) not null comment &#x27;种类&#x27;,</span><br><span class="line">    birth year not null comment &#x27;出生日期&#x27;,</span><br><span class="line">    death year not null comment &#x27;死亡日期&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alter table pet</span><br><span class="line">modify death year comment &#x27;死亡日期&#x27;;</span><br><span class="line"></span><br><span class="line">alter table pet</span><br><span class="line">modify owner varchar(20) comment &#x27;宠物主人&#x27;;</span><br><span class="line"></span><br><span class="line">alter table pet</span><br><span class="line">add sex char(1) not null comment &#x27;性别&#x27;;</span><br><span class="line"></span><br><span class="line">alter table pet</span><br><span class="line">modify sex char(1) not null comment &#x27;性别&#x27;  after species;</span><br><span class="line"></span><br><span class="line">desc pet;</span><br><span class="line"></span><br><span class="line">select * from pet;</span><br><span class="line"># 3. 添加记录</span><br><span class="line">insert into pet(name, owner, species, sex,birth, death)</span><br><span class="line">values (&#x27;Fluffy&#x27;, &#x27;harold&#x27;, &#x27;Cat&#x27;, &#x27;f&#x27;, 2003, 2010);</span><br><span class="line">insert into pet(name, owner, species, sex,birth)</span><br><span class="line">       values (&#x27;Claws&#x27;, &#x27;gwen&#x27;, &#x27;Cat&#x27;, &#x27;m&#x27;, 2004);</span><br><span class="line">insert into pet(name, species, sex,birth)</span><br><span class="line">       values (&#x27;Buffy&#x27;, &#x27;Dog&#x27;, &#x27;f&#x27;, 2009);</span><br><span class="line">insert into pet(name, owner, species, sex,birth)</span><br><span class="line">       values (&#x27;Fang&#x27;, &#x27;benny&#x27;, &#x27;Dog &#x27;, &#x27;m&#x27;, 2000);</span><br><span class="line">insert into pet(name, owner, species, sex,birth, death)</span><br><span class="line">       values (&#x27;bowser&#x27;, &#x27;diane&#x27;, &#x27;Dog&#x27;, &#x27;m&#x27;, 2003, 2009);</span><br><span class="line">insert into pet(name, species, sex,birth)</span><br><span class="line">       values (&#x27;Chirpy&#x27;, &#x27;Bird&#x27; ,&#x27;f&#x27;, 2008);</span><br><span class="line"></span><br><span class="line">select * from pet;</span><br><span class="line"></span><br><span class="line"># 4. 添加字段:主人的生日owner_birth DATE类型。</span><br><span class="line">alter table pet</span><br><span class="line">add owner_birth date comment &#x27;主人生日&#x27;;</span><br><span class="line"></span><br><span class="line">desc pet;</span><br><span class="line"># 5. 将名称为Claws的猫的主人改为kevin</span><br><span class="line">update pet</span><br><span class="line">set owner=&#x27;kevin&#x27;</span><br><span class="line">where name=&#x27;Claws&#x27;;</span><br><span class="line"></span><br><span class="line">select * from pet;</span><br><span class="line"># 6. 将没有死的狗的主人改为duck</span><br><span class="line">/*alter table pet</span><br><span class="line">modify owner varchar(20) comment &#x27;宠物主人&#x27;;</span><br><span class="line">desc pet;*/</span><br><span class="line"></span><br><span class="line">update pet</span><br><span class="line">set owner=&#x27;duck&#x27;</span><br><span class="line">where death is null;</span><br><span class="line"></span><br><span class="line">select * from pet</span><br><span class="line">where death is null;</span><br><span class="line"></span><br><span class="line"># 7. 查询没有主人的宠物的名字;</span><br><span class="line">select * from pet</span><br><span class="line">where owner is null ;</span><br><span class="line"></span><br><span class="line"># 8. 查询已经死了的cat的姓名,主人,以及去世时间;</span><br><span class="line">select * from pet;</span><br><span class="line"></span><br><span class="line">select name,owner,death from pet</span><br><span class="line">where  death is not null and species=&#x27;Cat&#x27;;</span><br><span class="line"></span><br><span class="line"># 9. 删除已经死亡的狗</span><br><span class="line">delete from pet</span><br><span class="line">where species=&#x27;Dog&#x27; and death is not null;</span><br><span class="line"></span><br><span class="line"># 10. 查询所有宠物信息</span><br><span class="line">select * from pet;</span><br><span class="line"></span><br><span class="line">#-----------------------练习三---------------------------------</span><br><span class="line"># 1. 使用已有的数据库dbtest11</span><br><span class="line">use dbtest11;</span><br><span class="line"># 2. 创建表employee,并添加记录</span><br><span class="line">create table  if not exists employee(</span><br><span class="line">    id int primary key comment &#x27;id&#x27;,</span><br><span class="line">    name varchar(20) comment &#x27;姓名&#x27;,</span><br><span class="line">    sex char(1) comment &#x27;性别&#x27;,</span><br><span class="line">    tel varchar(20) comment &#x27;联系电话&#x27;,</span><br><span class="line">    addr varchar(50) comment &#x27;地址&#x27;,</span><br><span class="line">    salary decimal(10,2) comment &#x27;工资&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">desc employee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into employee(id, name, sex, tel, addr, salary)</span><br><span class="line">values (10001, &#x27;张一一&#x27;, &#x27;男&#x27;, &#x27;13456789000&#x27;, &#x27;山东青岛&#x27;, 1001.58),</span><br><span class="line">       (10002, &#x27;刘小红&#x27;, &#x27;女&#x27;, 13454319000, &#x27;河北保定&#x27;, 1201.21),</span><br><span class="line">       (10003, &#x27;李四&#x27;, &#x27;男&#x27;, 0751 - 1234567, &#x27;广东佛山&#x27;, 1004.11),</span><br><span class="line">       (10004, &#x27;刘小强&#x27;, &#x27;男&#x27;, 0755 - 5555555, &#x27;广东深圳&#x27;, 1501.23),</span><br><span class="line">       (10005, &#x27;王艳&#x27;, &#x27;女 &#x27;, 020 - 1232133, &#x27;广东广州&#x27;, 1405.16);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3. 查询出薪资在1200~1300之间的员工信息。</span><br><span class="line">select * from employee;</span><br><span class="line"></span><br><span class="line">select * from employee</span><br><span class="line">where salary between 1200 and 1300;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 4. 查询出姓“刘”的员工的工号,姓名,家庭住址。</span><br><span class="line">select * from employee</span><br><span class="line">where name like &#x27;刘%&#x27;;</span><br><span class="line"></span><br><span class="line"># 5. 将“李四”的家庭住址改为“广东韶关”</span><br><span class="line">update employee</span><br><span class="line">set addr=&#x27;广东韶关&#x27;</span><br><span class="line">where name=&#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">select * from employee;</span><br><span class="line"># 6. 查询出名字中带“小”的员工</span><br><span class="line">select * from employee</span><br><span class="line">where name like &#x27;%小%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;表中数据处理之增删改&lt;/center&gt;&lt;/h1&gt;



&lt;h2 id=&quot;1-增加一条记录&quot;&gt;&lt;a href=&quot;#1-增加一条记录&quot; class=&quot;headerlink&quot; title=&quot;1.增加一条记录&quot;&gt;&lt;/a&gt;1.增加一条记录&lt;/h2&gt;&lt;h3 id=&quot;1</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>7.mysql第10章创建和管理（数据库与表）</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/7.mysql%E7%AC%AC10%E7%AB%A0%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%A1%A8%EF%BC%89/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/7.mysql%E7%AC%AC10%E7%AB%A0%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%A1%A8%EF%BC%89/</id>
    <published>2019-10-03T07:00:00.000Z</published>
    <updated>2024-10-31T17:35:09.506Z</updated>
    
    <content type="html"><![CDATA[<h1><center>创建和管理表</center></h1><h2 id="2-创建和管理数据库"><a href="#2-创建和管理数据库" class="headerlink" title="2.-创建和管理数据库"></a>2.-创建和管理数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  数据库的创建，修改与删除.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"># 1.创建数据库</span><br><span class="line">create database  test1 ;</span><br><span class="line"># 2.:判断数据库是否已经存在,不存在则创建数据库( 推荐 ) 指定字符集</span><br><span class="line">create database IF NOT EXISTS test2 character set utf8mb4;</span><br><span class="line"># 3.查看所有数据库</span><br><span class="line">show databases;</span><br><span class="line"># 4.查看当前正在使用的数据库</span><br><span class="line">select database();</span><br><span class="line"># 使用指定数据库</span><br><span class="line">use test2;</span><br><span class="line"># 5. 查看指定数据库下面的所有表</span><br><span class="line">show tables from atguigudb;</span><br><span class="line"># 6.查看数据库的创建信息</span><br><span class="line">show create database test2;</span><br><span class="line"></span><br><span class="line"># 7.更改数据库字符集</span><br><span class="line">alter database test2 character set gbk;</span><br><span class="line"></span><br><span class="line">show create database test2;</span><br><span class="line"># 8.删除指定数据库(不可逆)</span><br><span class="line">drop database test2;</span><br><span class="line"># 8.1 删除数据库，如果存在</span><br><span class="line">drop database if exists test2;</span><br></pre></td></tr></table></figure><h3 id="1-创建和管理表"><a href="#1-创建和管理表" class="headerlink" title="1-.创建和管理表"></a>1-.创建和管理表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">create database if not exists  test2 character set utf8mb4;</span><br><span class="line">use test2;</span><br><span class="line">show create database test2;</span><br><span class="line"></span><br><span class="line"># 1.创建表（创建的是一张空白表，白手起家）</span><br><span class="line">create table if not exists student (</span><br><span class="line">    id int not null unique primary key , # 非空约束，唯一约束，主键约束</span><br><span class="line">    name varchar(15) not null , # 非空约束</span><br><span class="line">    age int not null ,</span><br><span class="line">    gender enum(&#x27;男&#x27;,&#x27;女&#x27;),</span><br><span class="line">    identity  int not null unique</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line">delete from student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2.插入数据</span><br><span class="line">insert into student (id, name, age, gender, identity)</span><br><span class="line">values (1,&#x27;小明&#x27;,15,&#x27;男&#x27;,&#x27;413026185502654897&#x27;);</span><br><span class="line"></span><br><span class="line">insert into student (id, name, age, gender, identity)</span><br><span class="line">values (2,&#x27;小绿&#x27;,29,&#x27;女&#x27;,&#x27;4130265641502654897&#x27;);</span><br><span class="line"></span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-创建一张表的两种方式"><a href="#2-创建一张表的两种方式" class="headerlink" title="2-.创建一张表的两种方式"></a>2-.创建一张表的两种方式</h2><ul><li>2.1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#2.创建一张表，表数据从已知表数据获取（相当于复制表）</span><br><span class="line">#2.1.复制一张表</span><br><span class="line">CREATE TABLE stu1 AS SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">select * from stu1;</span><br><span class="line"></span><br><span class="line">#2.2.创建的表，只有字段，没有值</span><br><span class="line">CREATE TABLE stu2 AS SELECT * FROM student WHERE 1=2; -- 创建的emp2是空表</span><br><span class="line"></span><br><span class="line">select * from stu2;</span><br><span class="line"></span><br><span class="line">#2.3. 创建表，指定复制那几个字段，和数据</span><br><span class="line">CREATE TABLE stu80</span><br><span class="line">AS SELECT id, name, age, gender, identity FROM student WHERE id = 2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from stu80;</span><br><span class="line"></span><br><span class="line">DESCRIBE stu80;</span><br></pre></td></tr></table></figure><h2 id="3-表的修改"><a href="#3-表的修改" class="headerlink" title="3-.表的修改"></a>3-.表的修改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 3. 修改table表的字段类型(修改一列)</span><br><span class="line">alter table student</span><br><span class="line">modify identity bigint;</span><br><span class="line"></span><br><span class="line">alter table student</span><br><span class="line">modify identity bigint default 111111111111111111;</span><br><span class="line"></span><br><span class="line"># 4.追加一列</span><br><span class="line">alter table student</span><br><span class="line">add iphone int ;</span><br><span class="line"></span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line">#5.重命名一个列</span><br><span class="line">alter table student</span><br><span class="line">change name student_name varchar(15);</span><br><span class="line"></span><br><span class="line">#6.删除一个列</span><br><span class="line">alter table student</span><br><span class="line">drop column iphone;</span><br><span class="line"></span><br><span class="line"># 7.查询表数据</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"># 8.重命名表</span><br><span class="line">rename table student to students;</span><br><span class="line"></span><br><span class="line">show tables ;</span><br><span class="line"></span><br><span class="line"># 9.删除表</span><br><span class="line">/**</span><br><span class="line">在MySQL中,当一张数据表 没有与其他任何数据表形成关联关系 时,可以将当前数据表直接删除。</span><br><span class="line">数据和结构都被删除</span><br><span class="line">所有正在运行的相关事务被提交</span><br><span class="line">所有相关索引被删除</span><br><span class="line"></span><br><span class="line">  IF EXISTS 的含义为:如果当前数据库中存在相应的数据表,则删除数据表;如果当前数据库中不存</span><br><span class="line">在相应的数据表,则忽略删除语句,不再执行删除数据表的操作。</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">drop table if exists students;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 10.清空表</span><br><span class="line"># TRUNCATE TABLE detail_dept;</span><br><span class="line"># TRUNCATE 删除表中的所有数据，且不能回滚</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from student;</span><br><span class="line"></span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into student (id, name, age, gender, identity)</span><br><span class="line">values (1,&#x27;夏红&#x27;,25,&#x27;女&#x27;,125442121244);</span><br><span class="line"></span><br><span class="line">#修改字段类型</span><br><span class="line">alter table student modify identity bigint;</span><br><span class="line"></span><br><span class="line">#       创建表                    修改表           重命名表         删除表</span><br><span class="line"># create table 表名         alter table 表名      rename table       drop table 表名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line">## -------------------------------------------</span><br><span class="line"># 设置 自动提交关闭， delete 表 删除所有数据后，紧接着可以回滚到上一步。</span><br><span class="line">SET autocommit = FALSE;</span><br><span class="line">delete from student;</span><br><span class="line">rollback ;</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line"># 如果是TRUNCATE TABLE 截断表清空表数据，不管设不设置SET autocommit = FALSE; 都不能回滚。（开发最好别用）</span><br><span class="line">truncate student;</span><br><span class="line">select * from student;</span><br><span class="line">rollback ;  # 即使是执行回滚，也不能回滚了。</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">拓展2:如何理解清空表、删除表等操作需谨慎?!</span><br><span class="line">表删除 操作将把表的定义和表中的数据一起删除,并且MySQL在执行删除操作时,不会有任何的确认信</span><br><span class="line">息提示,因此执行删除操时应当慎重。在删除表前,最好对表中的数据进行 备份 ,这样当操作失误时可</span><br><span class="line">以对数据进行恢复,以免造成无法挽回的后果。</span><br><span class="line">同样的,在使用 ALTER TABLE 进行表的基本修改操作时,在执行操作过程之前,也应该确保对数据进</span><br><span class="line">行完整的 备份 ,因为数据库的改变是 无法撤销 的,如果添加了一个不需要的字段,可以将其删除;相</span><br><span class="line">同的,如果删除了一个需要的列,该列下面的所有数据都将会丢失。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h2 id="5-注意：清空表、删除表等操作需谨慎"><a href="#5-注意：清空表、删除表等操作需谨慎" class="headerlink" title="5-.注意：清空表、删除表等操作需谨慎!"></a>5-.注意：清空表、删除表等操作需谨慎!</h2><p><strong>表删除 操作将把表的定义和表中的数据一起删除,并且MySQL在执行删除操作时,不会有任何的确认信<br>息提示,因此执行删除操时应当慎重。在删除表前,最好对表中的数据进行 备份 ,这样当操作失误时可<br>以对数据进行恢复,以免造成无法挽回的后果。<br>同样的,在使用 ALTER TABLE 进行表的基本修改操作时,在执行操作过程之前,也应该确保对数据进<br>行完整的 备份 ,因为数据库的改变是 无法撤销 的,如果添加了一个不需要的字段,可以将其删除;相<br>同的,如果删除了一个需要的列,该列下面的所有数据都将会丢失。</strong></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#第10章_创建和管理表</span><br><span class="line"># 练习1：</span><br><span class="line">#1. 创建数据库test01_office,指明字符集为utf8。并在此数据库下执行下述操作</span><br><span class="line"></span><br><span class="line">create database if not exists test01_office character set utf8mb4;</span><br><span class="line"></span><br><span class="line"># 使用数据库</span><br><span class="line">use test01_office;</span><br><span class="line">#2. 创建表dept01</span><br><span class="line">/*</span><br><span class="line">字段</span><br><span class="line"> 类型</span><br><span class="line">id</span><br><span class="line"> INT(7)</span><br><span class="line">NAME</span><br><span class="line"> VARCHAR(25)</span><br><span class="line">*/</span><br><span class="line">create table if not exists dept01(</span><br><span class="line">  id int primary key auto_increment,</span><br><span class="line">  name varchar(25)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select * from dept01;</span><br><span class="line"></span><br><span class="line">#3. 将表departments中的数据插入新表dept02中</span><br><span class="line">create table if not exists dept02</span><br><span class="line">    AS</span><br><span class="line">select * from atguigudb.departments;</span><br><span class="line"></span><br><span class="line">select * from dept02;</span><br><span class="line">#4. 创建表emp01</span><br><span class="line">/*</span><br><span class="line">字段</span><br><span class="line"> 类型</span><br><span class="line">id</span><br><span class="line"> INT(7)</span><br><span class="line">first_name</span><br><span class="line"> VARCHAR (25)</span><br><span class="line">last_name</span><br><span class="line"> VARCHAR(25)</span><br><span class="line">dept_id</span><br><span class="line"> INT(7)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">create table if not exists emp01(</span><br><span class="line">    id int(7) primary key auto_increment comment &#x27;id&#x27;,</span><br><span class="line">    first_name varchar(25) not null comment &#x27;姓&#x27;,</span><br><span class="line">    last_name varchar(25) not null comment &#x27;名字&#x27;,</span><br><span class="line">    dept_id int(7) comment &#x27;部门id&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">desc emp01;</span><br><span class="line"></span><br><span class="line">#5. 将列last_name的长度增加到50</span><br><span class="line">alter table emp01</span><br><span class="line">modify last_name varchar(50) not null comment &#x27;名字&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#6. 根据表employees创建emp02</span><br><span class="line">create table if not exists emp02</span><br><span class="line">select * from atguigudb.employees</span><br><span class="line">where 1=2;</span><br><span class="line"></span><br><span class="line">#7. 删除表emp01</span><br><span class="line"></span><br><span class="line">drop table emp01;</span><br><span class="line"></span><br><span class="line">#8. 将表emp02重命名为emp01</span><br><span class="line">alter table emp02 rename emp01;</span><br><span class="line"></span><br><span class="line">#9.在表dept02和emp01中添加新列test_column,并检查所作的操作</span><br><span class="line">alter table dept02</span><br><span class="line">add test_column varchar(15);</span><br><span class="line"></span><br><span class="line">alter table emp01</span><br><span class="line">add test_column varchar(15);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#10.直接删除表emp01中的列 department_id</span><br><span class="line">alter table emp01</span><br><span class="line">drop column department_id;</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from emp01;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  重命名表</span><br><span class="line">  RENAME TABLE emp TO myemp;</span><br><span class="line"> 对于表中字段的操作</span><br><span class="line">  添加一个列 add</span><br><span class="line">  修改一个列字段的属性 modify</span><br><span class="line">  重命名一个列的名称  change 改变</span><br><span class="line">  删除一列 drop</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#练习2：</span><br><span class="line"># 1、创建数据库 test02_market</span><br><span class="line">create database if not exists test02_market character set utf8mb4;</span><br><span class="line">use test02_market;</span><br><span class="line"># 2、创建数据表 customers</span><br><span class="line">create table if not exists customers(</span><br><span class="line">    c_num int primary key auto_increment,</span><br><span class="line">    c_name varchar(50) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    c_contact varchar(50) ,</span><br><span class="line">    c_city varchar(50) comment &#x27;城市&#x27;,</span><br><span class="line">    c_birth date comment &#x27;生日&#x27;</span><br><span class="line">);</span><br><span class="line"># 3、将 c_contact 字段移动到 c_birth 字段后面</span><br><span class="line">alter table customers</span><br><span class="line">modify c_contact varchar(50) after c_birth;</span><br><span class="line"></span><br><span class="line">select * from customers;</span><br><span class="line"></span><br><span class="line"># 4、将 c_name 字段数据类型改为 varchar(70)</span><br><span class="line">alter table customers</span><br><span class="line">modify c_name varchar(70);</span><br><span class="line"></span><br><span class="line">desc customers;</span><br><span class="line"># 5、将c_contact字段改名为c_phone</span><br><span class="line">alter table customers</span><br><span class="line">change  c_contact c_phone varchar(50);</span><br><span class="line"></span><br><span class="line">desc customers;</span><br><span class="line"></span><br><span class="line"># 6、增加c_gender字段到c_name后面,数据类型为char(1)</span><br><span class="line">alter table customers</span><br><span class="line">add c_gender char(1)  after c_name;</span><br><span class="line"></span><br><span class="line">desc customers;</span><br><span class="line"></span><br><span class="line"># 7、将表名改为customers_info</span><br><span class="line">rename table customers to customers_info;</span><br><span class="line"></span><br><span class="line"># 8、删除字段c_city</span><br><span class="line">alter table customers_info</span><br><span class="line">drop c_city;</span><br><span class="line"></span><br><span class="line">desc customers_info;</span><br><span class="line"># 练习3：</span><br><span class="line"># 1、创建数据库test03_company</span><br><span class="line">create database if not exists test03_company character set utf8mb4;</span><br><span class="line">use test03_company;</span><br><span class="line"># 2、创建表offices</span><br><span class="line">create table if not exists offices(</span><br><span class="line">    officeCode int primary key auto_increment,</span><br><span class="line">    city varchar(30),</span><br><span class="line">    address varchar(50),</span><br><span class="line">    country varchar(50),</span><br><span class="line">    postalCode varchar(25)</span><br><span class="line">);</span><br><span class="line"># 3、创建表employees</span><br><span class="line">create table if not exists employees(</span><br><span class="line">empNum int primary key auto_increment,</span><br><span class="line">lastName varchar(50) not null comment &#x27;名字&#x27;,</span><br><span class="line">firstName varchar(50) not null comment &#x27;姓&#x27;,</span><br><span class="line">mobile varchar(25) unique not null comment &#x27;手机号&#x27;,</span><br><span class="line">code int unique comment  &#x27;代码&#x27;,</span><br><span class="line">jobTitle varchar(50) not null comment &#x27;工作名称&#x27;,</span><br><span class="line">birth date comment &#x27;生日&#x27;,</span><br><span class="line">note varchar(255) default &#x27;普通员工&#x27; comment &#x27;笔记&#x27;,</span><br><span class="line">sex varchar(5) not null comment &#x27;性别&#x27;</span><br><span class="line">);</span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">desc employees;</span><br><span class="line"># 4、将表employees的mobile字段修改到code字段后面</span><br><span class="line">alter table employees</span><br><span class="line">modify mobile varchar(50) after code;</span><br><span class="line"></span><br><span class="line">desc employees;</span><br><span class="line"># 5、将表employees的birth字段改名为birthday</span><br><span class="line">alter table employees</span><br><span class="line">change birth birthday date;</span><br><span class="line"></span><br><span class="line">desc employees;</span><br><span class="line"># 6、修改sex字段,数据类型为char(1)</span><br><span class="line">alter table employees</span><br><span class="line">modify sex char(1);</span><br><span class="line"></span><br><span class="line">desc employees;</span><br><span class="line"># 7、删除字段note</span><br><span class="line">alter table employees</span><br><span class="line">drop note;</span><br><span class="line"></span><br><span class="line">desc employees;</span><br><span class="line"># 8、增加字段名favoriate_activity,数据类型为varchar(100)</span><br><span class="line">alter table employees</span><br><span class="line">add favoriate_activity varchar(100) comment &#x27;喜欢的活动&#x27;;</span><br><span class="line"></span><br><span class="line"># 9、将表employees的名称修改为 employees_info</span><br><span class="line">rename table employees to employees_info;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;创建和管理表&lt;/center&gt;&lt;/h1&gt;



&lt;h2 id=&quot;2-创建和管理数据库&quot;&gt;&lt;a href=&quot;#2-创建和管理数据库&quot; class=&quot;headerlink&quot; title=&quot;2.-创建和管理数据库&quot;&gt;&lt;/a&gt;2.-创建和管理数据库&lt;/h2&gt;&lt;fi</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>6.mysql第09章子查询</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/6.mysql%E7%AC%AC09%E7%AB%A0%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/6.mysql%E7%AC%AC09%E7%AB%A0%E5%AD%90%E6%9F%A5%E8%AF%A2/</id>
    <published>2019-10-03T06:00:00.000Z</published>
    <updated>2024-10-26T13:50:46.147Z</updated>
    
    <content type="html"><![CDATA[<h1><center>子查询</center></h1><h3 id="一、子查询"><a href="#一、子查询" class="headerlink" title="一、子查询"></a>一、子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  子查询:</span><br><span class="line"> */</span><br><span class="line"># 需求：员工表中，比Abel的工资高的都有那些</span><br><span class="line"></span><br><span class="line">select last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;(select salary</span><br><span class="line">              from employees</span><br><span class="line">              where last_name=&#x27;Abel&#x27;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  子查询的分类</span><br><span class="line">  我们按内查询的结果返回一条还是多条记录,将子查询分为 单行子查询 、 多行子查询 。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    单行子查询：</span><br><span class="line">  因为，单行子查询的返回结果，只有一行，就一个值，所以可使用 = &gt; &gt;= &lt; &lt;= &lt;&gt; 进行比较操作</span><br><span class="line">  例如：</span><br><span class="line">  题目:查询工资大于149号员工工资的员工的信息</span><br><span class="line"> */</span><br><span class="line">select last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;(</span><br><span class="line">    select salary from employees where employee_id=&#x27;149&#x27; #10500</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"># 题目:返回job_id与141号员工相同,salary比143号员工多的员工姓名,job_id和工资</span><br><span class="line"></span><br><span class="line">select  last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where job_id=(select job_id from employees where employee_id=&#x27;141&#x27;)</span><br><span class="line">and salary&gt;(select salary from employees where employee_id=&#x27;141&#x27;);</span><br><span class="line"></span><br><span class="line"># 题目:返回公司工资最少的员工的last_name,job_id和salary</span><br><span class="line">select last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary=(</span><br><span class="line">    select min(salary) from employees</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"># 题目:查询与141号或174号员工的manager_id和department_id相同的其他员工的employee_id, manager_id,department_id</span><br><span class="line">select employee_id,manager_id,department_id</span><br><span class="line">from employees</span><br><span class="line">where manager_id in (select  manager_id from employees where employee_id in(141,174))</span><br><span class="line">and department_id in (select  department_id from employees where employee_id in(141,174))</span><br><span class="line">and employee_id not in (141,174);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   HAVING 中的子查询</span><br><span class="line">    首先执行子查询。</span><br><span class="line">    向主查询中的HAVING 子句返回结果。</span><br><span class="line"> */</span><br><span class="line"># 题目:查询最低工资</span><br><span class="line"># 大于 50号部门最低工资</span><br><span class="line"># 的部门 id和其最低工资</span><br><span class="line">select  department_id,min(salary)</span><br><span class="line">from employees e</span><br><span class="line">group by department_id</span><br><span class="line">having min(salary) &gt; (</span><br><span class="line">                select min(salary)</span><br><span class="line">                from employees</span><br><span class="line">                where department_id=50</span><br><span class="line">                group by department_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   CASE中的子查询</span><br><span class="line">    在CASE表达式中使用单列子查询:</span><br><span class="line"> */</span><br><span class="line">#</span><br><span class="line"># 题目:显式员工的 employee_id,last_name和location。</span><br><span class="line"># 其中,若员工department_id</span><br><span class="line"># 与   location_id为1800 的department_id相同,20</span><br><span class="line"># 则location为’Canada’,其余则为’USA’。</span><br><span class="line"></span><br><span class="line">select employee_id,last_name, (case department_id</span><br><span class="line">                                when (</span><br><span class="line">                                    select department_id from departments</span><br><span class="line">                                    where location_id=1800</span><br><span class="line">                                    ) then &#x27;Canada&#x27;</span><br><span class="line">                                else &#x27;USA&#x27; end ) location</span><br><span class="line"></span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*-------------------------------------------------------------------------------------------------------*/</span><br><span class="line">/**</span><br><span class="line">  多行子查询</span><br><span class="line">   子查询的结果，是多行的，所以使用多行比较操作符</span><br><span class="line">多行比较操作符</span><br><span class="line">    in 等于列表中的任意一个</span><br><span class="line">    ANY 需要和单行比较操作符一起使用,和子查询返回的某一个值比较</span><br><span class="line">    ALL 需要和单行比较操作符一起使用,和子查询返回的所有值比较</span><br><span class="line">    SOME 实际上是ANY的别名,作用相同,一般常使用ANY</span><br><span class="line"> */</span><br><span class="line"># 题目:返回</span><br><span class="line"># 其它job_id中比   job_id为‘IT_PROG’部门 任一工资低</span><br><span class="line"># 的 员工的员工号、姓名、job_id 以及salary</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># select d.department_id,e.salary</span><br><span class="line"># from employees e join departments d</span><br><span class="line">#     on e.department_id=d.department_id</span><br><span class="line"># where e.job_id=&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select employee_id,last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&lt; any(</span><br><span class="line">    select salary from employees where job_id=&#x27;IT_PROG&#x27;</span><br><span class="line">    )</span><br><span class="line">and job_id &lt;&gt; &#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 题目:查询平均工资最低的部门id</span><br><span class="line"># 将 虚拟表。作为 from后面的表进行查询</span><br><span class="line"># 查询了员工所在的所有部门的 平均工资</span><br><span class="line">select department_id,avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 平均工资最低是多少</span><br><span class="line">select  min(t_dep_gr_avgsalary)</span><br><span class="line">from (select avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id) dept_avg_sal ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select department_id,avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary) = (select  min(t_dep_gr_avgsalary)</span><br><span class="line">from (select avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id) dept_avg_sal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  相关子查询：外部的表，存在于内部子查询当中</span><br><span class="line"></span><br><span class="line">    如果子查询的执行依赖于外部查询,通常情况下都是因为子查询中的表用到了外部的表,并进行了条件</span><br><span class="line">    关联,因此每执行一次外部查询,子查询都要重新计算一次,这样的子查询就称之为 关联子查询 。</span><br><span class="line"></span><br><span class="line">        步骤是： 1.外查询，先查询到了107条记录。</span><br><span class="line">                2.将第一条记录取出来，送进子查询中，送进来的这条记录，使用外表的这条记录，获取到employee_id。查出子查询的结果</span><br><span class="line">                3.将子查询的结果，返回到外查询，继续外查询语句的过滤条件，得到最终结果</span><br><span class="line"></span><br><span class="line">  题目:查询员工中工资 大于 本部门平均工资的员工的last_name,salary和其department_id</span><br><span class="line">   :这里的相关子查询，子查询中使用主查询中的列</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select last_name, e.employee_id ,salary</span><br><span class="line">from employees e</span><br><span class="line">where salary &gt; (select avg(salary)</span><br><span class="line">                from employees em</span><br><span class="line">                where em.department_id=e.employee_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  相关子查询， 子查询在 from 后面</span><br><span class="line">  from型的子查询:子查询是作为from的一部分,子查询要用()引起来,并且要给这个子查询取别</span><br><span class="line">    名, 把它当成一张“临时的虚拟的表”来使用。</span><br><span class="line"> */</span><br><span class="line"> #:查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</span><br><span class="line">SELECT last_name,salary,e1.department_id</span><br><span class="line">FROM employees e1,(</span><br><span class="line">                    SELECT department_id,AVG(salary) dept_avg_sal</span><br><span class="line">                    FROM employees</span><br><span class="line">                    GROUP BY department_id) e2</span><br><span class="line">WHERE e1.`department_id` = e2.department_id</span><br><span class="line">AND e2.dept_avg_sal &lt; e1.`salary`;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  在ORDER BY 中使用 相关子查询:</span><br><span class="line">  题目:查询员工的id,salary,按照department_name 排序</span><br><span class="line"> */</span><br><span class="line">select  distinct department_name</span><br><span class="line">from employees e2  left join departments d</span><br><span class="line">on e2.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"># select e1.last_name, e1.employee_id,e1.salary</span><br><span class="line"># from employees e1</span><br><span class="line"># order by (select  distinct department_name</span><br><span class="line"># from employees e2  left join departments d</span><br><span class="line"># on e2.department_id = d.department_id</span><br><span class="line">#     where e1.employee_id=e2.employee_id) asc;</span><br><span class="line"></span><br><span class="line">SELECT employee_id, salary</span><br><span class="line">FROM employees e</span><br><span class="line">ORDER BY (</span><br><span class="line">             SELECT department_name</span><br><span class="line">             FROM departments d</span><br><span class="line">             WHERE e.`department_id` = d.`department_id`</span><br><span class="line">         );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  EXISTS 与 NOT EXISTS关键字</span><br><span class="line">  关联子查询通常也会和 EXISTS操作符一起来使用,用来检查在子查询中是否存在满足条件的行。</span><br><span class="line">        如果在子查询中不存在满足条件的行:</span><br><span class="line">        条件返回 FALSE</span><br><span class="line">        继续在子查询中查找</span><br><span class="line">        如果在子查询中存在满足条件的行:</span><br><span class="line">        不在子查询中继续查找</span><br><span class="line">        条件返回 TRUE</span><br><span class="line">        NOT EXISTS关键字表示如果不存在某种条件,则返回TRUE,否则返回FALSE。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#  题目:查询公司 管理者的 employee_id, last_name, job_id,department_id 信息</span><br><span class="line"># 方法一：表自连接</span><br><span class="line">SELECT DISTINCT e1.employee_id, e1.last_name, e1.job_id, e1.department_id</span><br><span class="line">FROM</span><br><span class="line"> employees e1 JOIN employees e2</span><br><span class="line">WHERE e1.employee_id = e2.manager_id;</span><br><span class="line"># 方法二、</span><br><span class="line">SELECT employee_id, last_name, job_id, department_id</span><br><span class="line">FROM employees e1</span><br><span class="line">WHERE EXISTS(SELECT *</span><br><span class="line">             FROM employees e2</span><br><span class="line">             WHERE e2.manager_id =</span><br><span class="line">                   e1.employee_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询    departments表 中 不存在于 employees表中的部门     的department_id和department_name</span><br><span class="line">SELECT department_id, department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE NOT EXISTS (SELECT &#x27;X&#x27;</span><br><span class="line">FROM</span><br><span class="line"> employees</span><br><span class="line">WHERE</span><br><span class="line"> department_id = d.department_id);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子查询练习"><a href="#子查询练习" class="headerlink" title="子查询练习"></a>子查询练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  ------------------------------------------------------------------------</span><br><span class="line">  子查询练习</span><br><span class="line"> */</span><br><span class="line">#1.查询和Zlotkey相同部门的员工姓名和工资</span><br><span class="line"></span><br><span class="line">select e1.department_id ,e1.last_name,e1.salary from employees e1</span><br><span class="line">where  e1.department_id =(select department_id from employees e2 where e2.last_name=&#x27;Zlotkey&#x27;);</span><br><span class="line"></span><br><span class="line">#2.查询  工资比公司平均工资高的  员工的员工号,姓名和工资。</span><br><span class="line">select employee_id,last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;(select avg(salary) from employees);</span><br><span class="line">#公司的平均工资</span><br><span class="line">select avg(salary) from employees;</span><br><span class="line"></span><br><span class="line">#3.选择工资大于 所有JOB_ID = &#x27;SA_MAN&#x27;的员工的工资 的员工的last_name, job_id, salary</span><br><span class="line"></span><br><span class="line">select last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt; all(select salary from employees</span><br><span class="line">where job_id=&#x27;SA_MAN&#x27;);</span><br><span class="line">#所有JOB_ID = &#x27;SA_MAN&#x27;的员工的工资</span><br><span class="line">select salary from employees</span><br><span class="line">where job_id=&#x27;SA_MAN&#x27;;</span><br><span class="line"></span><br><span class="line">#4.查询   和姓名中包含字母u的员工 在 相同部门 的员工   的员工号和姓名</span><br><span class="line">select employee_id,last_name</span><br><span class="line">from employees</span><br><span class="line">where department_id in (select distinct department_id  from employees</span><br><span class="line">where last_name like &#x27;%U%&#x27;);</span><br><span class="line"># 查询和   姓名中包含字母u的员工 在相同部门的员工</span><br><span class="line"># 查询姓名中包含字母u的员工 的部门id</span><br><span class="line">select distinct department_id  from employees</span><br><span class="line">where last_name like &#x27;%U%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#5.查询在 部门的location_id为1700的部门工作的 员工的员工号</span><br><span class="line"></span><br><span class="line">select employee_id ,last_name</span><br><span class="line">from employees</span><br><span class="line">where department_id in(</span><br><span class="line">                        select department_id</span><br><span class="line">                        from departments</span><br><span class="line">                        where location_id=&#x27;1700&#x27;</span><br><span class="line">                      );</span><br><span class="line"></span><br><span class="line"># 查询 location_id为1700的部门id号</span><br><span class="line">select department_id</span><br><span class="line">from departments</span><br><span class="line">where location_id=&#x27;1700&#x27;;</span><br><span class="line"></span><br><span class="line">#6.查询管理者是King的员工姓名和工资</span><br><span class="line"></span><br><span class="line">select last_name, salary,manager_id</span><br><span class="line">from employees</span><br><span class="line">where manager_id=(select employee_id</span><br><span class="line">from employees</span><br><span class="line">where last_name=&#x27;King&#x27; and manager_id is null);</span><br><span class="line"># 查询King 管理者的 employee_id</span><br><span class="line">select employee_id</span><br><span class="line">from employees</span><br><span class="line">where last_name=&#x27;King&#x27; and manager_id is null ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#7.查询工资最低的员工信息: last_name, salary</span><br><span class="line">select last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary=(select min(salary) from employees);</span><br><span class="line"></span><br><span class="line">#查询员工表的最低工资是多少</span><br><span class="line">select min(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">#8.查询平均工资 最低的部门信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查找各个部门的平均工资</span><br><span class="line">select  avg(salary) avg_salary</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"># 查找部门的最低工资</span><br><span class="line">select min(avg_salary)</span><br><span class="line">from (select  avg(salary) avg_salary</span><br><span class="line">from employees</span><br><span class="line">group by department_id) t_avg_em;</span><br><span class="line"># 查找最低工资的部门</span><br><span class="line">select *</span><br><span class="line">from departments</span><br><span class="line">where department_id=(</span><br><span class="line">        select department_id from employees</span><br><span class="line">        group by department_id</span><br><span class="line">        having avg(salary)=(</span><br><span class="line">                            select min(avg_salary)</span><br><span class="line">                            from (</span><br><span class="line">                            select  avg(salary) avg_salary</span><br><span class="line">                            from employees</span><br><span class="line">                            group by department_id) t_avg_em</span><br><span class="line">                            )</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#9.查询平均工资 最低的部门 信息  和  该部门的平均工资(相关子查询)</span><br><span class="line">select  department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary)&lt;=ALL (</span><br><span class="line">    #求出每个部门的平均工资</span><br><span class="line">                select avg(salary)</span><br><span class="line">                from employees</span><br><span class="line">                group by department_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 记住一点：这种子查询，就抓住，子查询后出来的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#10.查询平均工资最高的 job 信息</span><br><span class="line"># 注意：看题目，题目要查job信息，肯定是 from jobs表,然后再去凑条件</span><br><span class="line">select * from jobs;</span><br><span class="line"></span><br><span class="line"># 查询每个工种的 平均工资</span><br><span class="line">select job_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by job_id;</span><br><span class="line"></span><br><span class="line"># 查询  平均工资最高的 工种 job_id</span><br><span class="line">select job_id</span><br><span class="line">from employees</span><br><span class="line">group by job_id</span><br><span class="line">having avg(salary)&gt;=ALL (</span><br><span class="line">        select avg(salary)</span><br><span class="line">        from employees</span><br><span class="line">        group by job_id</span><br><span class="line">);</span><br><span class="line">#最终</span><br><span class="line">select * from jobs</span><br><span class="line">where job_id=(select job_id</span><br><span class="line">from employees</span><br><span class="line">group by job_id</span><br><span class="line">having avg(salary)&gt;=ALL (</span><br><span class="line">        select avg(salary)</span><br><span class="line">        from employees</span><br><span class="line">        group by job_id</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">#11.查询 平均工资  高于 公司平均工资 的部门有哪些?</span><br><span class="line">select * from</span><br><span class="line">departments;</span><br><span class="line"></span><br><span class="line">#查询公司的平均工资</span><br><span class="line">select avg(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"># 查询部门的平均工资</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 查询 平均工资  高于 公司平均工资 的部门有哪些?</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">where department_id is not null</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary) &gt;(</span><br><span class="line">    select avg(salary)</span><br><span class="line">    from employees</span><br><span class="line">    ) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#12.查询出公司中所有 manager(管理者) 的详细信息</span><br><span class="line"># manager也是员工</span><br><span class="line"># 这题只要是，将employees表，想象成两张表，一张是员工表，一张是 管理者表。</span><br><span class="line"># 只要 员工表的 员工id=管理者表中的 管理id ,那么这个人这条记录就是管理者</span><br><span class="line"># 自连接查询</span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">select DISTINCT em.employee_id, em.last_name, em.salary</span><br><span class="line">from employees em join employees ma</span><br><span class="line">on em.employee_id=ma.manager_id;</span><br><span class="line">#方法2</span><br><span class="line">SELECT employee_id, last_name, salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id IN (</span><br><span class="line">    SELECT DISTINCT manager_id</span><br><span class="line">    FROM employees</span><br><span class="line">);</span><br><span class="line">#相关子查询   查询第一行时， 外查询的条件，进入到内查询，内查询执行使用外查询条件。完毕。 跳出内查询，到外查询继续执行</span><br><span class="line">#方式3:  where 后面判断 存在 EXISTS 存在返回true</span><br><span class="line">SELECT employee_id, last_name, salary</span><br><span class="line">FROM employees e1</span><br><span class="line">WHERE EXISTS(SELECT *</span><br><span class="line">             FROM employees e2</span><br><span class="line">             WHERE e2.manager_id = e1.employee_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#13.各个部门中 最高工资中 最低的那个部门的 最低工资是多少?</span><br><span class="line"># 求各个部门的最高工资</span><br><span class="line"># 将各个部门的最高工资进行比较，最低的那个部门的工资是多少</span><br><span class="line"></span><br><span class="line">#从最高工资中找到最低工资</span><br><span class="line">select min(mx_salary)</span><br><span class="line">from (</span><br><span class="line">    # 求各个部门的最高工资</span><br><span class="line">    select  max(salary) mx_salary</span><br><span class="line">    from employees</span><br><span class="line">    group by department_id ) a;</span><br><span class="line"></span><br><span class="line"># 抓住核心思想，求什么就先把字段写好，后面再往上面凑</span><br><span class="line">select department_id, salary</span><br><span class="line">from employees</span><br><span class="line">where department_id =</span><br><span class="line">(select department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having max(salary) =</span><br><span class="line">       (select max(salary) m_sa</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id</span><br><span class="line">        order by m_sa</span><br><span class="line">        limit 0,1</span><br><span class="line">       ));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#14.查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salary</span><br><span class="line"># 求平均工资最高的部门id</span><br><span class="line">select department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary)&gt;=ALL (</span><br><span class="line">    select avg(salary)</span><br><span class="line">    from employees</span><br><span class="line">    group by department_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#求这个平均工资最高的部门中，多个管理者的 id</span><br><span class="line">select distinct manager_id</span><br><span class="line">from employees</span><br><span class="line">where department_id  =(</span><br><span class="line">    #查询平均工资最高的部门</span><br><span class="line">    select department_id</span><br><span class="line">    from employees</span><br><span class="line">    group by department_id</span><br><span class="line">    having avg(salary) &gt;= ALL (</span><br><span class="line">        #每个部门的平均工资</span><br><span class="line">        select avg(salary)</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"># 查询员工表</span><br><span class="line">select employee_id, last_name, department_id, email, salary</span><br><span class="line">from employees</span><br><span class="line">where employee_id in (</span><br><span class="line">    select distinct manager_id</span><br><span class="line">    from employees</span><br><span class="line">    where department_id = (</span><br><span class="line">        #查询平均工资最高的部门</span><br><span class="line">        select department_id</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id</span><br><span class="line">        having avg(salary) &gt;= ALL (</span><br><span class="line">            #每个部门的平均工资</span><br><span class="line">            select avg(salary)</span><br><span class="line">            from employees</span><br><span class="line">            group by department_id</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#15. 查询部门的部门号,其中不包括job_id是&quot;ST_CLERK&quot;的部门号</span><br><span class="line"></span><br><span class="line"># 查询所有部门，然后排除 Job_id是&quot;ST_CLERK&quot;的部门</span><br><span class="line"></span><br><span class="line"># 查询 Job_id是&quot;ST_CLERK&quot;的 所有部门id</span><br><span class="line">select department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id</span><br><span class="line">having job_id=&#x27;ST_CLERK&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select department_id</span><br><span class="line">from departments</span><br><span class="line">where department_id not in(</span><br><span class="line">        select department_id</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id,job_id</span><br><span class="line">        having job_id=&#x27;ST_CLERK&#x27;</span><br><span class="line">    );</span><br><span class="line">#相关子查询，将部门表作为主体，条件来判断是不是为真。满足就输出，不满足就继续下一行</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE NOT EXISTS(</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM employees e</span><br><span class="line">        WHERE d.`department_id` = e.`department_id`</span><br><span class="line">          AND job_id = &#x27;ST_CLERK&#x27;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#16. 选择所有 没有管理者的员工的last_name</span><br><span class="line"></span><br><span class="line"># 查询 管理者的id为null的 员工信息</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where manager_id is null ;</span><br><span class="line"></span><br><span class="line"># 查询所有管理者的id</span><br><span class="line"># 员工的管理者，与其匹配，不在里面的 记录一行</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees e1 # e1看作员工表</span><br><span class="line">where not exists(</span><br><span class="line">        select * from employees e2 #e2看作管理员表</span><br><span class="line">        where e1.manager_id=e2.employee_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">#17.查询员工号、姓名、雇用时间、工资, 其中员工的 管理者为 &#x27;De Haan&#x27;</span><br><span class="line"></span><br><span class="line"># 查询 last_name=&#x27;De Haan&#x27;的员工号</span><br><span class="line">select * from employees where last_name=&#x27;De Haan&#x27;;# employee_id =102</span><br><span class="line"></span><br><span class="line">select employee_id,last_name,hire_date,salary</span><br><span class="line">from employees</span><br><span class="line">where manager_id=(</span><br><span class="line">    select employee_id from employees where last_name=&#x27;De Haan&#x27;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#18.查询   各部门中工资 比本部门平均工资高    的员工的员工号, 姓名和工资(相关子查询)</span><br><span class="line"></span><br><span class="line">#查询各个部门中的工资(所有人的工资)</span><br><span class="line"># 必须以部门和人分组，不能以部门和工资分组，工资有可能 两个人一样的。也被合并了。错误的</span><br><span class="line">select employee_id, last_name, salary</span><br><span class="line">from employees e1</span><br><span class="line">group by department_id, employee_id</span><br><span class="line">having salary&gt;(</span><br><span class="line">    select  AVG(salary)</span><br><span class="line">    from employees e2</span><br><span class="line">    where e1.department_id=e2.department_id</span><br><span class="line">    group by department_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 错误的分组</span><br><span class="line">select department_id,salary</span><br><span class="line">from employees</span><br><span class="line">group by department_id, salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询各个部门的 平均工资</span><br><span class="line">select department_id,AVG(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#19.查询每个部门下的部门人数大于 5 的部门名称(相关子查询)</span><br><span class="line"></span><br><span class="line"># 查询每个部门，部门下的 人数</span><br><span class="line"># 思考，部门表，和 员工表 相关查询</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from departments d</span><br><span class="line">where 5&lt;(</span><br><span class="line">    select count(1)</span><br><span class="line">    from employees e</span><br><span class="line">    where d.department_id=e.department_id</span><br><span class="line">    ) ;</span><br><span class="line"></span><br><span class="line"># 某个部门下的人数</span><br><span class="line">select count(1)</span><br><span class="line">from employees</span><br><span class="line">where department_id=&#x27;90&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#20.查询每个国家下的部门个数大于 2 的国家编号(相关子查询)</span><br><span class="line"></span><br><span class="line">select * from countries;</span><br><span class="line"></span><br><span class="line"># 查看部门在哪国家</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from departments;</span><br><span class="line">select *</span><br><span class="line">from locations;</span><br><span class="line"></span><br><span class="line"># 查询国家countries表</span><br><span class="line"></span><br><span class="line">select * from countries  c</span><br><span class="line">where 2&lt;(</span><br><span class="line">        select count(1)</span><br><span class="line">        from departments d  join locations l</span><br><span class="line">        on d.location_id=l.location_id</span><br><span class="line">        where  c.country_id=l.country_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 所有部门所在的城市</span><br><span class="line">select d.department_id,l.country_id</span><br><span class="line">from departments d  join locations l</span><br><span class="line">on d.location_id=l.location_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT country_id</span><br><span class="line">FROM locations l</span><br><span class="line">WHERE 2 &lt; (</span><br><span class="line">    SELECT COUNT(*)</span><br><span class="line">    FROM departments d</span><br><span class="line">    WHERE l.`location_id` = d.`location_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;子查询&lt;/center&gt;&lt;/h1&gt;



&lt;h3 id=&quot;一、子查询&quot;&gt;&lt;a href=&quot;#一、子查询&quot; class=&quot;headerlink&quot; title=&quot;一、子查询&quot;&gt;&lt;/a&gt;一、子查询&lt;/h3&gt;&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>5.mysql第8章聚合函数</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/5.mysql%E7%AC%AC8%E7%AB%A0%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/5.mysql%E7%AC%AC8%E7%AB%A0%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</id>
    <published>2019-10-03T05:00:00.000Z</published>
    <updated>2024-11-03T12:30:50.888Z</updated>
    
    <content type="html"><![CDATA[<h1><center>聚合函数</center></h1><h3 id="1-聚合函数类型（记住聚合函数就这5种）"><a href="#1-聚合函数类型（记住聚合函数就这5种）" class="headerlink" title="1.聚合函数类型（记住聚合函数就这5种）"></a>1.聚合函数类型（记住聚合函数就这5种）</h3><blockquote><p>AVG(字段) 求平均值<br> SUM(字段) 求和<br> MAX(字段) 求最大值<br> MIN(字段) 求最小值<br> COUNT(某字段) 求字段有多少个<br> 注意1：聚合函数一般是配合 group by 分组 来使用的<br>   select  MAX(salary) from employees;<br> 注意2：where 后面不能跟 聚合函数<br> 注意3：聚合函数不能嵌套使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  五、聚合函数类型（记住聚合函数就这5种）</span><br><span class="line">  AVG(字段) 求平均值</span><br><span class="line">  SUM(字段) 求和</span><br><span class="line">  MAX(字段) 求最大值</span><br><span class="line">  MIN(字段) 求最小值</span><br><span class="line">  COUNT(某字段) 求字段有多少个</span><br><span class="line">  注意1：聚合函数一般是配合 group by 分组 来使用的</span><br><span class="line">    select  MAX(salary) from employees;</span><br><span class="line">  注意2：where 后面不能跟 聚合函数</span><br><span class="line">  注意3：聚合函数不能嵌套使用</span><br><span class="line"></span><br><span class="line"># 练习： 求 所有人中，最高工资的那个人</span><br><span class="line">  错误的写法：</span><br><span class="line"> 有矛盾之处，查这张员工表，求出 最大工资的那个，应该是1个结果，而字段中还有last_name字段是表示显示表employees中所有人的姓名，有冲突</span><br><span class="line"> select last_name, MAX(salary) from employees;</span><br><span class="line"> # 正确写法：求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">  select employee_id, last_name, salary from employees</span><br><span class="line">    where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line">select  MAX(salary) from employees;</span><br><span class="line"></span><br><span class="line"># 求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">select employee_id, last_name, salary from employees</span><br><span class="line">where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line">#聚合函数，配合group by 使用：按照部门分组，求出每个部门中最高工资</span><br><span class="line">select department_id,MAX(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  统计个数的字段</span><br><span class="line">  COUNT()</span><br><span class="line">  # 字段commission_pct有35行有值，null不统计</span><br><span class="line"> */</span><br><span class="line">select COUNT(commission_pct) from employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-group—by"><a href="#2-group—by" class="headerlink" title="2.group—by"></a>2.group—by</h3><h4 id="可以使用GROUP-BY子句将表中的数据分成若干组"><a href="#可以使用GROUP-BY子句将表中的数据分成若干组" class="headerlink" title="可以使用GROUP BY子句将表中的数据分成若干组"></a>可以使用GROUP BY子句将表中的数据分成若干组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT column, group_function(column)</span><br><span class="line">FROM table</span><br><span class="line">[WHERE</span><br><span class="line"> condition]</span><br><span class="line">[GROUP BY</span><br><span class="line"> group_by_expression]</span><br><span class="line">[ORDER BY</span><br><span class="line"> column];</span><br></pre></td></tr></table></figure><blockquote><p>明确:WHERE一定放在FROM后面</p></blockquote><h2 id="☆☆☆group…-by…-的sql语句理解☆☆☆"><a href="#☆☆☆group…-by…-的sql语句理解☆☆☆" class="headerlink" title="☆☆☆group….by… 的sql语句理解☆☆☆"></a>☆☆☆group….by… 的sql语句理解☆☆☆</h2><h3 id="这里也要思考表与表之间的对应关系"><a href="#这里也要思考表与表之间的对应关系" class="headerlink" title="这里也要思考表与表之间的对应关系"></a>这里也要思考表与表之间的对应关系</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select department_id ,avg(salary)  # select 读作 这一个部门中 工资的平均值</span><br><span class="line">from employees</span><br><span class="line">group by department_id; </span><br><span class="line"># 通过select 后面的 语句，就可以看出分组后的 表张什么样子了</span><br><span class="line"># 这里 肯定是 每一个部门 在第一列， 第二列是 每个部门的 平均工资</span><br><span class="line">#如下图</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410140055769.png" alt="image-20241014005523571"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select department_id,job_id ,avg(salary)  </span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line"># 每个部门分组后， 部门里面再按照 工种id(job_id) 进行分组.</span><br><span class="line"># 可以预见查出来的表 ,一个部门，要分多行了，因为一个部门里面有多个工种，每个工种在进行算工资平均值</span><br><span class="line"># 如下图</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410140054911.png" alt="image-20241014005425668"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  --------------------------------------group---by----字段分组的使用-------------------------------------------------</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  分组：</span><br><span class="line">对于 group by 分组的理解</span><br><span class="line"></span><br><span class="line"># 结论1：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"># 反正就是，只要出现了分组， 在select 后面声明的字段 ，在 group by 后面要全部都给写上，并且select 后面一定要有一个聚合函数，来计算组意图结果。</span><br><span class="line"></span><br><span class="line"># 结论2：group by 声明在from后面、where后面,      order by 排序前面、limit 分页前面。 （可以理解，结果集群都都处理完毕，在进行排序，和分页）</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line"># 求所有员工的 工资平均值  AVG = SUM / COUNT(1)</span><br><span class="line">select SUM(salary) / count(1) from employees;</span><br><span class="line"># 求所有员工的 工资平均值</span><br><span class="line">select avg(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 查询   每个部门 有多少人</span><br><span class="line"># 先找到employees表</span><br><span class="line"># 然后group by 按照department_id 部门分组，有null,10，20，30，40，50，60，70，80，90，100这12个部门,此时结果集已经形成12条数据，12个部门</span><br><span class="line"># 随后 count(1)  再次限定结果集，将每个部门多少人求出来</span><br><span class="line">select department_id ,count(1)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 每个部门中 的 平均工资是多少</span><br><span class="line"># 求每个部门的 平均工资</span><br><span class="line">select department_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 先找到employees表</span><br><span class="line">#  然后group by 按照department_id 部门分组，在按照 工种job_id 进行 分组。</span><br><span class="line"># 比如90号部门的AD_PRES 在一行，90号部门的AD_VP工种 在一行，求平均工资值。</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line">#错误写法 这种错误就是 按照 department_id分组后的结果集，</span><br><span class="line"># 在select 后面的语句，并没有进行操作，只要显示last_name</span><br><span class="line"># 这里 按照 department_id分组后，展示字段last_name ，不可能的事情，是错误的写法</span><br><span class="line">select department_id ,last_name</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 错误写法</span><br><span class="line"># 只按照 department_id 进行分组，不能查到job_id 字段</span><br><span class="line">select department_id,job_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 结论：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 结论3.</span><br><span class="line"></span><br><span class="line">只要看见sql语句中有group by 就要想，结果集是 进行分组的结果， select 后面的字段，就是分组的字段，聚合函数就是对这分组后的操作。</span><br><span class="line">        如果分组后的结果继续筛选，就要使用having 进行筛选， 后面跟的是聚合函数。</span><br><span class="line">         这里不能使用where ,where  可以直接使用表中的字段作为筛选条件,但不能使用分组中的 聚合函数 作为筛选条件;</span><br><span class="line">  HAVING 必须要与 GROUP BY 配合使用,可以把分组计算的聚合函数和分组字段作为筛选条件。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按照部门分组，部门有 null,10,20,30,40,50,60,70,80,90,100,110</span><br><span class="line">select department_id  from employees</span><br><span class="line">group by department_id;</span><br><span class="line">#按照 部门和工资分组</span><br><span class="line"># 一个部门中有很多人工资不一样，一样的分为一组 如：90号部门工资有两种24000，17000</span><br><span class="line">select department_id ,salary from employees</span><br><span class="line">group by department_id,salary;</span><br><span class="line">#求 每个部门中 工资最高是多少</span><br><span class="line">select department_id , max(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 每个部门中最高工资 ，且最高工资超过10000的部门。</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 50，90，110 部门中，最高工资超过10000的部门是那几个。</span><br><span class="line"># 这里 where 后面的条件 是先筛选 符合条件的部门，提高了查询速度</span><br><span class="line">#     having 后面的筛选条件，记住就跟聚合函数</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">where department_id in(50,90,110)</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># ----------------牢记sql语句的执行过程----------------------</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 第八章，聚合函数的练习</span><br><span class="line">#组函数，又叫聚合函数</span><br><span class="line"></span><br><span class="line">#1.where子句可否使用组函数（聚合函数）进行过滤?</span><br><span class="line"># 答：不能，where 后面过滤条件不能跟聚合函数， 而having 后面可以跟聚合函数</span><br><span class="line"></span><br><span class="line">#2.查询公司员工 工资的 最大值,最小值,平均值,总和</span><br><span class="line">select max(salary),min(salary),avg(salary),sum(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">#3.查询各job_id的员工 工资的 最大值,最小值,平均值,总和</span><br><span class="line"></span><br><span class="line">select job_id,max(salary),min(salary),avg(salary),sum(salary)</span><br><span class="line">from employees</span><br><span class="line">group by job_id;</span><br><span class="line"></span><br><span class="line">#4.选择具有各个job_id的员工人数</span><br><span class="line">select job_id , count(1)</span><br><span class="line">from employees</span><br><span class="line">group by job_id;</span><br><span class="line"></span><br><span class="line"># 5.查询员工最高工资和最低工资的差距(DIFFERENCE)</span><br><span class="line">   select max(salary)-min(salary) as &#x27;差距&#x27;</span><br><span class="line">   from employees;</span><br><span class="line"></span><br><span class="line"># 6.查询各个管理者手下 员工的 最低工资,其中最低工资不能低于6000, 没有管理者的员工不计算在内</span><br><span class="line">/*</span><br><span class="line">select  distinct e1.employee_id from employees e1</span><br><span class="line">join employees e2 on e1.manager_id=e2.department_id;</span><br><span class="line"></span><br><span class="line">select * from</span><br><span class="line">(select  distinct e1.employee_id ma_id from employees e1 join employees e2 on e1.manager_id=e2.department_id) a</span><br><span class="line">group by a.ma_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select manager_id, employee_id from employees</span><br><span class="line">where manager_id is not null</span><br><span class="line">group by manager_id ,employee_id;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">select manager_id , min(salary)</span><br><span class="line">from employees</span><br><span class="line">where manager_id is not null</span><br><span class="line">group by manager_id</span><br><span class="line">having min(salary)&gt;6000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 7.查询 所有部门 的名字,location_id,员工数量 和 平均工资, 并按平均工资降序</span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line">select  e.department_id,d.department_name,d.location_id,count(e.employee_id),avg(e.salary) avg_salary</span><br><span class="line">from departments d</span><br><span class="line">left join employees e</span><br><span class="line">on d.department_id=e.department_id</span><br><span class="line">group by d.department_id</span><br><span class="line">order by avg_salary desc ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 8.查询 每个工种、每个部门的部门名、工种名 和 最低工资</span><br><span class="line">select d.department_name ,e.job_id,min(salary)</span><br><span class="line">from departments d</span><br><span class="line">  join employees e  on e.department_id = d.department_id</span><br><span class="line">group by d.department_name ,e.job_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;聚合函数&lt;/center&gt;&lt;/h1&gt;



&lt;h3 id=&quot;1-聚合函数类型（记住聚合函数就这5种）&quot;&gt;&lt;a href=&quot;#1-聚合函数类型（记住聚合函数就这5种）&quot; class=&quot;headerlink&quot; title=&quot;1.聚合函数类型（记住聚合函数就这5</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>4.mysql第7章单行函数.md</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/4.mysql%E7%AC%AC7%E7%AB%A0%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/4.mysql%E7%AC%AC7%E7%AB%A0%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/</id>
    <published>2019-10-03T03:00:00.000Z</published>
    <updated>2024-10-13T16:34:27.467Z</updated>
    
    <content type="html"><![CDATA[<h1><center>单行函数</center></h1><h2 id="MySQL中的函数"><a href="#MySQL中的函数" class="headerlink" title="MySQL中的函数"></a>MySQL中的函数</h2><h2 id="这里我将这些丰富的内置函数再分为两类：单行函数-、-聚合函数-或分组函数"><a href="#这里我将这些丰富的内置函数再分为两类：单行函数-、-聚合函数-或分组函数" class="headerlink" title="这里我将这些丰富的内置函数再分为两类：单行函数 、 聚合函数(或分组函数)"></a>这里我将这些丰富的内置函数再分为两类：单行函数 、 聚合函数(或分组函数)</h2><blockquote><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li>只对一行进行变换</li><li>每行返回一个结果</li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul></blockquote><h2 id="一、单行函数有哪些？"><a href="#一、单行函数有哪些？" class="headerlink" title="一、单行函数有哪些？"></a>一、单行函数有哪些？</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410132347590.png" alt="image-20241013234750343"></p><h3 id="1-常用数值函数"><a href="#1-常用数值函数" class="headerlink" title="1.常用数值函数"></a>1.常用数值函数</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  一、数值函数</span><br><span class="line"> */</span><br><span class="line">#1.返回绝对值</span><br><span class="line">select ABS(-12) from dual; # 12</span><br><span class="line"></span><br><span class="line"># 2.返回数字的符号</span><br><span class="line">select SIGN(-9) from dual; # -1</span><br><span class="line"></span><br><span class="line"># 3.返回圆周率的值</span><br><span class="line">select PI() from dual; # 3.141593</span><br><span class="line"></span><br><span class="line">#4.返回大于或等于某个值的最小整数</span><br><span class="line">select CEIL(12) from dual; #12</span><br><span class="line">select CEIL(0.1) from dual; # 1</span><br><span class="line">select CEILING(-0.1) from dual;#0</span><br><span class="line"></span><br><span class="line">#5.返回列表中的最小值、</span><br><span class="line">select least(11,12,3,0) from dual;</span><br><span class="line"></span><br><span class="line">#6.返回列表中的最大值</span><br><span class="line">select greatest(12,23,55) from dual;</span><br><span class="line"></span><br><span class="line">#7.求余数，取模(工资与3取模) MOD()</span><br><span class="line">select  last_name,salary, MOD(salary,3) from employees;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  ROUND(x)</span><br><span class="line"> 返回一个对x的值进行四舍五入后,最接近于X的整数</span><br><span class="line"> */</span><br><span class="line">select  ROUND(15.6)from dual;</span><br><span class="line">/**</span><br><span class="line">  ROUND(x,y)</span><br><span class="line"> 返回一个对x的值进行四舍五入后最接近X的值,并保留到小数点后面Y位</span><br><span class="line"> */</span><br><span class="line">select ROUND(12.346,2) from dual;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 8.返回数字x截断为y位小数的结果</span><br><span class="line">select TRUNCATE(12.5334,2) from dual;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-常用字符串的操作"><a href="#2-常用字符串的操作" class="headerlink" title="2.常用字符串的操作"></a>2.常用字符串的操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  ------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 二、字符串的操作</span><br><span class="line">注意:MySQL中,字符串的位置是从1开始的。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"># 1.CONCAT(s1,s2,......,sn) 连接s1,s2,......,sn为一个字符串</span><br><span class="line">select concat(&#x27;abc&#x27;,&#x27;def&#x27;) from dual; # abcdef</span><br><span class="line"></span><br><span class="line">#   2.CONCAT_WS(x,s1,s2,......,sn) 同CONCAT(s1,s2,...)函数,但是每个字符串s1,s2,s3...之间要加上x连接</span><br><span class="line">select concat_ws(&#x27;a&#x27;,&#x27;123&#x27;,&#x27;456&#x27;) from dual; # 123a456</span><br><span class="line"></span><br><span class="line">#   3.INSERT(str, idx, len,replacestr) 将字符串str从第idx位置开始,len个字符长的子串替换为字符串replacestr</span><br><span class="line">select insert(&#x27;hello&#x27;,2,3,&#x27;www&#x27;)from dual; # hwwwo</span><br><span class="line"></span><br><span class="line">#   4.UPPER(s) 或 UCASE(s) 将字符串s的所有字母转成大写字母</span><br><span class="line">select UPPER(&#x27;abc&#x27;)from dual;#ABC</span><br><span class="line"></span><br><span class="line">#   5.LOWER(s) 或LCASE(s) 将字符串s的所有字母转成小写字母</span><br><span class="line">select LOWER(&#x27;ABC&#x27;)from dual;</span><br><span class="line"></span><br><span class="line">#   6.LEFT(str,n) 返回字符串str最左边的n个字符</span><br><span class="line">select LEFT(&#x27;hello&#x27;,4) from dual; # hell</span><br><span class="line"></span><br><span class="line">#   7.RIGHT(str,n) 返回字符串str最右边的n个字符</span><br><span class="line">select RIGHT(&#x27;world&#x27;,3)from dual; # rld</span><br><span class="line"></span><br><span class="line">#   8.LTRIM(s)去掉字符串s左侧的空格</span><br><span class="line">select LTRIM(&#x27; hello&#x27;)from dual; #hello</span><br><span class="line"></span><br><span class="line">#   9.FIELD(s,s1,s2,...,sn) 返回字符串s在字符串列表中第一次出现的位置</span><br><span class="line">select FIELD(&#x27;a&#x27;,&#x27;vcf&#x27;,&#x27;asc&#x27;,&#x27;baf&#x27;,&#x27;a&#x27;)from dual; # 4</span><br><span class="line"></span><br><span class="line"># 10.REVERSE(s) 返回s 反转后的字符串</span><br><span class="line">select  reverse(&#x27;lmn&#x27;) from dual; #nml</span><br><span class="line"># 11. NULLIF(value1,value2)  比较两个字符串,如果value1与value2相等,则返回NULL,否则返回value1</span><br><span class="line">select NULLIF(&#x27;a&#x27;,&#x27;a&#x27;) from dual;</span><br><span class="line"></span><br><span class="line"># 注意:MySQL中,字符串的位置是从1开始的。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-时间日期函数"><a href="#3-时间日期函数" class="headerlink" title="3.时间日期函数"></a>3.时间日期函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  三、时间日期函数</span><br><span class="line">1. CURDATE() ,CURRENT_DATE() 返回当前日期,只包含年、月、日</span><br><span class="line">#  CURDATE 获取当前时间， 年-月-日</span><br><span class="line">2. CURTIME() , CURRENT_TIME() 返回当前时间,只包含时、分、秒</span><br><span class="line">3. NOW()  / SYSDATE() / CURRENT_TIMESTAMP() / LOCALTIME() / LOCALTIMESTAMP() 返回当前系统日期和时间</span><br><span class="line">4. UTC_DATE() 返回UTC(世界标准时间)日期</span><br><span class="line">5. UTC_TIME() 返回UTC(世界标准时间)时间</span><br><span class="line"></span><br><span class="line">#  DATEDIFF(当前时间,已知时间) 时间间隔多少天</span><br><span class="line">#  DATEDIFF(CURDATE(),&#x27;1997-01-01&#x27;) 时间间隔多少天</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  练习</span><br><span class="line"> */</span><br><span class="line"># 1.显示系统时间(注:日期+时间)</span><br><span class="line">  select now() from dual;</span><br><span class="line"></span><br><span class="line"># 2.查询员工号,姓名,工资,以及工资提高百分之20%后的结果(new salary)</span><br><span class="line">select employee_id &quot;工号&quot; , last_name &quot;姓名&quot; , salary &quot;工资&quot; ,  salary *(1+0.2)  &quot;new salary&quot;</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"># 3.将员工的姓名按首字母排序,并写出姓名的长度(length)</span><br><span class="line">select e.last_name, length(e.last_name)</span><br><span class="line">from employees e</span><br><span class="line">order by e.last_name asc;</span><br><span class="line"></span><br><span class="line"># 4.查询员工id,last_name,salary,并作为一个列输出,别名为OUT_PUT</span><br><span class="line"># CONCAT(s1,s2,......,sn) 连接s1,s2,......,sn为一个字符串  将几个字段连接起来，CONCAT(,,)</span><br><span class="line">select CONCAT(employee_id ,&#x27;,&#x27;,last_name ,&#x27;,&#x27;, salary ) as OUT_PUT  from employees;</span><br><span class="line"></span><br><span class="line"># 5.查询公司各员工工作的年数、工作的天数,并按工作年数的降序排序</span><br><span class="line"># ROUND() 保留整数，四舍五入，</span><br><span class="line"># DATEDIFF(date1,date2) 返回date1 - date2的日期间隔天数</span><br><span class="line">select now()from dual;</span><br><span class="line"># now()  返回当前日期,只包含年、月、日 时、分、秒;</span><br><span class="line">select CURDATE() from dual;</span><br><span class="line"># CURDATE() 返回当前日期,只包含年、月、日 2024-10-13</span><br><span class="line"></span><br><span class="line">select  employee_id,last_name, ROUND(DATEDIFF(CURDATE(),hire_date)/365)  &quot;worked_year&quot;,DATEDIFF(CURDATE(),hire_date) &quot;worked_days&quot;</span><br><span class="line">from employees</span><br><span class="line">order by worked_year desc;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6.查询员工姓名,hire_date , department_id,满足以下条件:</span><br><span class="line"># 雇用时间在1997年之后,department_id 为80 或 90 或110, commission_pct不为空</span><br><span class="line"># STR_TO_DATE(str, fmt)  按照字符串fmt格式&#x27;%Y-%m-%d&#x27; 对str进行解析,解析为一个日期</span><br><span class="line"># hire_date&gt;=STR_TO_DATE(&#x27;1997-01-01&#x27;,&#x27;%Y-%m-%d&#x27;);</span><br><span class="line">select last_name,hire_date,department_id from employees</span><br><span class="line">where  department_id in(80,90,110)</span><br><span class="line">  and commission_pct IS NOT NULL</span><br><span class="line">#   and hire_date &gt;=&#x27;1997-01-01&#x27;; # 直接也可以写，隐式转换</span><br><span class="line">and hire_date&gt;=STR_TO_DATE(&#x27;1997-01-01&#x27;,&#x27;%Y-%m-%d&#x27;);</span><br><span class="line"></span><br><span class="line"># 7.查询公司中入职超过10000天的员工姓名、入职时间</span><br><span class="line"></span><br><span class="line">select last_name,hire_date</span><br><span class="line">from employees</span><br><span class="line">where DATEDIFF(CURDATE(),hire_date) &gt;= 10000;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 连接字符串</span><br><span class="line">  # 8.做一个查询,产生下面的结果</span><br><span class="line">-- 字符串-&lt;last_name&gt; earns `&lt;salary&gt;` monthly but wants &lt;salary*3&gt;</span><br><span class="line">--        Dream Salary</span><br><span class="line">-- King earns 24000 monthly but wants 72000</span><br><span class="line"> */</span><br><span class="line"> select CONCAT(last_name,&#x27; earns &#x27;,salary,&#x27; monthly but wants &#x27;,salary*3) as &quot;Dream salary&quot; from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#  DATEDIFF(当前时间,已知时间) 时间间隔多少天</span><br><span class="line">#  DATEDIFF(CURDATE(),&#x27;1997-01-01&#x27;) 时间间隔多少天</span><br><span class="line">#  CURDATE 获取当前时间， 年-月-日</span><br><span class="line">#  CONCAT(s1,s2,s3) 连接字符串s1s2s3</span><br><span class="line">#  ROUND(12.5) #13 四舍五入不保留小数</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-流程控制函数"><a href="#4-流程控制函数" class="headerlink" title="4.流程控制函数"></a>4.流程控制函数</h3><p>流程处理函数可以根据不同的条件,执行不同的处理流程,可以在SQL语句中实现不同的条件选择。<br>MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><ul><li><h3 id="CASE-WHEN-…判断逻辑…-THEN-…-结果"><a href="#CASE-WHEN-…判断逻辑…-THEN-…-结果" class="headerlink" title="CASE WHEN …判断逻辑… THEN ….结果"></a>CASE WHEN …判断逻辑… THEN ….结果</h3></li></ul><blockquote><p>CASE WHEN …… THEN ….<br> 相当于Java的if…else if…else…</p></blockquote><ul><li><h3 id="CASE-字段-WHEN-‘要匹配的值’-THEN-操作逻辑"><a href="#CASE-字段-WHEN-‘要匹配的值’-THEN-操作逻辑" class="headerlink" title="CASE 字段  WHEN  ‘要匹配的值’  THEN 操作逻辑"></a>CASE 字段  WHEN  ‘要匹配的值’  THEN 操作逻辑</h3></li></ul><blockquote><p> 修订工资<br> 要求：工作名称为  IT_PROG  工资   1.10*salary</p><p> CASE 字段 WHEN ‘要匹配的值’ THEN 操作逻辑</p><p> 相当于 Java 的 switch…case…</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  四、流程处理函数可以根据不同的条件,执行不同的处理流程</span><br><span class="line">  练习 CASE ... WHEN ... THEN ...</span><br><span class="line">  相当于Java的switch...case...</span><br><span class="line"></span><br><span class="line">  9.使用CASE-WHEN,按照下面的条件:</span><br><span class="line">--job      grade</span><br><span class="line">--AD_PRES    A</span><br><span class="line">--ST_MAN     B</span><br><span class="line">--IT_PROG    C</span><br><span class="line">--SA_REP     D</span><br><span class="line">--ST_CLERK   E</span><br><span class="line"></span><br><span class="line">-- 产生下面的结果</span><br><span class="line">-- Last_name    Job_id    Grade</span><br><span class="line">-- king         AD_PRES    A</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">SELECT last_name Last_name, job_id Job_id,</span><br><span class="line">       CASE job_id WHEN &#x27;AD_PRES&#x27; THEN &#x27;A&#x27;</span><br><span class="line">WHEN &#x27;ST_MAN&#x27; THEN &#x27;B&#x27;</span><br><span class="line">WHEN &#x27;IT_PROG&#x27; THEN &#x27;C&#x27;</span><br><span class="line">WHEN &#x27;SA_REP&#x27; THEN &#x27;D&#x27;</span><br><span class="line">WHEN &#x27;ST_CLERK&#x27; THEN &#x27;E&#x27;</span><br><span class="line">ELSE &#x27;F&#x27;</span><br><span class="line">END &quot;grade&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   CASE WHEN ...... THEN ....</span><br><span class="line">  相当于Java的if...else if...else...</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> SELECT employee_id,salary, CASE WHEN salary&gt;=15000 THEN &#x27;高薪&#x27;</span><br><span class="line">WHEN salary&gt;=10000 THEN &#x27;潜力股&#x27;</span><br><span class="line">WHEN salary&gt;=8000 THEN &#x27;屌丝&#x27;</span><br><span class="line">ELSE &#x27;草根&#x27; END</span><br><span class="line"> &quot;描述&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  修订工资</span><br><span class="line">  要求：工作名称为 IT_PROG 工资 1.10*salary</span><br><span class="line">        ........</span><br><span class="line">        </span><br><span class="line">  CASE 字段 WHEN &#x27;要匹配的值&#x27; THEN 操作逻辑</span><br><span class="line">  </span><br><span class="line">  相当于Java的switch...case...</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">SELECT last_name, job_id, salary,</span><br><span class="line">CASE job_id WHEN &#x27;IT_PROG&#x27; THEN 1.10*salary</span><br><span class="line">WHEN &#x27;ST_CLERK&#x27; THEN 1.15*salary</span><br><span class="line">WHEN &#x27;SA_REP&#x27; THEN 1.20*salary</span><br><span class="line">ELSE salary</span><br><span class="line">END &quot;REVISED_SALARY&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-聚合函数类型（记住聚合函数就这5种）"><a href="#5-聚合函数类型（记住聚合函数就这5种）" class="headerlink" title="5.聚合函数类型（记住聚合函数就这5种）"></a>5.聚合函数类型（记住聚合函数就这5种）</h3><blockquote><p>AVG(字段) 求平均值<br> SUM(字段) 求和<br> MAX(字段) 求最大值<br> MIN(字段) 求最小值<br> COUNT(某字段) 求字段有多少个<br> 注意1：聚合函数一般是配合 group by 分组 来使用的<br>   select  MAX(salary) from employees;<br> 注意2：where 后面不能跟 聚合函数<br> 注意3：聚合函数不能嵌套使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  五、聚合函数类型（记住聚合函数就这5种）</span><br><span class="line">  AVG(字段) 求平均值</span><br><span class="line">  SUM(字段) 求和</span><br><span class="line">  MAX(字段) 求最大值</span><br><span class="line">  MIN(字段) 求最小值</span><br><span class="line">  COUNT(某字段) 求字段有多少个</span><br><span class="line">  注意1：聚合函数一般是配合 group by 分组 来使用的</span><br><span class="line">    select  MAX(salary) from employees;</span><br><span class="line">  注意2：where 后面不能跟 聚合函数</span><br><span class="line">  注意3：聚合函数不能嵌套使用</span><br><span class="line"></span><br><span class="line"># 练习： 求 所有人中，最高工资的那个人</span><br><span class="line">  错误的写法：</span><br><span class="line"> 有矛盾之处，查这张员工表，求出 最大工资的那个，应该是1个结果，而字段中还有last_name字段是表示显示表employees中所有人的姓名，有冲突</span><br><span class="line"> select last_name, MAX(salary) from employees;</span><br><span class="line"> # 正确写法：求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">  select employee_id, last_name, salary from employees</span><br><span class="line">    where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line">select  MAX(salary) from employees;</span><br><span class="line"></span><br><span class="line"># 求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">select employee_id, last_name, salary from employees</span><br><span class="line">where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line">#聚合函数，配合group by 使用：按照部门分组，求出每个部门中最高工资</span><br><span class="line">select department_id,MAX(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  统计个数的字段</span><br><span class="line">  COUNT()</span><br><span class="line">  # 字段commission_pct有35行有值，null不统计</span><br><span class="line"> */</span><br><span class="line">select COUNT(commission_pct) from employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select e.last_name,</span><br><span class="line">       CASE d.department_id</span><br><span class="line">           WHEN 10 THEN e.salary * 1.1</span><br><span class="line">           when 20 then e.salary * 1.2</span><br><span class="line">           ELSE e.salary END</span><br><span class="line">from employees e</span><br><span class="line">         join departments d on e.department_id = d.department_id</span><br><span class="line">where d.department_id in (10, 20, 30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  --------------------------------------group---by----字段分组的使用-------------------------------------------------</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  分组：</span><br><span class="line">对于 group by 分组的理解</span><br><span class="line"></span><br><span class="line"># 结论1：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"># 反正就是，只要出现了分组， 在select 后面声明的字段 ，在 group by 后面要全部都给写上，并且select 后面一定要有一个聚合函数，来计算组意图结果。</span><br><span class="line"></span><br><span class="line"># 结论2：group by 声明在from后面、where后面,      order by 排序前面、limit 分页前面。 （可以理解，结果集群都都处理完毕，在进行排序，和分页）</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line"># 求所有员工的 工资平均值  AVG = SUM / COUNT(1)</span><br><span class="line">select SUM(salary) / count(1) from employees;</span><br><span class="line"># 求所有员工的 工资平均值</span><br><span class="line">select avg(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 查询   每个部门 有多少人</span><br><span class="line"># 先找到employees表</span><br><span class="line"># 然后group by 按照department_id 部门分组，有null,10，20，30，40，50，60，70，80，90，100这12个部门,此时结果集已经形成12条数据，12个部门</span><br><span class="line"># 随后 count(1)  再次限定结果集，将每个部门多少人求出来</span><br><span class="line">select department_id ,count(1)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 每个部门中 的 平均工资是多少</span><br><span class="line"># 求每个部门的 平均工资</span><br><span class="line">select department_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 先找到employees表</span><br><span class="line">#  然后group by 按照department_id 部门分组，在按照 工种job_id 进行 分组。</span><br><span class="line"># 比如90号部门的AD_PRES 在一行，90号部门的AD_VP工种 在一行，求平均工资值。</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line">#错误写法 这种错误就是 按照 department_id分组后的结果集，</span><br><span class="line"># 在select 后面的语句，并没有进行操作，只要显示last_name</span><br><span class="line"># 这里 按照 department_id分组后，展示字段last_name ，不可能的事情，是错误的写法</span><br><span class="line">select department_id ,last_name</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 错误写法</span><br><span class="line"># 只按照 department_id 进行分组，不能查到job_id 字段</span><br><span class="line">select department_id,job_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 结论：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 结论3.</span><br><span class="line"></span><br><span class="line">只要看见sql语句中有group by 就要想，结果集是 进行分组的结果， select 后面的字段，就是分组的字段，聚合函数就是对这分组后的操作。</span><br><span class="line">        如果分组后的结果继续筛选，就要使用having 进行筛选， 后面跟的是聚合函数。</span><br><span class="line">         这里不能使用where ,where  可以直接使用表中的字段作为筛选条件,但不能使用分组中的 聚合函数 作为筛选条件;</span><br><span class="line">  HAVING 必须要与 GROUP BY 配合使用,可以把分组计算的聚合函数和分组字段作为筛选条件。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按照部门分组，部门有 null,10,20,30,40,50,60,70,80,90,100,110</span><br><span class="line">select department_id  from employees</span><br><span class="line">group by department_id;</span><br><span class="line">#按照 部门和工资分组</span><br><span class="line"># 一个部门中有很多人工资不一样，一样的分为一组 如：90号部门工资有两种24000，17000</span><br><span class="line">select department_id ,salary from employees</span><br><span class="line">group by department_id,salary;</span><br><span class="line">#求 每个部门中 工资最高是多少</span><br><span class="line">select department_id , max(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 每个部门中最高工资 ，且最高工资超过10000的部门。</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 50，90，110 部门中，最高工资超过10000的部门是那几个。</span><br><span class="line"># 这里 where 后面的条件 是先筛选 符合条件的部门，提高了查询速度</span><br><span class="line">#     having 后面的筛选条件，记住就跟聚合函数</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">where department_id in(50,90,110)</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># ----------------牢记sql语句的执行过程----------------------</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;单行函数&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;MySQL中的函数&quot;&gt;&lt;a href=&quot;#MySQL中的函数&quot; class=&quot;headerlink&quot; title=&quot;MySQL中的函数&quot;&gt;&lt;/a&gt;MySQL中的函数&lt;/h2&gt;&lt;h2 id=&quot;这里我将这</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>3.mysql第6章多表联合查询</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/3.mysql%E7%AC%AC6%E7%AB%A0%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/3.mysql%E7%AC%AC6%E7%AB%A0%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</id>
    <published>2019-10-03T02:00:00.000Z</published>
    <updated>2024-10-15T15:07:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1><center>多表联合查询.md</center></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  第六章：多表联查</span><br><span class="line">        在现实情况中，查询字段不在同一张表中，就需要多张表进行联合查询</span><br><span class="line">        多表联查，需要有 连接条件</span><br><span class="line">  注意：在多表联查的时候，多张表请务必取别名，使用别名，指定字段是哪个表中的，这样提高查询的速度</span><br><span class="line"></span><br><span class="line">  sql 的执行顺序是：</span><br><span class="line">        1.先执行from 挑出表</span><br><span class="line">            from 表1，表2.(挑出这两个表来)</span><br><span class="line">        2.执行where 筛选条件，以及后面的语句</span><br><span class="line">            where 筛选条件</span><br><span class="line">            order by</span><br><span class="line">            limit 0,10;</span><br><span class="line">        3.最后挑选出需要的字段</span><br><span class="line">            select 指定字段</span><br><span class="line">  所以在from 后面给表起了别名，就会覆盖原表名，在后续的order by ...等等的语句中，必须使用表的别名来指定</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 查询员工表</span><br><span class="line">select *</span><br><span class="line">from employees;</span><br><span class="line">## 查询部门表</span><br><span class="line">select *</span><br><span class="line">from departments;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   sql  99版本的写法</span><br><span class="line">        多表联查</span><br><span class="line">        两个 交表，又叫两个表联查</span><br><span class="line">    多表查询的分类</span><br><span class="line">        角度1： 等值连接 vs 非等值连接</span><br><span class="line">        角度2： 自连接 vs 非自连接</span><br><span class="line">        角度3： 内连接 VS 外连接</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 将 员工表和部门表进行联合查询</span><br><span class="line">## 这种92写法 不用</span><br><span class="line">## 等值连接</span><br><span class="line">select *</span><br><span class="line">from employees e,</span><br><span class="line">     departments d</span><br><span class="line">where e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line">## 非等值连接</span><br><span class="line">select *</span><br><span class="line">from employees e,</span><br><span class="line">     job_grades jg</span><br><span class="line">where e.salary between jg.lowest_sal and jg.highest_sal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  自连接 VS 非自连接</span><br><span class="line">    表：表，自己连接自己</span><br><span class="line"> */</span><br><span class="line"># 自连接，练习：查询员工id 员工姓名 及其管理者id以及姓名</span><br><span class="line"># 思路：管理者也是员工，员工表自己连接自己，将一张表看作是 员工表，另一张表看作是 管理者表</span><br><span class="line"># 内连接：使用 join  on  (取两个表交集的结果，满足on 条件的所有结果)</span><br><span class="line"># 得到的结果是 满足on 后面的 条件的</span><br><span class="line">select e.employee_id, e.last_name, e.manager_id, gl.employee_id, gl.last_name, gl.manager_id</span><br><span class="line">from employees e</span><br><span class="line">         join employees gl</span><br><span class="line">              on e.employee_id = gl.manager_id</span><br><span class="line">order by e.salary desc;</span><br></pre></td></tr></table></figure><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><ul><li>表1 join 表2</li></ul><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><ul><li>左外连接 left …join…on..</li><li>右外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  内连接vs外连接</span><br><span class="line"></span><br><span class="line">  内连接：合并具有同一列的两个以上的表的行，结果集中 不包含一个表与另一个表不匹配的行</span><br><span class="line">  外连接：合并具有同一列的两个以上的表的行,结果集中除了包含一个表与另一个表匹配的行之外,还查询到了左表或右表中不匹配的行。</span><br><span class="line">            左外连接：查询的结果集中，包含左表的所有值(左表中不匹配的行,也会存在)，以及on后面条件，两个表之间匹配的行</span><br><span class="line">            右外连接：查询的结果集中，包含右表的所有值(右表中不匹配的行,也会存在)，以及on后面条件，两个表之间匹配的行</span><br><span class="line">            满外连接：左表，右表所有的匹配的行取出来，也包括有 左表不匹配的行，以及右表不匹配的行。</span><br><span class="line">    左外连接:两个表在连接过程中除了返回满足连接条件的行以外，还返回左表中不满足条件的行。</span><br><span class="line">    右外连接:两个表在连接过程中除了返回满足连接条件的行以外，还返回右表中不满足条件的行。</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line">  内连接</span><br><span class="line">   employees员工表107行数据。 departments是 部门表</span><br><span class="line">  # 下面语句结果集有106行，因为employees员工表中有一个人的 department_id为null 它没有部门，所以结果中没有它</span><br><span class="line">    # 其他所有人都有 department_id ，所有人都有部门。所以结果 106条（取两表匹配的行组成结果集，取交集）</span><br><span class="line">  练习：查询员工 last name 姓名 ,department_name部门姓名 信息（这里面是查询员工的，部门信息，有的员工没有存在任何一个部门那么结果就不返回，这里是内连接取交集）</span><br><span class="line"> */</span><br><span class="line">select *</span><br><span class="line">from employees e</span><br><span class="line">         join departments d on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 左外连接</span><br><span class="line">  employees员工表107行数据。 departments是 部门表</span><br><span class="line">   练习：查询所有的员工 last name 姓名 ,department_name部门姓名 信息</span><br><span class="line">  （这里面是查询所有员工的，部门信息，即使员工不存在部门，员工信息也要返回，所以是 左外连接 查询，查询结果是 所有员工匹配所有部门的行，以及包括不存在部门的员工信息行也在结果集中）</span><br><span class="line"># 结果是 左表所有值，以及 满足条件的交集值</span><br><span class="line"># 结果107行，虽然employees员工表中King的 department_id为null 它没有部门，但是这个left join 左表所有员工都展示出来，交表部分没有值就null 着</span><br><span class="line">#                                                                               department_id</span><br><span class="line"># 178,Kimberely,Grant,KGRANT,011.44.1644.429263,1999-05-24,SA_REP,7000,0.15,149,    null,       null,null,null,</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select *</span><br><span class="line">from employees e</span><br><span class="line">         left join departments d on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  满外连接</span><br><span class="line">   mysql 不支持满外连接 FULL JOIN ON</span><br><span class="line">   可以通过其他方式实现满外链接</span><br><span class="line"></span><br><span class="line">  一般在使用满外链接，使用到合并多个结果集的操作</span><br><span class="line"></span><br><span class="line">  使用 UNION 操作符 合并查询结果</span><br><span class="line">  UNION操作符返回两个查询的结果集的并集,去除重复记录.（多一步去重操作）</span><br><span class="line">  开发中一般使用</span><br><span class="line">    UNION ALL  进行 两个查询结果集求并集，不去重，效率高</span><br><span class="line">结论:如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据，则尽量使用UMION ALL语句,以提高数据查询的效率</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一"><a href="#注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一" class="headerlink" title="注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一"></a>注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一</h3><h2 id="二、七种JOIN的实现"><a href="#二、七种JOIN的实现" class="headerlink" title="二、七种JOIN的实现"></a>二、七种JOIN的实现</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410082319686.jpg" alt="Snipaste_2024-10-08_23-15-32"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># 中图：内连接（只要两表之间的共同满足条件的部分）</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e join departments d</span><br><span class="line">on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"># 左上图：左外连接</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e left join departments d</span><br><span class="line">                   on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"># 右上图：右外连接</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e right join departments d</span><br><span class="line">                    on d.department_id = e.department_id;</span><br><span class="line"></span><br><span class="line"># 左中图</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e left join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line">where d.department_id is NULL;</span><br><span class="line"></span><br><span class="line">#右中图</span><br><span class="line">select e.employee_id,d.department_name from</span><br><span class="line">employees e right join departments d</span><br><span class="line">on e.department_id = d.department_id</span><br><span class="line">where e.department_id is null;</span><br><span class="line"></span><br><span class="line"># 左下图：满外链接</span><br><span class="line"># 实现满外链接查询</span><br><span class="line">#  方法一： 使用 左上图和右中图，进行UNIN ALL 合并结果集，并给这两个图没有重复部分，所以可以使用UNIN ALL 不用去重操作，效率还快</span><br><span class="line">select e.employee_id,d.department_name from</span><br><span class="line">employees e</span><br><span class="line">left join departments d</span><br><span class="line">on e.department_id=d.department_id # (左外连接)</span><br><span class="line">UNION ALL</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e right join departments d</span><br><span class="line">    on d.department_id = e.department_id</span><br><span class="line">where e.department_id is null ;</span><br><span class="line"></span><br><span class="line"># 方法二：</span><br><span class="line"># 左中图和右上图 合并</span><br><span class="line">select e.last_name, e.manager_id, e.department_id, d.department_name, d.department_id</span><br><span class="line">from employees e</span><br><span class="line">         left join departments d</span><br><span class="line">                   on e.employee_id = d.manager_id # 左外连接 去除结果中匹配的行，只剩下一个不匹配的</span><br><span class="line">where e.department_id is null</span><br><span class="line">UNION ALL# 合并结果集</span><br><span class="line">select e.last_name, e.manager_id, e.department_id, d.department_name, d.department_id</span><br><span class="line">from employees e</span><br><span class="line">         right join departments d</span><br><span class="line">                    on e.department_id = d.department_id;# 右外连接，得到满足条件的所有行，以及右表的所有数据</span><br><span class="line"></span><br><span class="line"># 上面两个结果及合并，正好是满外链接。上面两个结果集，不存在重复的数据，直接使用UNION ALL 就可以还提升效率</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 右下图：满外链接，去除 满足条件的中间公共部分</span><br><span class="line"># 使用左中图和右中图进行合并 UNION ALL</span><br><span class="line">select e.employee_id,d.department_name from employees e</span><br><span class="line">left join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line">where e.department_id is null</span><br><span class="line">UNION ALL</span><br><span class="line">select e.employee_id,d.department_name from employees e</span><br><span class="line">right join departments d</span><br><span class="line">on d.department_id=e.department_id</span><br><span class="line">where e.department_id is null ;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><p>我们要 控制连接表的数量 。多表连接就相当于嵌套 for 循环一样,非常消耗资源,会让 SQL 查询性能下<br>降得很严重,因此不要连接不必要的表。在许多 DBMS 中,也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段,数据类型保持绝对一致;多表关联查询时, 保<br>证被关联的字段需要有索引。<br>说明:即使双表 join 也要注意表索引、SQL 性能。<br>来源:阿里巴巴《Java开发手册》</p></blockquote><h2 id="多表查询的理解"><a href="#多表查询的理解" class="headerlink" title="多表查询的理解"></a>多表查询的理解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 8. 查询哪个城市没有部门</span><br><span class="line">desc locations;</span><br><span class="line">desc departments;</span><br><span class="line"></span><br><span class="line">select l.city,d.location_id</span><br><span class="line">from departments d right join locations l on d.location_id = l.location_id</span><br><span class="line">where d.location_id is  null;</span><br><span class="line"></span><br><span class="line"># 从from 后面 开始读,departments 部门表和 locations 地址表 连接</span><br><span class="line"># (on 后面的条件 可先想两个表之间是 多对多 还是 1对多,如上 部门可以存在 多个 城市中,on后面是取部门在这个城市的行, 部门也可以不在这个城市 部门的locationid也可以是null 如果是left join 表示 部门不存在城市中的值也要 )</span><br><span class="line"># on 后面的意思是</span><br><span class="line"># 部门表中 有 location_id 地址id 的数据全部取出来.</span><br><span class="line"># 如果 部门表中的某一行中的 地址id 是null 这个部门没有对应的城市</span><br><span class="line"></span><br><span class="line"># 反之: join  表示 location 表中的 部门存在的数据 全部取出来</span><br><span class="line">#      right join  表示地址表 location 表 的所有数据取出来,包括有城市,不存在部门,部门id为null的数据也取出来.</span><br><span class="line"># where d.location_id is  null; 表示交表后结果集取出,部门是null的数据,就是城市没有部门的数据</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 练习:</span><br><span class="line"># 1.显示所有员工的姓名,部门号和部门名称。</span><br><span class="line"># 2.查询90号部门员工的job_id和90号部门的location_id</span><br><span class="line"># 3.选择所有有奖金的员工的 last_name , department_name , location_id , city</span><br><span class="line"># 4.选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name</span><br><span class="line"># 5.查询员工所在的部门名称、部门地址、姓名、工作、工资,其中员工所在部门的部门名称为’Executive’</span><br><span class="line"># 6.选择指定员工的姓名,员工号,以及他的管理者的姓名和员工号,结果类似于下面的格式</span><br><span class="line"># 7.查询哪些部门没有员工</span><br><span class="line"># 8. 查询哪个城市没有部门</span><br><span class="line"># 9. 查询部门名为 Sales 或 IT 的员工信息</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> # 1.显示所有员工的姓名,部门号和部门名称。</span><br><span class="line"># 注意这里是所有员工,就要求 员工表的所有数据都显示出来</span><br><span class="line"></span><br><span class="line">select * from employees;</span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line">select e.last_name,e.department_id,d.department_name</span><br><span class="line">from employees e left join departments d</span><br><span class="line">on e.department_id=d.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 工作职位等级,最低最高工资</span><br><span class="line">select * from job_grades;</span><br><span class="line"># 工作时间记录 入职时间,离职时间</span><br><span class="line">select * from job_history;</span><br><span class="line"># 工作表 工作名称 最高工资,最低工资</span><br><span class="line">select * from jobs;</span><br><span class="line">#实际住址表</span><br><span class="line">select * from locations;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2.查询 90号部门  员工的job_id和90号部门的location_id</span><br><span class="line"># 思路  内连接 员工表和部门表,找到所有员工存在部门的数据集</span><br><span class="line"># 员工表中有 部门id, 部门表 departments 中 有 location_id 地址id</span><br><span class="line"></span><br><span class="line">select e.job_id,d.location_id</span><br><span class="line">from departments d join employees e</span><br><span class="line">on d.department_id=e.department_id</span><br><span class="line">where d.department_id=90;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3.查询所有 有奖金的员工的 last_name , department_name , location_id , city</span><br><span class="line"># 这里面 有个人,有奖金,但是没有部门,也要显示出来,对应也没有城市,也要显示出来</span><br><span class="line"># 所以都是左外连接</span><br><span class="line">select e.last_name,d.department_name,l.location_id,l.city</span><br><span class="line">from employees e</span><br><span class="line">left join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line">left join locations l</span><br><span class="line">on d.location_id=l.location_id</span><br><span class="line">where e.commission_pct is not null ;</span><br><span class="line"></span><br><span class="line">#4.选择city在Toronto 工作的员工的 last_name , job_id , department_id , department_name</span><br><span class="line"></span><br><span class="line">select e.last_name,e.job_id,e.department_id,d.department_name</span><br><span class="line">from employees e  join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line"> join locations l</span><br><span class="line">    on d.location_id = l.location_id</span><br><span class="line">where l.city=&#x27;Toronto&#x27;;</span><br><span class="line"></span><br><span class="line"># 总结: 写多表联查的时候,先看字段来自于哪些表,再看表与表之间用什么字段连接, 先直接写join on 连接,写完后再考虑是外连接还是内连接;</span><br><span class="line"></span><br><span class="line"># 5.查询员工所在的 部门名称、部门地址、姓名、工作、工资, 其中员工所在部门的部门名称为’Executive’</span><br><span class="line"></span><br><span class="line">select d.department_name,l.street_address,e.last_name,e.job_id,e.salary</span><br><span class="line">from departments d join employees e</span><br><span class="line"> on d.department_id = e.department_id</span><br><span class="line">join locations l on d.location_id = l.location_id</span><br><span class="line">where d.department_name=&#x27;Executive&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6.选择 指定员工 的姓名,员工号,以及他的管理者的姓名和员工号,结果类似于下面的格式</span><br><span class="line"># employees  Emp # manager Mgr#</span><br><span class="line"># kochhar  101  king  100</span><br><span class="line">select * from employees;</span><br><span class="line"># 员工表的自连接</span><br><span class="line">select Emp.last_name,Emp.employee_id,Mgr.last_name,Mgr.employee_id</span><br><span class="line">from employees Emp left join  employees Mgr</span><br><span class="line">on Emp.manager_id=Mgr.employee_id;</span><br><span class="line"></span><br><span class="line"># 7.查询哪些部门没有员工</span><br><span class="line">select * from employees e right join departments d on e.department_id = d.department_id</span><br><span class="line">where e.employee_id is null;</span><br><span class="line"># 8. 查询哪个城市没有部门</span><br><span class="line">desc locations;</span><br><span class="line">desc departments;</span><br><span class="line"></span><br><span class="line">select l.city,d.location_id</span><br><span class="line">from departments d right join locations l on d.location_id = l.location_id</span><br><span class="line">where d.location_id is  null;</span><br><span class="line"></span><br><span class="line"># 从from 后面 开始读,departments 部门表和 locations 地址表 连接</span><br><span class="line"># (on 后面的条件 可先想两个表之间是 多对多 还是 1对多,如上 部门可以存在 多个 城市中,on后面是取部门在这个城市的行, 部门也可以不在这个城市 部门的locationid也可以是null 如果是left join 表示 部门不存在城市中的值也要 )</span><br><span class="line"># on 后面的意思是</span><br><span class="line"># 部门表中 有 location_id 地址id 的数据全部取出来.</span><br><span class="line"># 如果 部门表中的某一行中的 地址id 是null 这个部门没有对应的城市</span><br><span class="line"></span><br><span class="line"># 反之: join  表示 location 表中的 部门存在的数据 全部取出来</span><br><span class="line">#      right join  表示地址表 location 表 的所有数据取出来,包括有城市,不存在部门,部门id为null的数据也取出来.</span><br><span class="line"># where d.location_id is  null; 表示交表后结果集取出,部门是null的数据,就是城市没有部门的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from locations;</span><br><span class="line"></span><br><span class="line"># 9. 查询  部门名为 Sales 或 IT 的 员工信息</span><br><span class="line">select e.last_name,d.department_name</span><br><span class="line">from employees e join departments d on e.department_id=d.department_id</span><br><span class="line">where d.department_name in (&#x27;Sales&#x27;,&#x27;IT&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习-二"><a href="#练习-二" class="headerlink" title="练习 二"></a>练习 二</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> #1.所有有门派的人员信息</span><br><span class="line">#     ( A、B两表共有)</span><br><span class="line">select * from t_dept;# 门派表</span><br><span class="line"></span><br><span class="line">select * from t_emp;# 人员表</span><br><span class="line"></span><br><span class="line">select * from</span><br><span class="line">t_dept d left join t_emp e</span><br><span class="line">on d.id=e.deptId;</span><br><span class="line"></span><br><span class="line"># on 后面 读作 门派中有 人 的数据 取出来.</span><br><span class="line"># 题目中要求所有门派,那么门派中也可能没有人,所以使用的是 left join 左外连接, 将所有门派给取出来.</span><br><span class="line"># 门派中有人,门派中没人都取出来</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;多表联合查询.md&lt;/center&gt;&lt;/h1&gt;



&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>2.mysql第5章排序和分页</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/2.mysql%E7%AC%AC5%E7%AB%A0%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%A1%B5/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/2.mysql%E7%AC%AC5%E7%AB%A0%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%A1%B5/</id>
    <published>2019-10-03T01:00:00.000Z</published>
    <updated>2024-10-08T15:27:18.886Z</updated>
    
    <content type="html"><![CDATA[<h1><center>排序和分页</center></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  第五章：排序   order by  asc(升序默认) desc(降序)</span><br><span class="line">         与</span><br><span class="line">         分页 limit 偏移量，每页展示条数</span><br><span class="line">            pageNO 表示当前页码</span><br><span class="line">          limit (pageNO-1)*pageSize, pageSize;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 排序  order by  和 limit 0,10 一般都是在sql语句最后，sql结果集，进行排序，排完序进行分页</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 按照salary 降序排列</span><br><span class="line">select * from employees</span><br><span class="line">order by salary desc ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示第1页，每页显示10条</span><br><span class="line">select * from employees</span><br><span class="line">limit 0,10;</span><br><span class="line"></span><br><span class="line"># 显示员工表 第32条第33条的信息</span><br><span class="line">select *  from employees</span><br><span class="line">limit 31,2;</span><br><span class="line"></span><br><span class="line"># where ... order by ... limit</span><br><span class="line"># 使用顺序,limit 是最后的。</span><br><span class="line">#  下面的执行顺序是</span><br><span class="line">select employee_id,last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;6000</span><br><span class="line">order by salary desc</span><br><span class="line">limit 10,10;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序分页练习"><a href="#排序分页练习" class="headerlink" title="排序分页练习"></a>排序分页练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  练习</span><br><span class="line">    #1. 查询员工的姓名和部门号和年薪,按年薪降序,按姓名升序显示</span><br><span class="line">    #2. 选择工资不在 8000 到 17000 的员工的姓名和工资,按工资降序,显示第21到40位置的数据</span><br><span class="line">    #3. 查询邮箱中包含 e 的员工信息,并先按邮箱的字节数降序,再按部门号升序</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #1. 查询员工的 姓名和 部门号和 年薪,  按年薪降序,  按姓名升序显示</span><br><span class="line"></span><br><span class="line">select last_name name ,department_id bm, salary*(1+IFNULL(commission_pct,0))*12  nx</span><br><span class="line">from employees</span><br><span class="line">order by nx desc,name asc;</span><br><span class="line"></span><br><span class="line">#2. 选择工资不在 8000 到 17000 的员工的姓名和工资,按工资降序,显示第21到40位置的数据</span><br><span class="line"></span><br><span class="line">select last_name,salary from employees</span><br><span class="line">where salary not between 8000 and 17000</span><br><span class="line">order by salary desc</span><br><span class="line">limit 20 ,20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3. 查询邮箱中包含 e 的员工信息,并先按邮箱的字节数降序,再按部门号升序</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where email like &#x27;%e%&#x27;</span><br><span class="line">order by length(email)  desc, department_id asc;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;排序和分页&lt;/center&gt;&lt;/h1&gt;

&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>1.mysql1~4章学习</title>
    <link href="https://protonlml.github.io/2019/10/02/mysql/1.mysql1~4%E7%AB%A0%E5%AD%A6%E4%B9%A0/"/>
    <id>https://protonlml.github.io/2019/10/02/mysql/1.mysql1~4%E7%AB%A0%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-10-02T01:00:00.000Z</published>
    <updated>2024-10-20T15:25:23.256Z</updated>
    
    <content type="html"><![CDATA[<h1><center>MySQL</center></h1><h3 id="一、SQL-语句的注意事项"><a href="#一、SQL-语句的注意事项" class="headerlink" title="一、SQL 语句的注意事项"></a>一、SQL 语句的注意事项</h3><blockquote><p>&#x2F;*<br> SQL 语句的注意事项<br>   MySQL 在 Windows 环境下是大小写不敏感的<br>   MySQL 在 Linux 环境下是大小写敏感的<br>   数据库名、表名、表的别名、变量名是严格区分大小写的<br>   关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。<br>   推荐采用统一的书写规范:<br>   数据库名、表名、表别名、字段名、字段别名等都小写<br>   SQL 关键字、函数名、绑定变量等都大写<br>   一句写完使用 ;  结尾</p><p> 关于标点符号<br>   必须保证所有的()、单引号、双引号是成对结束的<br>   必须使用英文状态下的半角输入方式<br>   字符串型和日期时间类型的数据可以使用单引号(‘ ‘)表示<br>   列的别名,尽量使用双引号(“ “),而且不建议省略as<br>   select id as “编号”, <code>name</code> as “姓名” from t_stu; #起别名时,as都可以省略<br>   select id as 编号, <code>name</code> as 姓名 from t_stu; #如果字段别名中没有空格,那么可以省略””<br>   select id as 编 号, <code>name</code> as 姓 名 from t_stu; #错误,如果字段别名中有空格,那么不能省略””</p><p>*&#x2F;</p></blockquote><h3 id="二、着重号’-‘"><a href="#二、着重号’-‘" class="headerlink" title="二、着重号’ ‘"></a>二、着重号’ ‘</h3><blockquote><p>由于 order by 是排序关键字，而数据库中又有order表，此时若想查询此表</p><p>查询的时候要加入 ‘’ 单引号，来告诉Mysql这是一个表</p><h4 id="select-from-‘order"><a href="#select-from-‘order" class="headerlink" title="select * from ‘order&#96;;"></a>select * from ‘order&#96;;</h4></blockquote><h3 id="三、desc-表名（查看表结构）"><a href="#三、desc-表名（查看表结构）" class="headerlink" title="三、desc 表名（查看表结构）"></a>三、desc 表名（查看表结构）</h3><blockquote><ol start="0"><li>查看表结构</li><li>desc 表名;</li></ol><h4 id="DESC-employees"><a href="#DESC-employees" class="headerlink" title="DESC  employees;"></a>DESC  employees;</h4></blockquote><h3 id="四、求最大值，最小值"><a href="#四、求最大值，最小值" class="headerlink" title="四、求最大值，最小值"></a>四、求最大值，最小值</h3><blockquote><p>  求最大，最小值<br>  least(字段1，字段2)<br>  greatest(字段1，字段2)</p><p>取字段的最大最小值</p><h4 id="select-least-salary-employee-id-from-employees"><a href="#select-least-salary-employee-id-from-employees" class="headerlink" title="select least(salary,employee_id) from employees;"></a>select least(salary,employee_id) from employees;</h4></blockquote><h3 id="五、范围查找"><a href="#五、范围查找" class="headerlink" title="五、范围查找"></a>五、范围查找</h3><blockquote><p> 范围查找<br> 求区间的值 100 -10000 之间的</p><h3 id="关键字：between-100-and-10000"><a href="#关键字：between-100-and-10000" class="headerlink" title="关键字：between 100 and 10000;"></a>关键字：between 100 and 10000;</h3><p> 相当于<br>   “&gt;&#x3D;  100 &amp;&amp; &lt;&#x3D;10000;”</p><h4 id="select-from-employees-where-salary-100-salary"><a href="#select-from-employees-where-salary-100-salary" class="headerlink" title="select * from employees where salary&gt;&#x3D;100 &amp;&amp; salary&lt;&#x3D;10000 ;"></a>select * from employees where salary&gt;&#x3D;100 &amp;&amp; salary&lt;&#x3D;10000 ;</h4><h4 id="select-from-employees-where-salary-between-100-and-10000"><a href="#select-from-employees-where-salary-between-100-and-10000" class="headerlink" title="select * from employees where salary between 100 and 10000;"></a>select * from employees where salary between 100 and 10000;</h4><h3 id="相当于-and"><a href="#相当于-and" class="headerlink" title="&amp;&amp; 相当于 and"></a>&amp;&amp; 相当于 and</h3><h4 id="select-from-employees-where-salary-1000-and-salary"><a href="#select-from-employees-where-salary-1000-and-salary" class="headerlink" title="select * from employees where salary &gt;&#x3D;1000 and salary&lt;&#x3D;10000;"></a>select * from employees where salary &gt;&#x3D;1000 and salary&lt;&#x3D;10000;</h4></blockquote><h3 id="六、-in-set-not-in-set-在-或-不在"><a href="#六、-in-set-not-in-set-在-或-不在" class="headerlink" title="六、  in (set) &#x2F; not in (set) 在       或 不在"></a>六、  in (set) &#x2F; not in (set) 在       或 不在</h3><blockquote><p>in (set) &#x2F; not in (set)<br>   在       或 不在<br>   离散值的查找<br>   某个值在不在这个集合中</p><p>练习1： 查找部门为 10，20，30的部门员工信息</p><h4 id="select-from-employees-where-department-id-in-10-20-30"><a href="#select-from-employees-where-department-id-in-10-20-30" class="headerlink" title="select * from employees where department_id in (10,20,30);"></a>select * from employees where department_id in (10,20,30);</h4><p>– where department_id&#x3D;10 or department_id&#x3D;20 or department_id&#x3D;30;</p></blockquote><h3 id="七、非符号类型的运算符"><a href="#七、非符号类型的运算符" class="headerlink" title="七、非符号类型的运算符"></a>七、非符号类型的运算符</h3><blockquote><h3 id="IS-NULL-IS-NOT-NULL-ISNULL-函数"><a href="#IS-NULL-IS-NOT-NULL-ISNULL-函数" class="headerlink" title="IS NULL  ; IS NOT NULL ; ISNULL() 函数"></a>IS NULL  ; IS NOT NULL ; ISNULL() 函数</h3><h4 id="select-from-employees-where-commission-pct-is-null"><a href="#select-from-employees-where-commission-pct-is-null" class="headerlink" title="select * from employees where commission_pct is null ;"></a>select * from employees where commission_pct is null ;</h4><h4 id="select-from-employees-where-ISNULL-commission-pct"><a href="#select-from-employees-where-ISNULL-commission-pct" class="headerlink" title="select * from employees where ISNULL(commission_pct);"></a>select * from employees where ISNULL(commission_pct);</h4><h3 id="select-from-employees-where-commission-pct-NULL"><a href="#select-from-employees-where-commission-pct-NULL" class="headerlink" title="select * from employees where commission_pct &lt;&#x3D;&gt; NULL;"></a>select * from employees where commission_pct &lt;&#x3D;&gt; NULL;</h3></blockquote><h3 id="八-、distinct-字段-去除重复的-字段。"><a href="#八-、distinct-字段-去除重复的-字段。" class="headerlink" title="八 、distinct 字段   去除重复的 字段。"></a>八 、distinct 字段   去除重复的 字段。</h3><blockquote><h3 id="在SELECT语句中使用关键字DISTINCT去除重复行"><a href="#在SELECT语句中使用关键字DISTINCT去除重复行" class="headerlink" title="在SELECT语句中使用关键字DISTINCT去除重复行"></a>在SELECT语句中使用关键字DISTINCT去除重复行</h3><p>&#x2F;<strong>SELECT DISTINCT department_id FROM employees;</strong>&#x2F;</p><p>针对于：</p><h4 id="SELECT-DISTINCT-department-id-salary-FROM-employees"><a href="#SELECT-DISTINCT-department-id-salary-FROM-employees" class="headerlink" title="SELECT DISTINCT department_id,salary FROM employees;"></a>SELECT DISTINCT department_id,salary FROM employees;</h4><p>这里有两点需要注意:</p><ol><li>DISTINCT 需要放到所有列名的前面,如果写成 SELECT salary, DISTINCT department_id<br>FROM employees 会报错。</li><li>DISTINCT 其实是对后面所有列名的组合进行去重,你能看到最后的结果是 74 条,因为这 74 个部<br>门id不同,都有 salary 这个属性值。如果你想要看都有哪些不同的部门(department_id),只需<br>要写 DISTINCT department_id 即可,后面不需要再加其他的列名了。</li></ol></blockquote><h3 id="九、-like-模糊查询"><a href="#九、-like-模糊查询" class="headerlink" title="九、  like  模糊查询"></a>九、  like  模糊查询</h3><blockquote><p>% 表示匹配 不确定个数的字符（0个，1个，或者多个）</p><h4 id="练习-查询last-name-中包含字符’a’-的员工信息"><a href="#练习-查询last-name-中包含字符’a’-的员工信息" class="headerlink" title="练习: 查询last_name 中包含字符’a’ 的员工信息"></a>练习: 查询last_name 中包含字符’a’ 的员工信息</h4><h4 id="select-from-employees-where-last-name-like-‘-a-’"><a href="#select-from-employees-where-last-name-like-‘-a-’" class="headerlink" title="select * from employees where last_name like ‘%a%’;"></a>select * from employees where last_name like ‘%a%’;</h4></blockquote><h3 id="十、-IFNULL-字段-0-解释：字段为null-则以0参与运算"><a href="#十、-IFNULL-字段-0-解释：字段为null-则以0参与运算" class="headerlink" title="十、  IFNULL(字段,0)        解释：字段为null 则以0参与运算"></a>十、  IFNULL(字段,0)        解释：字段为null 则以0参与运算</h3><blockquote><h3 id="查询基本薪资不在9000-12000之间的员工编号和基本薪资"><a href="#查询基本薪资不在9000-12000之间的员工编号和基本薪资" class="headerlink" title="查询基本薪资不在9000-12000之间的员工编号和基本薪资"></a>查询基本薪资不在9000-12000之间的员工编号和基本薪资</h3><h4 id="SELECT-employee-id-salary-FROM-employees-WHERE-NOT-salary-9000-AND-salary"><a href="#SELECT-employee-id-salary-FROM-employees-WHERE-NOT-salary-9000-AND-salary" class="headerlink" title="SELECT employee_id,salary FROM employees WHERE NOT (salary &gt;&#x3D; 9000 AND salary &lt;&#x3D; 12000);"></a>SELECT employee_id,salary FROM employees WHERE NOT (salary &gt;&#x3D; 9000 AND salary &lt;&#x3D; 12000);</h4><h4 id="查询员工一年的工资-（工资-奖金）-12-（有的员工的奖金是null-所以结果是-null-）"><a href="#查询员工一年的工资-（工资-奖金）-12-（有的员工的奖金是null-所以结果是-null-）" class="headerlink" title="查询员工一年的工资 （工资+奖金）*12 （有的员工的奖金是null 所以结果是 null ）"></a>查询员工一年的工资 （工资+奖金）*12 （有的员工的奖金是null 所以结果是 null ）</h4><h4 id="正确写法："><a href="#正确写法：" class="headerlink" title="正确写法："></a>正确写法：</h4><blockquote><h4 id="select-last-name-first-name-salary-salary-1-IFNULL-commission-pct-0-12-“一年工资-“from-employees"><a href="#select-last-name-first-name-salary-salary-1-IFNULL-commission-pct-0-12-“一年工资-“from-employees" class="headerlink" title="select last_name, first_name, salary,salary * (1 + IFNULL(commission_pct,0)) * 12 “一年工资 “from employees;"></a>select last_name, first_name, salary,salary * (1 + IFNULL(commission_pct,0)) * 12 “一年工资 “from employees;</h4></blockquote></blockquote><h3 id="十、字段中求最大值，最小值"><a href="#十、字段中求最大值，最小值" class="headerlink" title="十、字段中求最大值，最小值"></a>十、字段中求最大值，最小值</h3><blockquote><p> 求最大，最小值<br>       least(字段1，字段2)<br>       greatest(字段1，字段2)</p><p>最小值运算符 语法格式为:LEAST(值1,值2,…,值n)。其中,“值n”表示参数列表中有n个值。在有<br>两个或多个参数的情况下,返回最小值。</p><blockquote><p> SELECT    LEAST (1,0,2),  LEAST(‘b’,’a’,’c’),  LEAST(1,NULL,2);</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;+---------------+--------------------+-----------------+</span><br><span class="line">&gt;| LEAST (1,0,2) | LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | LEAST(1,NULL,2) |</span><br><span class="line">&gt;+---------------+--------------------+-----------------+</span><br><span class="line">&gt;|0|a|NULL   |</span><br><span class="line">&gt;+---------------+--------------------+-----------------+</span><br></pre></td></tr></table></figure><p>由结果可以看到,当参数是整数或者浮点数时,LEAST将返回其中最小的值;当参数为字符串时,返回字<br>母表中顺序最靠前的字符;当比较值列表中有NULL时,不能判断大小,返回值为NULL。</p></blockquote><blockquote><p>最大值运算符 语法格式为:GREATEST(值1,值2,…,值n)。其中,n表示参数列表中有n个值。当有<br>两个或多个参数时,返回值为最大值。假如任意一个自变量为NULL,则GREATEST()的返回值为NULL。</p><blockquote><p>SELECT GREATEST(1,0,2), GREATEST(‘b’,’a’,’c’), GREATEST(1,NULL,2);</p><p>结果：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;+-----------------+-----------------------+--------------------+</span><br><span class="line">&gt;| GREATEST(1,0,2) | GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | GREATEST(1,NULL,2) |</span><br><span class="line">&gt;+-----------------+-----------------------+--------------------+</span><br><span class="line">&gt;|2   | c   | NULL    |</span><br><span class="line">&gt;+-----------------+-----------------------+--------------------+</span><br></pre></td></tr></table></figure><p>由结果可以看到,当参数中是整数或者浮点数时,GREATEST将返回其中最大的值;当参数为字符串时,<br>返回字母表中顺序最靠后的字符;当比较值列表中有NULL时,不能判断大小,返回值为NULL。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  1.查询语句</span><br><span class="line">     select * from 表名</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select 1+12 from dual; # dual 是一个伪表的概念;</span><br><span class="line"></span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">select  employee_id,employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id  from employees;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  2.查询 字段 的别名(列的别名)</span><br><span class="line">        (作用：查询出来的表字段和java对象中的属性值相对应)</span><br><span class="line">        字段名 as &quot;别名&quot;</span><br><span class="line">    简写: 字段名  别名  （别名中不能有空格）</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">## 取别名，给 每个字段 取别名</span><br><span class="line"></span><br><span class="line">desc employees;</span><br><span class="line"># 1直接在字段后面跟着 别名  2 使用 as 关键字来取别名 3 如果别名上面有空格，那么这个别名要使用&quot;&quot; 引起来</span><br><span class="line">select first_name 名字 , last_name 姓氏 , email as 邮箱 , phone_number  &quot;手 机号&quot;  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  3. 查询结果 去重</span><br><span class="line">     distinct 字段</span><br><span class="line"> */</span><br><span class="line">select distinct department_id from employees;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  4.  空值参与运算，null</span><br><span class="line"></span><br><span class="line">      只要字段是null值，那么结果一定是 null</span><br><span class="line">      实际开发中，某个字段值是null 我们想将其看作是 0  ,使用 IFNULL(字段,0);</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"> # 查询员工一年的工资 （工资+奖金）*12 （有的员工的奖金是null 所以结果是 null ）</span><br><span class="line">select last_name, first_name, salary * (1 + commission_pct) * 12 一年工资</span><br><span class="line">from employees;</span><br><span class="line"># 正确写法：</span><br><span class="line">select last_name, first_name, salary,salary * (1 + IFNULL(commission_pct,0)) * 12 一年工资</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  5. 查询常数</span><br><span class="line">     特殊场景需要： 查询时，某个字段在每一条记录中都存在，但是又没有表中的字段与之对应。</span><br><span class="line">                 需要返回的结果集中，每一条记录都带有这个常数</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select &#x27;尚硅谷&#x27;, employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  6. 过滤数据 where  声明在from 后面</span><br><span class="line">      select * from 表名 where 过滤条件</span><br><span class="line"></span><br><span class="line">     在MySql中 where 后面的 语句 是一个可以计算得出结果的，条件成立 返回1，条件不成立返回0</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where job_id = &#x27;SH_CLERK&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  --select 查询的基本练习</span><br><span class="line">    1.查询员工12个月的工资总和，并起别名为 ANNUAL SALARY</span><br><span class="line">    2.查询employees表中去除重复的job id以后的数居</span><br><span class="line">    3.查询工资大于12000的 员工姓名和工资</span><br><span class="line">    4.查询员工号为176的员工的姓名和部门号</span><br><span class="line">    5.显示表departments的结构，并查而其中的全部数据</span><br><span class="line"> */</span><br><span class="line"> ## 1.查询员工12个月的工资总和，并起别名为 ANNUAL SALARY</span><br><span class="line"> select salary*(1+IFNULL(commission_pct,0))*12   &quot;ANNUAL SALARY&quot; from employees;</span><br><span class="line">## 2.查询employees表中去除重复的job_id 以后的数据</span><br><span class="line">select distinct job_id</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##    3.查询工资大于12000的 员工姓名和工资</span><br><span class="line"></span><br><span class="line">select last_name,first_name,salary from employees</span><br><span class="line">where salary &gt; 12000;</span><br><span class="line"></span><br><span class="line">## 4.查询员工号为176的员工的姓名和部门号</span><br><span class="line">select * from employees</span><br><span class="line">where employee_id=176;</span><br><span class="line"></span><br><span class="line">## 5.显示表departments的结构，并查而其中的全部数据</span><br><span class="line">desc departments;</span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  select * from jobs;</span><br><span class="line">select * from job_grades;</span><br><span class="line">select * from job_history;</span><br><span class="line"> */</span><br><span class="line">## -----------------------------------------------------------------------##</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  运算符</span><br><span class="line">     + - * /   div(除)  %   mod(取模)</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> ## 6. + - 运算符,浮点数参与运算，结果就是浮点型</span><br><span class="line">select 12+11, 22-0, 50+13.2 , 55-33.8  from dual;</span><br><span class="line">select 78+&#x27;12&#x27; from dual;## + 表示 加号，‘’单引号中的数字，隐式转换为数字1</span><br><span class="line">select 12+&#x27;e&#x27; from  dual;## &#x27;e&#x27; 看作是0</span><br><span class="line"></span><br><span class="line">## 7. * /(div)</span><br><span class="line">SELECT 100,</span><br><span class="line">       100 * 1,</span><br><span class="line">       100 * 1.0,</span><br><span class="line">       100 / 1.0,</span><br><span class="line">       100 / 2,</span><br><span class="line">       100 + 2 * 5 / 2,</span><br><span class="line">       100 / 3,</span><br><span class="line">       100 DIV 0</span><br><span class="line">FROM dual;</span><br><span class="line"></span><br><span class="line">## 练习：查询员工的ID 为偶数的员工信息</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where employee_id%2=0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  比较运算符</span><br><span class="line">     =   &lt;=&gt; （安全等于，为null而生的）</span><br><span class="line">     &lt;&gt;  !=   (不等于)</span><br><span class="line">     &lt; &lt;=</span><br><span class="line">     &gt; &gt;=</span><br><span class="line">比较运算符，返回的是真或者假， 这里真是1 假是0</span><br><span class="line"> */</span><br><span class="line"> select 1=2,1!=2,2&lt;&gt;3 from dual;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 8.NULL 参与运算，结果还是NULL</span><br><span class="line">## where 后面跟的结果是 null</span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct=null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 9.非符号类型的运算符</span><br><span class="line">## IS NULL  ; IS NOT NULL ; ISNULL() 函数</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct is null ;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where ISNULL(commission_pct);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct &lt;=&gt; NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   查询工资不在100-10000 之间的员工信息</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where NOT salary between 100 and 10000;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where salary &lt;100 || salary&gt;10000;</span><br><span class="line">## || 相当于 or</span><br><span class="line">select * from employees</span><br><span class="line">where salary &lt;100 or salary&gt;10000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 练习2：查询员工工资不是 6000 7000 8000 的员工信息</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where salary not in(6000,7000,8000);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">        like  模糊查询</span><br><span class="line">        % 表示匹配 不确定个数的字符（0个，1个，或者多个）</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 练习: 查询last_name 中包含字符&#x27;a&#x27; 的员工信息</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;%a%&#x27;;</span><br><span class="line">## 练习: 查询last_name 中 第一个是字符&#x27;a&#x27; 的员工信息</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;a%&#x27;;</span><br><span class="line">## 练习：查咨last_name 中 第二个是字符&#x27;a&#x27; 的员工信息</span><br><span class="line">## 这里 _ 表示任意字符占第一个位值，</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;_a%&#x27;;</span><br><span class="line"></span><br><span class="line">## 练习：查询last_name 中包含a 又包含 e 的 员工信息</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;%a%&#x27; and last_name like &#x27;%e%&#x27;;</span><br><span class="line"></span><br><span class="line">## 练习： 查询 第二个字符是_ 且 第三个字符是a 的员工信息</span><br><span class="line">##  like &#x27;_/_a%&#x27;; 表示 第一个字符是任意字符占第一个位置，第二个字符是_ 这里使用 \ 转义了就表示_ ， 第三个字符就是a ，后面%模糊匹配</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;_\_a%&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  正则表达式</span><br><span class="line">    ^s 表示以s开始</span><br><span class="line">    t$ 表示以t结尾</span><br><span class="line">   用到了查表</span><br><span class="line"> */</span><br><span class="line"> SELECT &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   逻辑运算符</span><br><span class="line">    and  与</span><br><span class="line">    or  或</span><br><span class="line">    not 非</span><br><span class="line">    XOR  异或（两边取不同，左真右假，左假右真，追求的就是这个异）</span><br><span class="line"> */</span><br><span class="line">SELECT 1 XOR -1, 1 XOR 0, 0 XOR 0, 1 XOR NULL, 1 XOR 1 XOR 1, 0 XOR 0 XOR 0;</span><br><span class="line"></span><br><span class="line">## 在10和20部门员工，且工资小于8000的 员工信息</span><br><span class="line">## 不在10和20部门员工，且工资大于8000的员工信息</span><br><span class="line">select last_name,department_id,salary</span><br><span class="line">from employees</span><br><span class="line">where department_id in (10,20) XOR salary &gt; 8000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   记住 () 的优先级最高</span><br><span class="line">   以后要想先运算谁，就用() 给它包起来</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 记住 least Greatest  只能用在 select 后面的 字段上面。</span><br><span class="line"># where  后面跟的条件，sql先执行where后面的条件，成立返回1，不成立返回0.</span><br><span class="line"># 这里面where 后面跟的 条件根本不能成立</span><br><span class="line">select * from employees</span><br><span class="line"> where 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    对字段进行限定的 关键词</span><br><span class="line">       distinct 字段   去除重复的 字段。</span><br><span class="line">       IFNULL(字段,0)  字段为null 则以0参与运算</span><br><span class="line">    求最大，最小值</span><br><span class="line">        least(字段1，字段2)</span><br><span class="line">        greatest(字段1，字段2)</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  练习</span><br><span class="line"> */</span><br><span class="line"># 1.选择工资不在5000到12000的员工的姓名和工资</span><br><span class="line">select last_name 姓名, salary 工资 from employees</span><br><span class="line">where salary not between 5000 and 12000;</span><br><span class="line"></span><br><span class="line"># 2.选择在20或50号部门工作的员工姓名和部门号</span><br><span class="line">select * from employees em</span><br><span class="line">where em.department_id =20|| em.department_id=50;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where department_id in(20,50);</span><br><span class="line"># 3.选择公司中没有管理者的员工姓名及job_id</span><br><span class="line">select * from employees</span><br><span class="line">where manager_id is null;</span><br><span class="line"># where manager_id &lt;=&gt; null;</span><br><span class="line"></span><br><span class="line"># 4.选择公司中有奖金的员工姓名,工资和奖金级别</span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct is not null;</span><br><span class="line"></span><br><span class="line"># 5.选择员工姓名的第三个字母是a的员工姓名</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;__a%&#x27;;</span><br><span class="line"></span><br><span class="line"># 6.选择姓名中有字母a和k的员工姓名</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;%a%&#x27;and last_name like &#x27;%k%&#x27;;</span><br><span class="line"></span><br><span class="line"># 7.显示出表 employees 表中 first_name 以 &#x27;e&#x27;结尾的员工信息</span><br><span class="line">## 正则表达式</span><br><span class="line">select * from employees</span><br><span class="line">where first_name regexp &#x27;e$&#x27;;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where first_name like &#x27;%e&#x27;;</span><br><span class="line"></span><br><span class="line"># 8.显示出表 employees 部门编号在 80-100 之间的姓名、工种</span><br><span class="line">select * from employees</span><br><span class="line">where department_id between 80 and 100;</span><br><span class="line"></span><br><span class="line"># 9.显示出表 employees 的 manager_id 是 100,101,110 的员工姓名、工资、管理者id</span><br><span class="line">select * from employees</span><br><span class="line">where manager_id in(100,101,110);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;MySQL&lt;/center&gt;&lt;/h1&gt;

&lt;h3 id=&quot;一、SQL-语句的注意事项&quot;&gt;&lt;a href=&quot;#一、SQL-语句的注意事项&quot; class=&quot;headerlink&quot; title=&quot;一、SQL 语句的注意事项&quot;&gt;&lt;/a&gt;一、SQL 语句的注意事项&lt;</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>javaScript</title>
    <link href="https://protonlml.github.io/2019/10/01/java%E5%9F%BA%E7%A1%80/javascript/"/>
    <id>https://protonlml.github.io/2019/10/01/java%E5%9F%BA%E7%A1%80/javascript/</id>
    <published>2019-10-01T04:00:00.000Z</published>
    <updated>2024-06-16T02:11:23.105Z</updated>
    
    <content type="html"><![CDATA[<h1><center>javaScript</center></h1><blockquote><p>静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。</p><ol><li>程序设计有两种架构：1 c&#x2F;s架构，是客户端和服务器端，要开发两个程序。2 b&#x2F;s架构，是浏览器和服务端。只用浏览器来申请服务器端的资源，再展示出来就好了。只用开发服务器端一个软件。</li><li>javaWeb开发，是B&#x2F;S架构的。</li><li>事件：事件是什么意思？通俗的理解，HTML中的元素组件，被某个动作（事件的属性），触动后，会发生一定的变化。（执行了另一个js代码）。</li><li>将HTML，CSS，JavaScript分别独立出来，可以降低耦合度，</li></ol><p>javaScript最初被设计用于浏览器中，他和java语言没有关系，他是客户端脚本语言</p><p>javaScript语言运行出错，要在浏览器控制台上面查看。F12打开控制台。</p></blockquote><p>- </p><h2 id="一、javaScript"><a href="#一、javaScript" class="headerlink" title="一、javaScript"></a>一、javaScript</h2><ul><li>注意：在一个html的页面中，可以定义多个script的标签，而且存放的位置是任意的，但是会影响运行的先后顺序，一般都是等html页面元素全部加载完毕，再运行js代码，并且是一种等待状态。当在html中的某个位置，触发了某个事件，此时对应的js等待代码，就会执行。从而产生行为效果</li></ul><h3 id="1-javascript与HTML的关联方式："><a href="#1-javascript与HTML的关联方式：" class="headerlink" title="1.javascript与HTML的关联方式："></a>1.javascript与HTML的关联方式：</h3><ul><li><p>内部关联</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160949148.png" alt="image-20240130214055735"></p></li><li><p>外部关联</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951711.png" alt="image-20240130214133935"></p></li></ul><h3 id="2-javascript的数据类型"><a href="#2-javascript的数据类型" class="headerlink" title="2.javascript的数据类型"></a>2.javascript的数据类型</h3><ul><li><blockquote><p>原始数据类型：</p><pre><code>     1. number：数字 。 整数/小数/ NAN （not  a number 一个不是数字的数字类型）        2. string ：字符串。字符串 &quot;abc&quot; &quot;a&quot; &#39;abc&#39;        3. boolean：true 和 false        4. null：一个对象为空的占位符        5. undefined：未定义，如果一个变量没有给他初始化值，则会被默认赋值为undefined</code></pre><p>注意：NaN是number类型，他是（不是数字的数字）。在js当中，运算符，后面的运算数，不是运算符要求的类型，js就会自动的将运算数进行类型转换。比如：numb&#x3D; +”abc”;此时：number根据”+”运算符，如果是数字，就会直接转换成数字，但是转换符后面跟的不是数字类型，则会转换成不是数字的数字类型。值为NaN.</p></blockquote></li></ul><h3 id="3-JavaScript的变量"><a href="#3-JavaScript的变量" class="headerlink" title="3.JavaScript的变量"></a>3.JavaScript的变量</h3><ul><li><p>什么是变量：变量就是内存空间中的一小片区域。有类型，有名称，有值。比如：int a&#x3D;3;</p></li><li><p>JavaScript的变量是弱类型的，什么叫弱类型，就是不管定义什么类型的变量，都用var开头。</p></li><li><p>而java中定义整型用int，定义字符型用char 。所以java是强类型的。</p></li><li><p>☆ 通过typeof(变量名)可以得到变量的类型</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951978.png" alt="image-20240130215045915"></p></li><li><p>注释:你也许会问,为什么typeof运算符对于nul值会返回”object”.这实际上是javaScript最初实现中的个错误,然后被<br>ECMAScript沿用了,现在,null被认为是 对象的占位符,从而解释了这一矛盾,但从技求上来说,它仍是原始值。</p></li></ul><h3 id="4-javascript中的运算符"><a href="#4-javascript中的运算符" class="headerlink" title="4.javascript中的运算符"></a>4.javascript中的运算符</h3><ul><li><h4 id="①一元运算符：就是只有一个运运算数的运算符。"><a href="#①一元运算符：就是只有一个运运算数的运算符。" class="headerlink" title="①一元运算符：就是只有一个运运算数的运算符。"></a>①一元运算符：就是只有一个运运算数的运算符。</h4><ul><li>++ 、–、+（正号）、-（负号）</li><li>“++（–）”在前，先自增（自减），再运算。</li><li>“++（–）”在后，先运算，再自增（自减）。</li><li>+（-）（正负号）</li></ul></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160950599.png" alt="Image"></p></li><li><h4 id="②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）"><a href="#②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）" class="headerlink" title="②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）"></a>②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）</h4></li><li><h4 id="③赋值运算符：“-”，“-”“-”（和java中使用方法相同）"><a href="#③赋值运算符：“-”，“-”“-”（和java中使用方法相同）" class="headerlink" title="③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）"></a>③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）</h4></li><li><h4 id="④-比较运算符：“-”，“-”，“"><a href="#④-比较运算符：“-”，“-”，“" class="headerlink" title="④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”"></a>④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”</h4><ul><li>“&#x3D; &#x3D;”是比较两个数是否相等，“&#x3D;&#x3D;&#x3D;全等于”是加上了类型的比较。</li></ul></li><li><h3 id="⑤-逻辑运算符：“-”，“-”，“！”"><a href="#⑤-逻辑运算符：“-”，“-”，“！”" class="headerlink" title="⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”"></a>⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951947.png" alt="Image [3]"></li></ul></li><li><h3 id="⑥-三元运算符“-？：表达式”"><a href="#⑥-三元运算符“-？：表达式”" class="headerlink" title="⑥ 三元运算符“ ？：表达式”"></a>⑥ 三元运算符“ <u>？：表达式</u>”</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951447.png" alt="Image [4]"></li></ul></li></ul><h2 id="二、javascript-中的特殊语法"><a href="#二、javascript-中的特殊语法" class="headerlink" title="二、javascript 中的特殊语法."></a>二、javascript 中的特殊语法.</h2><p>(了解一下就好，但是要和java规范一样写代码，不要省“；”，也不要省“var”，带var的变量，是局部变量，不带var的变量是全局变量 。)</p><h2 id="三、流程控制语句"><a href="#三、流程控制语句" class="headerlink" title="三、流程控制语句"></a>三、流程控制语句</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951597.png" alt="Image [5]"></p><h2 id="练习-：javascript（9x9乘法表）"><a href="#练习-：javascript（9x9乘法表）" class="headerlink" title="练习 ：javascript（9x9乘法表）"></a>练习 ：javascript（9x9乘法表）</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160959985.png" alt="Image [6]"></p><hr><hr><h2 id="四、BOM对象："><a href="#四、BOM对象：" class="headerlink" title="四、BOM对象："></a>四、BOM对象：</h2><ul><li><h4 id="概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。"><a href="#概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。" class="headerlink" title="概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。"></a>概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160954667.png" alt="Image [13]"></p></li><li><h4 id="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"><a href="#BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。" class="headerlink" title="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"></a>BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。</h4><h3 id="①-window窗口对象。"><a href="#①-window窗口对象。" class="headerlink" title="① window窗口对象。"></a>① window窗口对象。</h3><ul><li><h4 id="window窗口的第一类方法：弹窗有关的方法"><a href="#window窗口的第一类方法：弹窗有关的方法" class="headerlink" title="window窗口的第一类方法：弹窗有关的方法"></a>window窗口的第一类方法：弹窗有关的方法</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161001435.png" alt="image-20240130231750600"></p></li><li><h4 id="window窗口的第二类方法：打开关闭窗口的方法。"><a href="#window窗口的第二类方法：打开关闭窗口的方法。" class="headerlink" title="window窗口的第二类方法：打开关闭窗口的方法。"></a>window窗口的第二类方法：打开关闭窗口的方法。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161002045.png" alt="image-20240130232026695"></p></li><li><h4 id="window窗口的第三类方法：与定时器有关的方法"><a href="#window窗口的第三类方法：与定时器有关的方法" class="headerlink" title="window窗口的第三类方法：与定时器有关的方法"></a>window窗口的第三类方法：与定时器有关的方法</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003416.png" alt="image-20240130232218944"></p></li><li><h4 id="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用"><a href="#Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用" class="headerlink" title="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用"></a>Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003635.png" alt="Image [27]"></p></li></ul></li></ul><h2 id="②、-Location地址栏对象"><a href="#②、-Location地址栏对象" class="headerlink" title="②、 Location地址栏对象"></a>②、 Location地址栏对象</h2><ul><li><p>Location 对象的方法。reload().用来刷新当前页面。 属性：href</p></li><li><p>Location地址栏对象，他的一个属性href。有两个作用，设置当前页面的URL和获取当前页面的完整的URL.（这里面的设置和获取URL都是针对当前页面的。设置的话，就是重新赋值，设置为新的地址，这样当前页面就会跳转到设置的地址页面中去）</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003845.png" alt="Image [28]"></p></li><li><h3 id="倒计时跳转网页案例"><a href="#倒计时跳转网页案例" class="headerlink" title="倒计时跳转网页案例"></a>倒计时跳转网页案例</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004716.png" alt="image-20240130233011287"></p></li></ul><h2 id="③、-history当前页面历史记录对象。"><a href="#③、-history当前页面历史记录对象。" class="headerlink" title="③、 history当前页面历史记录对象。"></a>③、 history当前页面历史记录对象。</h2><ul><li>属性：length：history.length；返回的是。历史记录的个数。 </li><li>方法：back();加载history列表中的上一个URL。绑定单击事件，就可以做一个后退的按钮。</li><li>方法： forword(); 加载history列表中的下一个URL。绑定单击事件，就可以做一个前进的按钮。</li><li>方法：go(); 加载history列表中的某一个具体页面。</li></ul><hr><hr><h2 id="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）"><a href="#五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）" class="headerlink" title="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）"></a>五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）</h2><ul><li><h4 id="☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"><a href="#☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。" class="headerlink" title="☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"></a>☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。</h4></li><li><h4 id="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"><a href="#☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。" class="headerlink" title="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"></a>☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。</h4></li><li><h4 id="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"><a href="#DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）" class="headerlink" title="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"></a>DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）</h4></li><li><h4 id="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"><a href="#DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。" class="headerlink" title="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"></a>DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004804.png" alt="Image [7]"></p></li><li><h3 id="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。"><a href="#①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。" class="headerlink" title="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。"></a>①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。</h3><ul><li><h5 id="document-write-““-向页面上写出一条横线（就是往页面写出信息的）"><a href="#document-write-““-向页面上写出一条横线（就是往页面写出信息的）" class="headerlink" title="document.write(““)   向页面上写出一条横线（就是往页面写出信息的）"></a>document.write(“<hr>“)   向页面上写出一条横线（就是往页面写出信息的）</h5></li><li><h4 id="1-1-document对象：获取element对象的方法。"><a href="#1-1-document对象：获取element对象的方法。" class="headerlink" title="1.1 document对象：获取element对象的方法。"></a>1.1 document对象：获取element对象的方法。</h4></li><li><blockquote><ol><li>getElementById（） ：根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName （） ：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName （）：根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName（）：根据name属性值获取元素对象们。返回值是一个数组</li></ol></blockquote></li><li><h4 id="1-2-document对象：创建其他DOM对象："><a href="#1-2-document对象：创建其他DOM对象：" class="headerlink" title="1.2  document对象：创建其他DOM对象："></a>1.2  document对象：创建其他DOM对象：</h4></li><li><blockquote><ol><li>createElement（“标签名”）：创建元素节点（记住）</li><li>createAttribute（name）：创建拥有指定名称的属性节点，并返回新的Attr对象。（了解）</li><li>createComment（）：创建注释节点。（了解）</li><li>createTextNode（）：创建文本节点。（了解）</li></ol></blockquote></li></ul></li><li><h3 id="②：Element对象（元素标签对象）"><a href="#②：Element对象（元素标签对象）" class="headerlink" title="②：Element对象（元素标签对象）"></a>②：Element对象（元素标签对象）</h3><ul><li>1，获取&#x2F;创建：通过document来获取和创建</li><li>2.方法：<ul><li>removeAttribute（“”） ：删除属性</li><li>setAttribute（“属性名”，“属性值”） ：设置属性值。</li></ul></li><li>补充：input框框，有个value属性，用其节点对象.value可以得到，文本框里面的内容。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004004.png" alt="Image [8]"></li></ul></li><li><h3 id="③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"><a href="#③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。" class="headerlink" title="③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"></a>③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。</h3></li><li><p>appendchild（节点对象名） ：向节点的子节点列表的结尾添加新的子节点。（增）</p></li><li><p>removechild（节点对象名） ：删除（并返回）当前节点的指定子节点。（删）</p></li><li><p>replacechild（节点对象名） ：用新节点替换一个子节点。（改，不常用）。</p></li><li><p>属性：父节点&#x3D;当前节点.parentNode; 返回当前节点的父节点。</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004614.png" alt="Image [9]"></p></li></ul><h2 id="六、☆javascript-中的几个对象的学习。"><a href="#六、☆javascript-中的几个对象的学习。" class="headerlink" title="六、☆javascript 中的几个对象的学习。"></a>六、☆javascript 中的几个对象的学习。</h2><ul><li><h3 id="1-☆-function函数方法对象、Array数组对象。"><a href="#1-☆-function函数方法对象、Array数组对象。" class="headerlink" title="1.☆ function函数方法对象、Array数组对象。"></a>1.☆ function函数方法对象、Array数组对象。</h3></li><li><p>function对象，在javascript 中，定义方法，是用function对象，来定义方法的。</p><blockquote><ul><li>语法：function 方法名（参数列表）{方法体}</li><li>&#x2F;&#x2F; javascript中定义方法，的写法和java类似。 但是是用的function对象定义的方法</li><li>&#x2F;&#x2F; js中用function定义的方法，参数列表不用写类型，返回值不用写类型</li><li>&#x2F;&#x2F; js中用function定义的方法，如果有多个同名的方法，那么后面的同名方法，会覆盖前面的同名方法，</li><li>&#x2F;&#x2F; js中用function定义的方法，在调用方法时，只要方法名确定就会调用最后面的同名不同参数的方法。他和参数列表无关。</li><li>&#x2F;* js中用function定义的方法，参数列表的括号里面隐藏了一个内置对象，是一个arguments的数组。 所以当参数列表中不写形式参数时，function add(){ 方法体} 括号里面就是一个可变形参 每一个传递过来的实参，都存在arguments[0].arguments[1]……..等数组中。 *&#x2F;</li></ul></blockquote></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005585.png" alt="Image [31]"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005624.png" alt="Image [32]"></p></li><li><h3 id="2-☆-Array数组对象"><a href="#2-☆-Array数组对象" class="headerlink" title="2.☆ Array数组对象"></a>2.☆ Array数组对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005814.png" alt="image-20240130233856091"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005815.png" alt="image-20240130233912957"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005824.png" alt="image-20240130233952371"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302340524.png" alt="image-20240130234025914"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005034.png" alt="image-20240130234102744"></li></ul></li><li><h3 id="3-☆-Date日期对象"><a href="#3-☆-Date日期对象" class="headerlink" title="3.☆ Date日期对象"></a>3.☆ Date日期对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006224.png" alt="image-20240130234717315"></li></ul></li><li><h3 id="4-☆Math数学对象"><a href="#4-☆Math数学对象" class="headerlink" title="4.☆Math数学对象"></a>4.☆Math数学对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006954.png" alt="image-20240130234909211"></li></ul></li><li><h3 id="5-☆-regExp：正则表达式对象。"><a href="#5-☆-regExp：正则表达式对象。" class="headerlink" title="5.☆ regExp：正则表达式对象。"></a>5.☆ regExp：正则表达式对象。</h3><ul><li><h5 id="先了解什么是正则表达式"><a href="#先了解什么是正则表达式" class="headerlink" title="先了解什么是正则表达式"></a>先了解什么是正则表达式</h5></li><li><p>正则表达式就是定义字符串的组成规则（通用的规则，在Java中或者其他语言中都可以使用）。在表单的输入框的地方，实现校验输入的字符串是不是符合正则表达式的规则。不符合校验失败，阻止表单的提交。 </p></li><li><p>☆ Javascript对表单的校验，是依赖于正则表达式的。</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006465.png" alt="image-20240130235118937"></p></li><li><h3 id="正则表达式对象。regExp"><a href="#正则表达式对象。regExp" class="headerlink" title="正则表达式对象。regExp"></a>正则表达式对象。regExp</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006474.png" alt="image-20240130235241803"></p></li></ul></li><li><h3 id="6-☆全局对象"><a href="#6-☆全局对象" class="headerlink" title="6.☆全局对象"></a>6.☆全局对象</h3><ul><li>在javascript中，有一个全局对象Global，他不用创建对象，直接用其内部的方法，就可以实现对应的功能，一般有字符串的URL编解码方法。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006591.png" alt="image-20240130235441038"></li></ul></li></ul><hr><hr><h2 id="七、-事件绑定的方式"><a href="#七、-事件绑定的方式" class="headerlink" title="七、 事件绑定的方式"></a>七、 事件绑定的方式</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007040.png" alt="Image [10]"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007483.png" alt="Image [11]"></p><ul><li><h3 id="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"><a href="#得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。" class="headerlink" title="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"></a>得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007833.png" alt="Image [12]"></p><hr><hr><h2 id="八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准"><a href="#八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准" class="headerlink" title="八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准"></a>八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准</h2><ul><li><h3 id="☆①所有的节点对象都有的关键的属性innerHTML"><a href="#☆①所有的节点对象都有的关键的属性innerHTML" class="headerlink" title="☆①所有的节点对象都有的关键的属性innerHTML"></a>☆①所有的节点对象都有的关键的属性innerHTML</h3><ul><li><p>innerHTML。是获取节点对象，里面的所有内容。就是获取了，一对“&lt;&gt;标签体&lt;&#x2F;&gt;”中的标签体的内容。标签体可以是一段文字，也可以是其他标签。 </p></li><li><p>通过给innerHTML赋值或者追加值，可以改表标签体的内容。如下图</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007153.png" alt="image-20240131000856980"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007874.png" alt="image-20240131000909451"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007864.png" alt="image-20240131000922589"></p></li><li><h5 id="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"><a href="#上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。" class="headerlink" title="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"></a>上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。</h5></li></ul></li><li><h3 id="☆②所有的节点对象都有的关键的属性style。"><a href="#☆②所有的节点对象都有的关键的属性style。" class="headerlink" title="☆②所有的节点对象都有的关键的属性style。"></a>☆②所有的节点对象都有的关键的属性style。</h3><ul><li><h4 id="1-给style属性赋值，就可以改变其样式。"><a href="#1-给style属性赋值，就可以改变其样式。" class="headerlink" title="1.给style属性赋值，就可以改变其样式。"></a>1.给style属性赋值，就可以改变其样式。</h4><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007847.png" alt="Image [70]"></li></ul></li><li><p>注意：两个单词的写法</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008113.png" alt="Image [71]"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310011810.png" alt="image-20240131001138257"></p></li><li><h3 id="2-改变节点对象的class值。用className属性。"><a href="#2-改变节点对象的class值。用className属性。" class="headerlink" title="2. 改变节点对象的class值。用className属性。"></a>2. 改变节点对象的class值。用className属性。</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008443.png" alt="Image [72]"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008722.png" alt="Image [73]"></p></li><li><h4 id="3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL"><a href="#3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL" class="headerlink" title="3.要想设置和修改，节点的属性值。查Api文档。例如： 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL"></a>3.要想设置和修改，节点的属性值。查Api文档。例如：<img> 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL</h4></li></ul></li></ul><hr><hr><h2 id="九、事件"><a href="#九、事件" class="headerlink" title="九、事件"></a>九、事件</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008164.png" alt="Image [74]"></p><ul><li><h3 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h3><ul><li><h4 id="1-点击事件"><a href="#1-点击事件" class="headerlink" title="1.点击事件"></a>1.点击事件</h4></li><li><blockquote><ol><li><p>onclick：单机事件</p></li><li><p>ondblclick ：双击事件</p></li></ol></blockquote></li><li><h4 id="2-焦点事件"><a href="#2-焦点事件" class="headerlink" title="2.焦点事件"></a>2.焦点事件</h4></li><li><blockquote><ol><li>onblur：失去焦点</li></ol><ul><li>一般用于表单验证,当光标不在输入框时，就会失去焦点，触发onblur事件发生。</li></ul><ol start="2"><li>onfocus：元素获得焦点</li></ol></blockquote></li><li><h4 id="3-加载事件"><a href="#3-加载事件" class="headerlink" title="3.加载事件"></a>3.加载事件</h4></li><li><blockquote><ol><li>onload：一张页面或者一幅图像完成加载</li></ol><ul><li>内部加载方式：script标签如果写在head标签里面，在上面的话，要使用窗口的事件机制，加载事件来控制，js 代码，在HTML页面加载完全，才运行。</li><li>如下图</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008323.png" alt="Image [80]"></li></ul></blockquote></li><li><h4 id="4-鼠标事件"><a href="#4-鼠标事件" class="headerlink" title="4.鼠标事件"></a>4.鼠标事件</h4></li><li><blockquote><ol><li>onmousedown ：标按钮披按下.</li></ol><ul><li>定义方法时,定义一个形参,接受 event 对象.</li><li>eventi对象的button属性可以获取鼠标按钮键被点击了.</li></ul><ol start="2"><li>onmouseup  ：鼠标按键被松开.</li><li>onmousemove ：鼠标被移动.</li><li>onmouseover：鼠标移到某元素之上.</li><li>onmouseout：鼠标从某元素移开.</li></ol></blockquote></li><li><h4 id="5-键盘事件"><a href="#5-键盘事件" class="headerlink" title="5.键盘事件"></a>5.键盘事件</h4></li><li><blockquote><ol><li>onkeydown： 某个键盘按键被按下.</li><li>onkeyup ：某个键盘按键被松开.</li><li>onkeypress： 某个键盘按键被按下并松开.</li></ol></blockquote></li><li><h4 id="6-选择和改变事件"><a href="#6-选择和改变事件" class="headerlink" title="6.选择和改变事件"></a>6.选择和改变事件</h4></li><li><blockquote><ol><li>onchange：域的内容被改变.</li></ol><ul><li><h4 id="☆-当在选择的下拉列表上，选择某个选项会触发该事件。"><a href="#☆-当在选择的下拉列表上，选择某个选项会触发该事件。" class="headerlink" title="☆ 当在选择的下拉列表上，选择某个选项会触发该事件。"></a>☆ 当在选择的下拉列表上，选择某个选项会触发该事件。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009283.png" alt="Image [81]"></p></li></ul><ol start="2"><li>onselect：文本被选中.</li></ol></blockquote></li><li><h4 id="7-表单事件"><a href="#7-表单事件" class="headerlink" title="7.表单事件:"></a>7.表单事件:</h4></li><li><blockquote><ol><li>onsubmit：确认按钮被点击.</li></ol><ul><li>可以阻止表单的提交<ul><li>方法返回falsel则表单被阻止提交.</li></ul></li><li>写法：</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009623.png" alt="Image [82]"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009823.png" alt="Image [83]"></li></ul><ol start="2"><li>onreset：重置按钮被点击.</li></ol></blockquote></li></ul></li></ul><hr><hr><h2 id="练习：动态表格案例"><a href="#练习：动态表格案例" class="headerlink" title="练习：动态表格案例"></a>练习：动态表格案例</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009683.png" alt="image-20240131000210183"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009764.png" alt="image-20240131000243636"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010442.png" alt="image-20240131000254150"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010003.png" alt="image-20240131000332037"></p><ul><li>☆动态表格案例总结：用DOM对象在内存层面你，不管创建了多少子节点或者父节点，这些结构都是在内存层面上的，在浏览器页面上不能够直接显示，要想显示，必须有html的已有标签对象。先获取已有的html标签对象节点，将内存层面上的节点，appendChild为已有节点的子节点。同时，属性的样式会关联到css样式表中，只要和css表中的选择器对应的上，就可以显示样式。</li><li>☆ 技巧：怎样获取当前标签的对象，直接在html标签后面，加上事件属性。绑定事件方式一，事件调用指定方法，括号里面写this。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010543.png" alt="image-20240131000404203"></li><li>那么就可以在方法声明的地方，形式参数就是当前对象。如下图：</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010436.png" alt="Image [62]"></li></ul><hr><hr><h2 id="总结1："><a href="#总结1：" class="headerlink" title="总结1："></a>总结1：</h2><ul><li><h3 id="怎么来理解BOM对象和DOM对象以及HTML-DOM对象？"><a href="#怎么来理解BOM对象和DOM对象以及HTML-DOM对象？" class="headerlink" title="怎么来理解BOM对象和DOM对象以及HTML DOM对象？"></a>怎么来理解BOM对象和DOM对象以及HTML DOM对象？</h3></li><li><p>1 . BOM对象，就是将浏览器各个组成部分，封装为对象。有显示器对象、浏览器对象、windows窗口对象、URL地址栏对象、以及历史记录对象，这5个BOM对象。windows窗口对象，是BOM对象中的主要对象，因为其他对象都在一个窗口当中。可以通过windows对象来获取，其他4个BOM对象。</p></li><li><p>2 .在windows窗口获取的document对象，是DOM对象。</p><ul><li>document对象是DOM对象的主要对象。DOM对象也在窗口内，但是只有document对象（.html文件对象）是通过窗口获取，其他DOM对象是通过document对象获取的。</li></ul></li><li><p>3 .document对象，他是将整个文档封装成一个document对象。对应着HTML里面最外层标签<html></html>。他可以获取其他节点对象</p><ul><li>document.getElementById()；。或者对象们；另外也可以创建其他DOM对象。</li></ul></li><li><p>4.有了一些基础的DOM对象，也就是有了某个标签的（节点）的对象之后。然后用HTML DOM来、对这个对象进行获取、修改、添加或删除操作。</p></li><li><p>5.从上往下看，一层一层的，从窗口(window)——&gt;文本对象(document)——&gt;单个文本元素对象(element)——&gt;单个文本元素操作（HTML DOM）这样方便记忆。也便于理解。</p></li><li><p>节点：在HTML中所有的单个元件，就是单个节点。对应着一对，一对的标签。</p></li><li><p>子节点：外标签包着内标签，也就是节点包着子节点。例如：<body>文字 <a>超链接</a></body>。</p></li><li><p>Node 节点对象：他可以认为是虚有的，它里面的方法用来“CRUDdom树”</p></li><li><p>其实就是所有的DOM对象，都是一个节点，DOM对象本身，就可以增加节点，删除节点，替换节点，查询节点。</p></li><li><p>有了DOM这些对象，用他们的功能。就可以用javaScript语言对HTML的标签进行操作。</p></li><li><p>要记住：虽然能用，JavaScript语言来操作，内存层面的HTML的元素对象代码，使其在浏览器上面显示样式。但是他和HTML里面的标签没有，任何关系。</p><ul><li>执行了“JavaScript语言操作的元件对象，比如添加节点，删除节点”不会再HTML文档中自动生成，HTML代码。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011212.png" alt="Image [84]"></p><ul><li><h3 id="理解、标签、标签体、标签属性、控制元素的样式。"><a href="#理解、标签、标签体、标签属性、控制元素的样式。" class="headerlink" title="理解、标签、标签体、标签属性、控制元素的样式。"></a>理解、标签、标签体、标签属性、控制元素的样式。</h3><blockquote><p>1.1标签: 标签就是一对对的&lt;&gt;&lt;&#x2F;&gt;。例如：<code>&lt;img&gt; &lt;/img&gt; </code></p><p>1.2标签体:一对标签里面的内容。例如：<code>&lt;img&gt;这是标签体，可以是子标签也可以是文字 &lt;/img&gt;</code></p><p>1.3 标签属性: 定义在标签&lt;&gt;里面的。例如：<code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code></p><p>1.4 标签控制样式:</p></blockquote></li></ul><h2 id="总结2："><a href="#总结2：" class="headerlink" title="总结2："></a>总结2：</h2><ul><li><h4 id="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。"><a href="#一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。" class="headerlink" title="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 &lt;script&gt;js代码&lt;/script&gt;，标签一般都写在&lt;body&gt;......&lt;script&gt;&lt;/body&gt;body标签的最下面。"></a>一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 <code>&lt;script&gt;js代码&lt;/script&gt;</code>，标签一般都写在<code>&lt;body&gt;......&lt;script&gt;&lt;/body&gt;</code>body标签的最下面。</h4></li><li><h4 id="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"><a href="#js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。" class="headerlink" title="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"></a>js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。</h4></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;javaScript&lt;/center&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="javaScript" scheme="https://protonlml.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>0.Docker中安装mysql8.0.22</title>
    <link href="https://protonlml.github.io/2019/10/01/mysql/0.Docker%E4%B8%AD%E5%AE%89%E8%A3%85mysql8.0.22/"/>
    <id>https://protonlml.github.io/2019/10/01/mysql/0.Docker%E4%B8%AD%E5%AE%89%E8%A3%85mysql8.0.22/</id>
    <published>2019-09-30T17:00:00.000Z</published>
    <updated>2024-07-22T16:09:20.799Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Docker中安装mysql8.0.22</center></h1><h2 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h2><ul><li>第一步：在<a href="https://hub.docker.com/">hub.docker.com</a>上搜索mysql镜像</li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407222307366.png" alt="image-20240722230703225"></p><ul><li>第二步：拉取指定版本的mysql</li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407222310929.png" alt="image-20240722231036347"></p><ul><li>也可以指定拉取版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mysql:<span class="number">8.0</span><span class="number">.22</span></span><br></pre></td></tr></table></figure><ul><li>第三步：检查mysql镜像</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><ul><li>第四步：启动运行mysql镜像 (docker run 用于启动一个容器)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">3310</span>:<span class="number">3306</span> --name mysql8 \</span><br><span class="line">-v /usr/local/docker/mysql8/mysql-files:/<span class="keyword">var</span>/lib/mysql-files \</span><br><span class="line">-v /usr/local/docker/mysql8/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /usr/local/docker/mysql8/logs:/<span class="keyword">var</span>/log/mysql \</span><br><span class="line">-v /usr/local/docker/mysql8/data:/<span class="keyword">var</span>/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=PCfan0906. \</span><br><span class="line">-d mysql:<span class="number">8.0</span><span class="number">.22</span></span><br></pre></td></tr></table></figure><ul><li><p>第四步解释</p><ul><li><p>将端口号映射为3310</p></li><li><p>容器名字为 mysql8</p></li><li><p>-v 表示挂载的卷，conf,logs,data都挂在到主机中</p></li><li><p>修改登陆密码：PCfan0906.（默认是root   最好是修改个密码，要不然后面使用Navacat连接会有问题）</p></li><li><p>-d 启动mysql:8.0.22</p></li></ul></li><li><p>假如安装过程中失败了，则可通过docker ps -a 查看以前的容器，假如已存在，则通过docker rm 镜像id 删除再重新安装即可。</p></li><li><p>第五步：停止mysql8服务（可选）</p></li><li><p>执行完第四个步骤（启动运行mysql镜像），mysql就会自动启动了，假如需要停止这个</p><p>服务可以执行：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mysql8</span><br></pre></td></tr></table></figure><ul><li>第六步：启动mysql服务</li><li>假如mysql8服务没有启动运行，但是mysql8容器是存在的，可以通过如下方式启动mysql8。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start mysql8</span><br></pre></td></tr></table></figure><ul><li>假如希望查看mysql8启动时的日志，可以执行 docker container logs mysql8 这个指令</li><li>第七步：查看docker启动的服务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li>第八步：进入容器 (退出容器用exit)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mysql8 bash</span><br></pre></td></tr></table></figure><ul><li>第九步：登陆(默认密码root)，一定要先进入mysql容器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -pPCfan0906.</span><br></pre></td></tr></table></figure><ul><li>第十步：设置mysql开机自启动（可选）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update mysql8 --restart=always</span><br></pre></td></tr></table></figure><ul><li>如何重启mysql服务？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql8</span><br></pre></td></tr></table></figure><ul><li>查看MySQL安装到哪了?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql8</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二、连接MySQL时要注意"><a href="#二、连接MySQL时要注意" class="headerlink" title="二、连接MySQL时要注意"></a>二、连接MySQL时要注意</h2><ul><li>第一步：关闭linux宿主机的防火墙 (假如直击连接),命令忘了可以通过搜索引擎查。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><ul><li>第二步：重启docker</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>第三步：启动mysql</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start mysql8</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、Navacat连接MySQL"><a href="#三、Navacat连接MySQL" class="headerlink" title="三、Navacat连接MySQL"></a>三、Navacat连接MySQL</h2><p>连接mysql如果遇到以下问题可以这样解决</p><p>问题描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1251</span>-client does not support authentication protocol requesred by server;consider upgrading MySQL Client</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407222358806.png" alt="image-20240722235822575"></p><p>解决办法：</p><p>（1）mysql容器内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mysql8 bash</span><br></pre></td></tr></table></figure><p>（2）进入mysql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -pPCfan0906.</span><br></pre></td></tr></table></figure><p>输入密码 PCfan0906.</p><p>（3）查看用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,plugin,authentication_string from mysql.user; </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407230003245.png" alt="image-20240723000356219"></p><p>备注：host为 % 表示不限制ip localhost表示本机使用 plugin非mysql_native_password 则需要修改密码</p><p>（5）修改用户密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>; </span><br></pre></td></tr></table></figure><p>（6）更新user为root，host为% 的密码为123456</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>; </span><br></pre></td></tr></table></figure><p>更新user为root，host为localhost 的密码为123456</p><p>7）再次连接即可成功 </p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Docker中安装mysql8.0.22&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、下载安装&quot;&gt;&lt;a href=&quot;#一、下载安装&quot; class=&quot;headerlink&quot; title=&quot;一、下载安装&quot;&gt;&lt;/a&gt;一、下载安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>对Mysql中的sql语句的理解</title>
    <link href="https://protonlml.github.io/2019/10/01/mysql/%E5%AF%B9Mysql%E4%B8%AD%E7%9A%84sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://protonlml.github.io/2019/10/01/mysql/%E5%AF%B9Mysql%E4%B8%AD%E7%9A%84sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2019-09-30T16:00:00.000Z</published>
    <updated>2024-10-13T15:57:49.017Z</updated>
    
    <content type="html"><![CDATA[<h1><center>对Mysql中的sql语句的理解</center></h1><h2 id="理解SQL语句的执行顺序"><a href="#理解SQL语句的执行顺序" class="headerlink" title="理解SQL语句的执行顺序"></a>理解SQL语句的执行顺序</h2><blockquote><p>1.理解sql的执行顺序，对理解整个sql语句想要表达的什么内容，尤为重要。</p></blockquote><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410082255599.png" alt="image-20241008225541514"></p><p>上图 ④和⑤颠倒一下顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># where或者on  后面的过滤条件,可以读作,得到 满足 条件所存在的行.如下</span><br><span class="line"># on 后面可以读作, e员工表中有 部门的行,取出来.</span><br><span class="line">   通用句式 表中 有 xxx 的值取出来 。 </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410082311840.png" alt="image-20241008231137358"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如上：</span><br><span class="line">from employees e join departments d </span><br><span class="line">on d.department_id = e.department_id 后面可以读作：部门中有员工的数据 取出来</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">from employees e right join departments d </span><br><span class="line">on d.department_id = e.department_id  读作 部门中有员工的行取出来，右因 right join departments（右外连接departments） 所以departments部门中没有员工的行也去出来。就是连接后  departments这一边所有的数据都出来，不管这个部门有没有员工都取出来</span><br></pre></td></tr></table></figure><h2 id="你需要记住-SELECT-查询时的两个顺序"><a href="#你需要记住-SELECT-查询时的两个顺序" class="headerlink" title="你需要记住 SELECT 查询时的两个顺序:"></a>你需要记住 SELECT 查询时的两个顺序:</h2><h3 id="1-关键字的顺序是不能颠倒的"><a href="#1-关键字的顺序是不能颠倒的" class="headerlink" title="1. 关键字的顺序是不能颠倒的:"></a>1. 关键字的顺序是不能颠倒的:</h3><h4 id="SELECT-FROM-WHERE-GROUP-BY-HAVING-ORDER-BY-LIMIT"><a href="#SELECT-FROM-WHERE-GROUP-BY-HAVING-ORDER-BY-LIMIT" class="headerlink" title="SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT..."></a><code>SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...</code></h4><h3 id="2-SELECT-语句的执行顺序-在-MySQL-和-Oracle-中-SELECT-执行顺序基本相同"><a href="#2-SELECT-语句的执行顺序-在-MySQL-和-Oracle-中-SELECT-执行顺序基本相同" class="headerlink" title="2.SELECT 语句的执行顺序(在 MySQL 和 Oracle 中,SELECT 执行顺序基本相同):"></a>2.SELECT 语句的执行顺序(在 MySQL 和 Oracle 中,SELECT 执行顺序基本相同):</h3><h4 id="FROM-WHERE-GROUP-BY-HAVING-SELECT-的字段-DISTINCT-ORDER-BY-LIMIT"><a href="#FROM-WHERE-GROUP-BY-HAVING-SELECT-的字段-DISTINCT-ORDER-BY-LIMIT" class="headerlink" title="FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT"></a><code>FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT</code></h4><h3 id="3-比如你写了一个-SQL-语句-那么它的关键字顺序和执行顺序是下面这样的"><a href="#3-比如你写了一个-SQL-语句-那么它的关键字顺序和执行顺序是下面这样的" class="headerlink" title="3.比如你写了一个 SQL 语句,那么它的关键字顺序和执行顺序是下面这样的:"></a>3.比如你写了一个 SQL 语句,那么它的关键字顺序和执行顺序是下面这样的:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5</span><br><span class="line">FROM player JOIN team ON player.team_id = team.team_id # 顺序 1</span><br><span class="line">WHERE height &gt; 1.80 # 顺序 2</span><br><span class="line">GROUP BY player.team_id # 顺序 3</span><br><span class="line">HAVING num &gt; 2 # 顺序 4</span><br><span class="line">ORDER BY num DESC # 顺序 6</span><br><span class="line">LIMIT 2 # 顺序 7</span><br></pre></td></tr></table></figure><ul><li><h4 id="在-SELECT-语句执行这些步骤的时候-每个步骤都会产生一个-虚拟表-然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是-这些步骤隐含在-SQL-的执行过程中-对于我们来说是不可见的。"><a href="#在-SELECT-语句执行这些步骤的时候-每个步骤都会产生一个-虚拟表-然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是-这些步骤隐含在-SQL-的执行过程中-对于我们来说是不可见的。" class="headerlink" title="在 SELECT 语句执行这些步骤的时候,每个步骤都会产生一个 虚拟表 ,然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是,这些步骤隐含在 SQL 的执行过程中,对于我们来说是不可见的。"></a>在 SELECT 语句执行这些步骤的时候,每个步骤都会产生一个 虚拟表 ,然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是,这些步骤隐含在 SQL 的执行过程中,对于我们来说是不可见的。</h4></li></ul><h3 id="同时因为-SQL-是一门类似英语的结构化查询语言-所以我们在写-SELECT-语句的时候-还要注意相应的关键字顺序"><a href="#同时因为-SQL-是一门类似英语的结构化查询语言-所以我们在写-SELECT-语句的时候-还要注意相应的关键字顺序" class="headerlink" title="同时因为 SQL 是一门类似英语的结构化查询语言,所以我们在写 SELECT 语句的时候,还要注意相应的关键字顺序,"></a>同时因为 SQL 是一门类似英语的结构化查询语言,所以我们在写 SELECT 语句的时候,还要注意相应的关键字顺序,</h3><h3 id="所谓底层运行的原理-就是我们刚才讲到的执行顺序。"><a href="#所谓底层运行的原理-就是我们刚才讲到的执行顺序。" class="headerlink" title="所谓底层运行的原理,就是我们刚才讲到的执行顺序。"></a>所谓底层运行的原理,就是我们刚才讲到的执行顺序。</h3><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;对Mysql中的sql语句的理解&lt;/center&gt;&lt;/h1&gt;





&lt;h2 id=&quot;理解SQL语句的执行顺序&quot;&gt;&lt;a href=&quot;#理解SQL语句的执行顺序&quot; class=&quot;headerlink&quot; title=&quot;理解SQL语句的执行顺序&quot;&gt;&lt;/a&gt;理解</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>59.动态代理</title>
    <link href="https://protonlml.github.io/2019/09/30/java%E5%9F%BA%E7%A1%80/59.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://protonlml.github.io/2019/09/30/java%E5%9F%BA%E7%A1%80/59.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2019-09-30T15:38:00.000Z</published>
    <updated>2024-07-20T15:00:19.850Z</updated>
    
    <content type="html"><![CDATA[<h1><center>动态代理</center></h1><h2 id="一、动态代理"><a href="#一、动态代理" class="headerlink" title="一、动态代理;"></a>一、动态代理;</h2><ul><li><h3 id="为什么要有动态代理对象？"><a href="#为什么要有动态代理对象？" class="headerlink" title="为什么要有动态代理对象？"></a>为什么要有动态代理对象？</h3></li><li><h4 id="因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。"><a href="#因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。" class="headerlink" title="因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。"></a>因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。</h4></li><li><h4 id="那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。"><a href="#那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。" class="headerlink" title="那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。"></a>那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202259509.png" alt="image-20240717210216800"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法;"></a>解决办法;</h2><ul><li><h4 id="非侵入式增加功能。"><a href="#非侵入式增加功能。" class="headerlink" title="非侵入式增加功能。"></a>非侵入式增加功能。</h4></li><li><h4 id="1-我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。"><a href="#1-我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。" class="headerlink" title="1.我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。"></a>1.我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。</h4></li><li><h4 id="2-然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。"><a href="#2-然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。" class="headerlink" title="2.然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。"></a>2.然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。</h4><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202259371.png" alt="image-20240717210530854"></p><h2 id="注意：代理对象在java中是有固定对象的，newProxyInstance"><a href="#注意：代理对象在java中是有固定对象的，newProxyInstance" class="headerlink" title="注意：代理对象在java中是有固定对象的，newProxyInstance();"></a>注意：代理对象在java中是有固定对象的，newProxyInstance();</h2><ul><li><h4 id="所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。"><a href="#所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。" class="headerlink" title="所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。"></a>所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202300080.png" alt="image-20240717210924197"></p></li></ul><hr><hr><hr><h2 id="动态代理的写法"><a href="#动态代理的写法" class="headerlink" title="动态代理的写法"></a>动态代理的写法</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;动态代理&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、动态代理&quot;&gt;&lt;a href=&quot;#一、动态代理&quot; class=&quot;headerlink&quot; title=&quot;一、动态代理;&quot;&gt;&lt;/a&gt;一、动态代理;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;为什么要有动</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
