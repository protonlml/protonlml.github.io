<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://protonlml.github.io/atom.xml" rel="self"/>
  
  <link href="https://protonlml.github.io/"/>
  <updated>2024-06-16T01:41:24.580Z</updated>
  <id>https://protonlml.github.io/</id>
  
  <author>
    <name>𝚲𝚳𝚲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码</title>
    <link href="https://protonlml.github.io/2024/01/01/%E6%8C%82%E5%B9%B4%E5%85%BD/"/>
    <id>https://protonlml.github.io/2024/01/01/%E6%8C%82%E5%B9%B4%E5%85%BD/</id>
    <published>2024-01-01T03:00:00.000Z</published>
    <updated>2024-06-16T01:41:24.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码"><a href="#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码" class="headerlink" title="换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码"></a>换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码</h1><ul><li><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>这篇文章介绍了一个在博客网站右上角添加悬挂年兽的方法。通过在CSS代码中插入相应的素材链接，可以实现在网站右上角挂上一个龙的效果。对于自定义主题的网站，可以将相关的CSS和HTML代码添加到自定义头部中。对于全屏网站，建议在CSS代码的16行左右插入一行代码以实现相应效果。</li></ul></li></ul><h1 id="一、简介-教程"><a href="#一、简介-教程" class="headerlink" title="一、简介-教程"></a>一、简介-教程</h1><blockquote><p>换新颜新气象，给网站右上角挂一个龙，吸吸龙气</p><p>css第6行放入下面素材链接（本站开了防盗所以给你也无用就放下面了）</p><p>如果你的主题是自定义，那就是主题设置自定义里面</p><p>自定义css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">850px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.NewYear</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://img.ly522.com/LY/uploads/2023/12/longgyaj.gif</span>) no-repeat <span class="number">50%</span>/<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">85.8%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">50</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">animation</span>: new-year <span class="number">1.2s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@keyframes</span> new-year&#123;</span><br><span class="line">      <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="number">100%</span>&#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">10deg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="html放到你的自定义头部html即可！！"><a href="#html放到你的自定义头部html即可！！" class="headerlink" title="html放到你的自定义头部html即可！！"></a>html放到你的自定义头部html即可！！</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;NewYear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：如果你的是全屏网站建议在pointer-events: none;下面加一行。即css代码16行左右哪里加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;</span><br></pre></td></tr></table></figure><blockquote><h3 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h3></blockquote><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160941751.png" alt="image-20240118020305488"></p><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div><p>​     </p></escape>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot;&gt;&lt;a href=&quot;#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot; class=&quot;headerlink&quot; title=&quot;换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码&quot;&gt;&lt;/a&gt;换新颜给博客网站</summary>
      
    
    
    
    <category term="新年快乐" scheme="https://protonlml.github.io/categories/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    
    
    <category term="春节挂件" scheme="https://protonlml.github.io/tags/%E6%98%A5%E8%8A%82%E6%8C%82%E4%BB%B6/"/>
    
    <category term="技巧优化" scheme="https://protonlml.github.io/tags/%E6%8A%80%E5%B7%A7%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>matery主题的使用</title>
    <link href="https://protonlml.github.io/2020/03/17/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://protonlml.github.io/2020/03/17/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-17T03:00:00.000Z</published>
    <updated>2024-06-16T02:11:38.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matery主题的使用"><a href="#matery主题的使用" class="headerlink" title="matery主题的使用"></a>matery主题的使用</h1><h1 id="一、下载matery主题"><a href="#一、下载matery主题" class="headerlink" title="一、下载matery主题"></a>一、下载matery主题</h1><ul><li><h3 id="1-GitHub源项目"><a href="#1-GitHub源项目" class="headerlink" title="1.GitHub源项目"></a>1.GitHub源项目</h3></li><li><p><a href="https://github.com/blinkfox/hexo-theme-matery">GitHub - blinkfox&#x2F;hexo-theme-matery: 一个基于材料设计和响应式设计而成的全面、美观的Hexo主题。</a></p></li><li><h3 id="2-在本地clone下来"><a href="#2-在本地clone下来" class="headerlink" title="2.在本地clone下来"></a>2.在本地clone下来</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/blinkfox/hexo-theme-matery.git</span></span><br></pre></td></tr></table></figure><h1 id="二、配置hexo根yml文件"><a href="#二、配置hexo根yml文件" class="headerlink" title="二、配置hexo根yml文件"></a>二、配置hexo根yml文件</h1><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011622.png" alt="image-20240112005024106"></li></ul><h1 id="三、自定义主题"><a href="#三、自定义主题" class="headerlink" title="三、自定义主题"></a>三、自定义主题</h1><ul><li><h3 id="1-修改导航名称和路径图标"><a href="#1-修改导航名称和路径图标" class="headerlink" title="1.修改导航名称和路径图标"></a>1.修改导航名称和路径图标</h3><ul><li><h5 id="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"><a href="#添加导航二级菜单的写法（如下是“关于”一级菜单修改）" class="headerlink" title="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"></a>添加导航二级菜单的写法（如下是“关于”一级菜单修改）</h5></li><li><p>注意：1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) </p></li><li><p>​             2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找  ,线上的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">About:</span><br><span class="line">   url: /about</span><br><span class="line">   # icon: fas fa-user-circle 注释掉原来的，加上下面这一段</span><br><span class="line">   icon: fas fa-list</span><br><span class="line">   children:</span><br><span class="line">     - name: 爱的颜色</span><br><span class="line">       url: /love</span><br><span class="line">       icon: fas fa-heart</span><br><span class="line">     - name: 生日快乐</span><br><span class="line">       url: /birthday</span><br><span class="line">       icon: fas fa-cake</span><br></pre></td></tr></table></figure></li><li><h3 id="2-手机二级菜单配置"><a href="#2-手机二级菜单配置" class="headerlink" title="2.手机二级菜单配置"></a>2.手机二级菜单配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navMenu:</span></span><br><span class="line">  <span class="attr">mleft:</span> <span class="literal">true</span>    <span class="comment">#  二级侧栏子菜单是否对齐左边</span></span><br><span class="line">  <span class="attr">bgColor:</span> <span class="string">&quot; &quot;</span>   <span class="comment">#  二级侧栏子菜单背景颜色,留空即为全局背景色</span></span><br></pre></td></tr></table></figure></li><li><h3 id="3-首页中间右侧-banner"><a href="#3-首页中间右侧-banner" class="headerlink" title="3.首页中间右侧 banner"></a>3.首页中间右侧 banner</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubLink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                   <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/sitoi/sitoi.github.io</span>  <span class="comment"># GitHub 仓库地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Fork</span> <span class="string">Me</span>                                 <span class="comment"># 显示文字</span></span><br></pre></td></tr></table></figure></li><li><h3 id="4-首页轮播图相关配置"><a href="#4-首页轮播图相关配置" class="headerlink" title="4.首页轮播图相关配置"></a>4.首页轮播图相关配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">showPrevNext:</span> <span class="literal">false</span>     <span class="comment"># 是否显示左右切换按钮</span></span><br><span class="line">  <span class="attr">showIndicators:</span> <span class="literal">false</span>   <span class="comment"># 是否显示指示器</span></span><br><span class="line">  <span class="attr">autoLoop:</span> <span class="literal">false</span>         <span class="comment"># 是否自动轮播</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">120</span>           <span class="comment"># 切换延迟时间，默认单位 秒</span></span><br><span class="line">  <span class="attr">intervalTime:</span> <span class="number">5000</span>      <span class="comment"># 自动切换下一张的间隔时间</span></span><br></pre></td></tr></table></figure></li></ul><p>参考：</p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 (blinkfox.github.io)</a></p><p><a href="https://sitoi.cn/posts/63466.html">基于 Hexo GitHub 从零开始搭建个人博客（三）：Matery 主题（DIY 版）详细配置教程，附博客源码 | Sitoi</a></p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-23">(๑•̀ㅂ•́) ✧被发现了～ (sunhwee.com)</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;matery主题的使用&quot;&gt;&lt;a href=&quot;#matery主题的使用&quot; class=&quot;headerlink&quot; title=&quot;matery主题的使用&quot;&gt;&lt;/a&gt;matery主题的使用&lt;/h1&gt;&lt;h1 id=&quot;一、下载matery主题&quot;&gt;&lt;a href=&quot;#一、下载m</summary>
      
    
    
    
    <category term="博客相关" scheme="https://protonlml.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://protonlml.github.io/tags/Hexo/"/>
    
    <category term="matery主题" scheme="https://protonlml.github.io/tags/matery%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>3.git初始化仓库的两种方式</title>
    <link href="https://protonlml.github.io/2019/10/10/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://protonlml.github.io/2019/10/10/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2019-10-10T06:00:00.000Z</published>
    <updated>2024-06-16T15:09:12.803Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7769cbd895831caabaef23a3943cfc360595af7b45af3ab3e39259e7584932b2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="经验" scheme="https://protonlml.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="经验" scheme="https://protonlml.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://protonlml.github.io/2019/10/10/Maven/"/>
    <id>https://protonlml.github.io/2019/10/10/Maven/</id>
    <published>2019-10-10T03:00:00.000Z</published>
    <updated>2024-06-16T02:15:54.402Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Maven</center></h1><h2 id="一、Maven的一些理解"><a href="#一、Maven的一些理解" class="headerlink" title="一、Maven的一些理解"></a>一、Maven的一些理解</h2><ul><li>1.项目的构建，是指项目的“打包”，“编译”，“部署”，“运行”等一系列操作。 </li><li>2.用Maven就可以使我们的项目，能够自动化构建。 </li><li>3.maven是java项目的自动化构建工具。   </li><li>4.Maven可以，将一个大型的项目的不同功能，拆分成多个模块，分别进行开发管理。 </li><li>5.Maven可以，通过配置poom文件，来导入某个技术的jar包，同时会自动的导入这个jar包的相关依赖jar包。</li></ul><h2 id="二、Maven程序的执行原理"><a href="#二、Maven程序的执行原理" class="headerlink" title="二、Maven程序的执行原理"></a>二、Maven程序的执行原理</h2><ol><li><p>maven核心程序指的是，解压后的maven程序目录。也是maven软件的目录里面的内容。</p></li><li><p>Maven在自动构建项目的时候，使用插件会在本地仓库中找，使用依赖jar包也在本地仓库中找。本地找不到就到中央仓库中下载。 </p></li><li><p>怎么使用maven？（不用开发工具）</p><ol><li>创建一个maven规定的项目目录结构，在有poom.xml文件的目录下面，执行maven命令</li><li>当我们执行的Maven命令需要用到某些插件的时候，Maven核心程序会首先到本地仓库中查找</li><li>本地仓库的默认位置：[系统当前用户的家目录].m2\repository(Maven找插件的时候，自动创建)</li><li>Maven核心程序如果在本地仓库中找不到需要的插件的时候，那么它会自动联网，到中央仓库中下载。</li></ol></li><li><p>Maven的生命周期就是指的是“项目的构建过程”，项目的构建是有顺序的，执行的任何一个Maven命令都是从生命周期的头开始。</p></li><li><p>Maven构建项目完成之后，生成的“产品”就放在“项目src所在目录”中的“target”目录中。</p></li><li><p>Pom</p><ol><li>【1】含义：project Object Model 项目对象模型。</li><li>pom.xml对于Maven工程师核心配置文件，与构建过程相关的一切设置都在这个文件中进行</li></ol></li><li><p>Maven坐标类比一下：</p><ol><li><p>数学中可以用（x,yz）三个项量来确定一个空间的点。</p></li><li><p>Maven的pom文件中，也是使用三个项量，来在仓库中唯一定位一个Maven工程</p><ul><li>[1]：<strong>g</strong>roupid：公司或组织域名倒序+项目名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;cn.itcast&lt;/groupId&gt;</span><br></pre></td></tr></table></figure><ul><li>[2]：<strong>a</strong>rtifactid：模块名 </li><li>[3]：<strong>v</strong>ersion：版本<ul><li>只要讲“<strong>gav</strong>”就讲的是Maven的坐标。</li></ul></li><li>[4] :Maven工程的坐标与仓库中的路径对应关系。<ul><li>在Maven仓库里面。每一个Maven工程，他的坐标一定是不重复的，即标识了这个Maven工程信息，同时也决定了他在仓库中存放的目录是什么。</li></ul></li></ul></li></ol></li><li><p>仓库中保存的内容：宽泛的说就是（Maven工程项目）  </p><ul><li>主要有3大块：<ul><li>-[1]：Maven核心软件，自身所需要的一些插件</li><li>[2]：第三方框架或工具的jar包(其实就是第三方项目，打成了jar包)</li><li>[3]：我们自己开发的工程。Maven将“插件”、“框架jar包”、“我们自己的项目”都用统一的目录结构，放在了仓库中，这样就方便Maven核心程序的管理和使用。</li></ul></li></ul></li><li><p>pom.xml文件解析。</p><ul><li>创建的Maven项目中有pom.xml文件，他是Maven项目的核心配置文件。<ul><li>【1】.除了上面三个坐标用来，定位当前项目用Maven核心程序安装在仓库中的位置。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011049.png" alt="Image"></li><li>2】.中间部分是“依赖部分”，就是指当前项目，所使用的到的“其他模块项目和jar包”，在Maven仓库中的坐标。如果仓库中没有指定的依赖jar包，就会自动从私服上面下载，私服上面没有就会到中央仓库中下载。<ul><li>但是如果当前项目，用到我们自己写的模块，这时候就需要将，要使用的模块项目给“安装”到仓库中，用“ mvn install”命令进行安装。是不可能从网上下载的，因为这是我们自己写的，不是第三方jar包项目。这样我们就可以将一个大的项目，进行拆分成很多小的模块，然后各个模块之间用“依赖坐标”，来互相关联。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011083.png" alt="Image"></li></ul></li><li>【3】最下面是“插件”部分。<ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011313.png" alt="Image"></li></ul></li></ul></li></ul></li><li><p>依赖</p><ol><li>①Maven解析依赖信息时会到本地仓库中查找被依赖的jar包。<ul><li>对于我们自己开发的Maven工程，使用mvn install命令安装后就可以进入仓库。</li></ul></li><li>②依赖的范围<ul><li>【1】在pom.xml文件中<scope>依赖的范围</scope></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012747.png" alt="Image"></li><li>依赖的范围一般常用的有三个：compile，test、provided三个。</li><li>依赖范围：意思就是，当前项目所依赖的这个“依赖”，在编译，测试，打包。过程当中时候有效。<ul><li>[1]compile范围的“依赖”（编译范围）</li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：参与</li><li>是否 参与部署：参与</li><li>[2]test范围的“依赖”（测试范围）</li><li>对主程序是否有效：无效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：“junit依赖”它就是测试依赖，这个jar包，不参与打包，在主程序中没有。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012081.png" alt="Image"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012133.png" alt="Image"></li><li>[3]provided范围的“依赖”，通常是为web工程来添加的（不参与部署的范围）。<ul><li>说明只要加了provided范围的“依赖”，web容器中都有。比如：servlet的这个依赖，部署的时候就不需要，因为Tomcat服务器本身就有servlet的jar包。</li></ul></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012653.png" alt="Image"></li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：servlet-api.jar</li></ul></li></ul></li></ol></li><li><p>maven命令是什么？</p><ul><li>maven这个程序，用来构建项目所使用的命令。（这些命令的顺序，就是生命周期的顺序）</li><li>比如【1】清理：mvn clean</li><li>【2】：编译主程序：mvn compile</li><li>【3】：编译测试程序：mvn test-compile</li><li>【4】：执行测试：mvn test</li><li>【5】：打包：mvn package</li><li>【6】：安装：mvn install</li><li>【7】：生成站点：mvn site这些命令，构成了Maven构建项目时的，不同生命周期，</li></ul></li><li><p>12.Maven的生命周期</p><ul><li>【1】意思：就是Maven构建项目的的，各个构建环节执行的顺序。：不能打乱顺序，必须按照既定的正确顺序来执行，是生命周期的各个阶段的命令来实现的。</li><li>【2】生命周期是在Maven的核心程序中定义了，抽象的生命周期。 生命周期中各个阶段的具体任务是由插件来完成的。</li><li>【3】有三套独立的生命周期：<ul><li>①Clean Lifecycle（清理生命周期）在进行，在真正的构建一个项目之前，必须先进行一些清理工作。</li><li>②Default lifecycle（默认的生命周期）构建的核心部分，编译，测试，打包，安装，部署等等。</li><li>③Site Lifecycle（生成站点生命周期）生成项目报告，站点，发布站点。</li></ul></li><li>【4】每个生命周期的具体实现<ul><li>比如：只执行“mvn clean 清理命令”就会进行清理生命周期。</li><li>执行“mvn install 安装命令”就会进行Maven构建项目的默认生命周期，此时Maven核心程序，会从头开始执行“clean清理”,“compile 编译”，“test-compile 编译测试”，“test 执行测试”，“package 打包”，“install 安装”这一系列的过程。</li><li>执行“site 生成站点”，也会从头开始，将所有过程进行一边。这是生成站点生命周期</li><li>Maven核心程序为了更好的实现自动化构建，按照这一的特点执行生命周期中的各个阶段：不论现在要执行生命周期中的哪一个阶段，都是从这个生命周期最初的位置开始执行。</li></ul></li><li>【5】生命周期的各个阶段仅仅定义了要执行的任务是什么（命令）完成这个命令，是由特定的Maven插件来完成的。<ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012162.png" alt="Image"></li></ul></li></ul></li><li><p>创建Maven工程之前，需要将IDEA编辑器，和本地下载的Maven程序，进行关联配置。具体操作，见文末。</p></li></ol><hr><hr><h2 id="三、使用IDEA创建普通的javaMaven工程"><a href="#三、使用IDEA创建普通的javaMaven工程" class="headerlink" title="三、使用IDEA创建普通的javaMaven工程"></a>三、使用IDEA创建普通的javaMaven工程</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012762.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012115.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012201.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013282.png" alt="Image"></p><h2 id="四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）"><a href="#四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）" class="headerlink" title="四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）"></a>四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）</h2><ul><li><p>【1】必须先创建一个空的工程。在空的工程中添加模块。（每次添加模块都要使用快捷键“ctrl+alt+shift+s”来调出<strong>Project Structure窗口，在这个窗口中添加模块，不能直接在模块上面右键添加模块。（在模块上右键模块会添加到“模块里面”）</strong>）</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013762.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013442.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013622.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013162.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013194.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014349.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014424.png" alt="Image"></p></li><li><h3 id="【标准的Maven工程，分模块的大型web项目，目录结构】"><a href="#【标准的Maven工程，分模块的大型web项目，目录结构】" class="headerlink" title="【标准的Maven工程，分模块的大型web项目，目录结构】"></a>【标准的Maven工程，分模块的大型web项目，目录结构】</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014593.png" alt="Image"></p></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><h5 id="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"><a href="#我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。" class="headerlink" title="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"></a>我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。</h5></li></ul><h2 id="五、依赖"><a href="#五、依赖" class="headerlink" title="五、依赖"></a>五、依赖</h2><ul><li><h3 id="依赖的传递性："><a href="#依赖的传递性：" class="headerlink" title="依赖的传递性："></a>依赖的传递性：</h3><ul><li>【1】依赖的传递性是指，如果在一个大型的项目当中，各个模块相互依赖，那么在“最下面的模块（依赖关系最下面，这个模块只是被依赖，不去依赖别的模块）”中，pom.xml文件里面，配置的<strong>compile</strong>”范围的依赖jar包，其他模块的pom.xml文件虽然没有声明一样的<strong>compile</strong>”范围的依赖jar包，但是也可以使用这个依赖。</li><li>【2】前提是“<strong>compile</strong>”范围的依赖才能传递，“<strong>test</strong>”“<strong>provided</strong>”范围的依赖不能传递。所以在各个工程模块中，能够传递的依赖，只在“最下面”模块中声明一次就可以了，不能够传递的“<strong>test</strong>”“<strong>provided</strong>”范围的依赖就得各个模块中重复声明依赖。比如：servlet的依赖，他就是“provided范围的模块”，需要在每一个项目模块pom.xml文件中，都要重复声明。</li><li>【3】我们在开发项目的时候，会有一个专门的模块来负责维护这些框架jar包的依赖信息的。在这个模块中，全部都写“<strong>compile</strong>”范围的依赖”，让其他功能模块，来依赖这个“专门模块”，就可以实现“<strong>compile</strong>”范围的依赖”通用。</li><li>【4】子类继承了父类模块，也可以实现依赖传递，默认就是依赖的，不需要再在子类中，重新声明依赖父类，只在子类中声明父类就可以了。</li></ul></li><li><h3 id="依赖的排除："><a href="#依赖的排除：" class="headerlink" title="依赖的排除："></a>依赖的排除：</h3><ul><li>依赖的排除，在哪个工程里面排除的，就在哪个工程里面生效。</li><li>【1】当我们导入某些依赖jar包的时候，Maven会自动将这个jar的其他依赖jar包也一起导入到工程当中，这个时候，如果不需要这个额外的jar包，就可以用“排除依赖”来进行排除。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014762.png" alt="Image"></li><li>【2】找到要排除的依赖的ID（假如spring-jcl依赖要被排除）</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014723.png" alt="Image"></li><li>3】添加<exclusions> </exclusions>标签</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014062.png" alt="Image"></li></ul></li><li><h3 id="依赖原则："><a href="#依赖原则：" class="headerlink" title="依赖原则："></a>依赖原则：</h3><ul><li><h4 id="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"><a href="#解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）" class="headerlink" title="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"></a>解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）</h4></li><li><p>前提是因为“依赖的传递性”导致的jar包冲突问题。</p></li><li><p>冲突情景：</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015782.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281057892.png" alt="Image"></p></li><li><p><strong>properties标签</strong>配合自定义标签声明数据的配置并。(可以利用这个标签，实现在一个页面上，同种类型的框架jar包，版本号相同，)在父模块中就更简便了</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015754.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015765.png" alt="Image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span> <span class="comment">&lt;!--不是只能用于声明依赖的版本号。凡是需要统一声明后再引用的场合都可以使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="六、Mavne继承（pom文件的继承）"><a href="#六、Mavne继承（pom文件的继承）" class="headerlink" title="六、Mavne继承（pom文件的继承）"></a>六、Mavne继承（pom文件的继承）</h2><ul><li><p>存在的问题：我们都知道在一个“模块项目1”中配置了“<strong>compile</strong>”范围的依赖jar包”，“其他模块项目”来依赖这个“模块项目1”的时候，“其他模块项目”中会自动的存在了“项目模块1的”“<strong>compile</strong>”范围的依赖jar包”。这是依赖的传递性。只用在“模块项目1”中声明一份就可以了。</p></li><li><p>但是：如果是““<strong>test</strong>”“<strong>provided</strong>”范围的依赖是不能传递的”，需要在每一个模块中都要，重复的手动添加““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”，比如“junit依赖”，他就是“test范围的依赖”。（不能够传递的依赖，他就是零散的分散在各个模块当中，就很容易造成各个模块工程之间的版本不一致）。</p></li><li><p>这就存在一个问题，开发一个大型项目的时候，各个模块是不同开发组来开发的，使用“junit这种依赖”的时候，可能版本号就会不相同，导致各个模块之间不统一。</p></li><li><p>解决办法：使用Maven的继承，统一成同一个版本。（以junit依赖为例）</p></li><li><p>【1】专门创建一个模块是所有模块的“父模块”，可以用作““<strong>compile</strong>”范围的依赖jar包”传递依赖。也可以用作““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”的版本管理。</p></li><li><p>【2】解决思路：将junit依赖统一提取到“父”工程中，在子工程中声明junit依赖时不指定版本，以父工程中统一设定的为准。同时也便于修改。</p></li><li><p>【3】操作步骤  [1]创建一个Maven工程作为父工程。注意：打包的方式pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015851.png" alt="Image"></p></li><li><p>[2]在子工程中声明对父工程的引用（认干爹的一个仪式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子工程中声明父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--以当前pom文件为基准的,找父工程pom.xml文件的相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[3]在父工程中统一管理junit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理，这里专门用来管理，不能够传递的依赖，进行版本号控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- junit是“test”范围的依赖，不能够传递，在这里面统一管理版本号--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[4]在子工程中删除junit依赖的版本号部分 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;version&gt;4.11&lt;/version&gt;--&gt;</span> 删除掉</span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[5]实现效果</p><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015552.png" alt="Image"></li></ul></li><li><p>[6]：父模块的Pom.xml文件的配置。</p><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015722.png" alt="Image"></li></ul></li></ul><h2 id="七、Maven的聚合："><a href="#七、Maven的聚合：" class="headerlink" title="七、Maven的聚合："></a>七、Maven的聚合：</h2><ul><li><p>（聚合就是Maven中，各个模块的一键安装。）</p></li><li><p>注意：配置了继承的模块，在执行安装命令（ install）的时候，要先安装 “父模块”再安装其他模块才能成功。</p></li><li><p>Maven中的一件安装，就可以自动的按顺序，将每个模块都按依赖顺序进行安装。</p></li><li><p>实现一件安装步骤：</p><ul><li><p>【1】创建一个“总的聚合工程”，（一般把“父模块”作为“总的聚合工程”，大的情况下也是将，聚合的配置，也配在父模块内）</p></li><li><p>【2】在一个”总的聚合工程”的pom.xml文件中，配置各个參与聚合的模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置聚合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--指定各个子工程的相对路径--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hellow<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HellowFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="八、Maven仓库地址"><a href="#八、Maven仓库地址" class="headerlink" title="八、Maven仓库地址"></a>八、Maven仓库地址</h2><ul><li><a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a></li><li><a href="https://developer.aliyun.com/mvn/search">仓库服务 (aliyun.com)</a></li></ul><h2 id="九、IDEA中Maven配置"><a href="#九、IDEA中Maven配置" class="headerlink" title="九、IDEA中Maven配置"></a>九、IDEA中Maven配置</h2><p><a href="https://www.jb51.net/article/259780.htm">IDEA配置Maven的超详细步骤_java_脚本之家 (jb51.net)</a></p><p><a href="https://blog.csdn.net/qq_42057154/article/details/106114515">IDEA配置Maven（详细版）_idea maven-CSDN博客</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Maven&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、Maven的一些理解&quot;&gt;&lt;a href=&quot;#一、Maven的一些理解&quot; class=&quot;headerlink&quot; title=&quot;一、Maven的一些理解&quot;&gt;&lt;/a&gt;一、Maven的一些理解&lt;/h2&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    <category term="maven" scheme="https://protonlml.github.io/categories/java/maven/"/>
    
    
    <category term="maven" scheme="https://protonlml.github.io/tags/maven/"/>
    
    <category term="项目自动化构建工具" scheme="https://protonlml.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>javaScript</title>
    <link href="https://protonlml.github.io/2019/10/01/javascript/"/>
    <id>https://protonlml.github.io/2019/10/01/javascript/</id>
    <published>2019-10-01T04:00:00.000Z</published>
    <updated>2024-06-16T02:11:23.105Z</updated>
    
    <content type="html"><![CDATA[<h1><center>javaScript</center></h1><blockquote><p>静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。</p><ol><li>程序设计有两种架构：1 c&#x2F;s架构，是客户端和服务器端，要开发两个程序。2 b&#x2F;s架构，是浏览器和服务端。只用浏览器来申请服务器端的资源，再展示出来就好了。只用开发服务器端一个软件。</li><li>javaWeb开发，是B&#x2F;S架构的。</li><li>事件：事件是什么意思？通俗的理解，HTML中的元素组件，被某个动作（事件的属性），触动后，会发生一定的变化。（执行了另一个js代码）。</li><li>将HTML，CSS，JavaScript分别独立出来，可以降低耦合度，</li></ol><p>javaScript最初被设计用于浏览器中，他和java语言没有关系，他是客户端脚本语言</p><p>javaScript语言运行出错，要在浏览器控制台上面查看。F12打开控制台。</p></blockquote><p>- </p><h2 id="一、javaScript"><a href="#一、javaScript" class="headerlink" title="一、javaScript"></a>一、javaScript</h2><ul><li>注意：在一个html的页面中，可以定义多个script的标签，而且存放的位置是任意的，但是会影响运行的先后顺序，一般都是等html页面元素全部加载完毕，再运行js代码，并且是一种等待状态。当在html中的某个位置，触发了某个事件，此时对应的js等待代码，就会执行。从而产生行为效果</li></ul><h3 id="1-javascript与HTML的关联方式："><a href="#1-javascript与HTML的关联方式：" class="headerlink" title="1.javascript与HTML的关联方式："></a>1.javascript与HTML的关联方式：</h3><ul><li><p>内部关联</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160949148.png" alt="image-20240130214055735"></p></li><li><p>外部关联</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951711.png" alt="image-20240130214133935"></p></li></ul><h3 id="2-javascript的数据类型"><a href="#2-javascript的数据类型" class="headerlink" title="2.javascript的数据类型"></a>2.javascript的数据类型</h3><ul><li><blockquote><p>原始数据类型：</p><pre><code>     1. number：数字 。 整数/小数/ NAN （not  a number 一个不是数字的数字类型）        2. string ：字符串。字符串 &quot;abc&quot; &quot;a&quot; &#39;abc&#39;        3. boolean：true 和 false        4. null：一个对象为空的占位符        5. undefined：未定义，如果一个变量没有给他初始化值，则会被默认赋值为undefined</code></pre><p>注意：NaN是number类型，他是（不是数字的数字）。在js当中，运算符，后面的运算数，不是运算符要求的类型，js就会自动的将运算数进行类型转换。比如：numb&#x3D; +”abc”;此时：number根据”+”运算符，如果是数字，就会直接转换成数字，但是转换符后面跟的不是数字类型，则会转换成不是数字的数字类型。值为NaN.</p></blockquote></li></ul><h3 id="3-JavaScript的变量"><a href="#3-JavaScript的变量" class="headerlink" title="3.JavaScript的变量"></a>3.JavaScript的变量</h3><ul><li><p>什么是变量：变量就是内存空间中的一小片区域。有类型，有名称，有值。比如：int a&#x3D;3;</p></li><li><p>JavaScript的变量是弱类型的，什么叫弱类型，就是不管定义什么类型的变量，都用var开头。</p></li><li><p>而java中定义整型用int，定义字符型用char 。所以java是强类型的。</p></li><li><p>☆ 通过typeof(变量名)可以得到变量的类型</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951978.png" alt="image-20240130215045915"></p></li><li><p>注释:你也许会问,为什么typeof运算符对于nul值会返回”object”.这实际上是javaScript最初实现中的个错误,然后被<br>ECMAScript沿用了,现在,null被认为是 对象的占位符,从而解释了这一矛盾,但从技求上来说,它仍是原始值。</p></li></ul><h3 id="4-javascript中的运算符"><a href="#4-javascript中的运算符" class="headerlink" title="4.javascript中的运算符"></a>4.javascript中的运算符</h3><ul><li><h4 id="①一元运算符：就是只有一个运运算数的运算符。"><a href="#①一元运算符：就是只有一个运运算数的运算符。" class="headerlink" title="①一元运算符：就是只有一个运运算数的运算符。"></a>①一元运算符：就是只有一个运运算数的运算符。</h4><ul><li>++ 、–、+（正号）、-（负号）</li><li>“++（–）”在前，先自增（自减），再运算。</li><li>“++（–）”在后，先运算，再自增（自减）。</li><li>+（-）（正负号）</li></ul></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160950599.png" alt="Image"></p></li><li><h4 id="②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）"><a href="#②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）" class="headerlink" title="②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）"></a>②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）</h4></li><li><h4 id="③赋值运算符：“-”，“-”“-”（和java中使用方法相同）"><a href="#③赋值运算符：“-”，“-”“-”（和java中使用方法相同）" class="headerlink" title="③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）"></a>③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）</h4></li><li><h4 id="④-比较运算符：“-”，“-”，“"><a href="#④-比较运算符：“-”，“-”，“" class="headerlink" title="④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”"></a>④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”</h4><ul><li>“&#x3D; &#x3D;”是比较两个数是否相等，“&#x3D;&#x3D;&#x3D;全等于”是加上了类型的比较。</li></ul></li><li><h3 id="⑤-逻辑运算符：“-”，“-”，“！”"><a href="#⑤-逻辑运算符：“-”，“-”，“！”" class="headerlink" title="⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”"></a>⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951947.png" alt="Image [3]"></li></ul></li><li><h3 id="⑥-三元运算符“-？：表达式”"><a href="#⑥-三元运算符“-？：表达式”" class="headerlink" title="⑥ 三元运算符“ ？：表达式”"></a>⑥ 三元运算符“ <u>？：表达式</u>”</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951447.png" alt="Image [4]"></li></ul></li></ul><h2 id="二、javascript-中的特殊语法"><a href="#二、javascript-中的特殊语法" class="headerlink" title="二、javascript 中的特殊语法."></a>二、javascript 中的特殊语法.</h2><p>(了解一下就好，但是要和java规范一样写代码，不要省“；”，也不要省“var”，带var的变量，是局部变量，不带var的变量是全局变量 。)</p><h2 id="三、流程控制语句"><a href="#三、流程控制语句" class="headerlink" title="三、流程控制语句"></a>三、流程控制语句</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951597.png" alt="Image [5]"></p><h2 id="练习-：javascript（9x9乘法表）"><a href="#练习-：javascript（9x9乘法表）" class="headerlink" title="练习 ：javascript（9x9乘法表）"></a>练习 ：javascript（9x9乘法表）</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160959985.png" alt="Image [6]"></p><hr><hr><h2 id="四、BOM对象："><a href="#四、BOM对象：" class="headerlink" title="四、BOM对象："></a>四、BOM对象：</h2><ul><li><h4 id="概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。"><a href="#概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。" class="headerlink" title="概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。"></a>概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160954667.png" alt="Image [13]"></p></li><li><h4 id="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"><a href="#BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。" class="headerlink" title="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"></a>BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。</h4><h3 id="①-window窗口对象。"><a href="#①-window窗口对象。" class="headerlink" title="① window窗口对象。"></a>① window窗口对象。</h3><ul><li><h4 id="window窗口的第一类方法：弹窗有关的方法"><a href="#window窗口的第一类方法：弹窗有关的方法" class="headerlink" title="window窗口的第一类方法：弹窗有关的方法"></a>window窗口的第一类方法：弹窗有关的方法</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161001435.png" alt="image-20240130231750600"></p></li><li><h4 id="window窗口的第二类方法：打开关闭窗口的方法。"><a href="#window窗口的第二类方法：打开关闭窗口的方法。" class="headerlink" title="window窗口的第二类方法：打开关闭窗口的方法。"></a>window窗口的第二类方法：打开关闭窗口的方法。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161002045.png" alt="image-20240130232026695"></p></li><li><h4 id="window窗口的第三类方法：与定时器有关的方法"><a href="#window窗口的第三类方法：与定时器有关的方法" class="headerlink" title="window窗口的第三类方法：与定时器有关的方法"></a>window窗口的第三类方法：与定时器有关的方法</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003416.png" alt="image-20240130232218944"></p></li><li><h4 id="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用"><a href="#Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用" class="headerlink" title="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用"></a>Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003635.png" alt="Image [27]"></p></li></ul></li></ul><h2 id="②、-Location地址栏对象"><a href="#②、-Location地址栏对象" class="headerlink" title="②、 Location地址栏对象"></a>②、 Location地址栏对象</h2><ul><li><p>Location 对象的方法。reload().用来刷新当前页面。 属性：href</p></li><li><p>Location地址栏对象，他的一个属性href。有两个作用，设置当前页面的URL和获取当前页面的完整的URL.（这里面的设置和获取URL都是针对当前页面的。设置的话，就是重新赋值，设置为新的地址，这样当前页面就会跳转到设置的地址页面中去）</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003845.png" alt="Image [28]"></p></li><li><h3 id="倒计时跳转网页案例"><a href="#倒计时跳转网页案例" class="headerlink" title="倒计时跳转网页案例"></a>倒计时跳转网页案例</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004716.png" alt="image-20240130233011287"></p></li></ul><h2 id="③、-history当前页面历史记录对象。"><a href="#③、-history当前页面历史记录对象。" class="headerlink" title="③、 history当前页面历史记录对象。"></a>③、 history当前页面历史记录对象。</h2><ul><li>属性：length：history.length；返回的是。历史记录的个数。 </li><li>方法：back();加载history列表中的上一个URL。绑定单击事件，就可以做一个后退的按钮。</li><li>方法： forword(); 加载history列表中的下一个URL。绑定单击事件，就可以做一个前进的按钮。</li><li>方法：go(); 加载history列表中的某一个具体页面。</li></ul><hr><hr><h2 id="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）"><a href="#五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）" class="headerlink" title="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）"></a>五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）</h2><ul><li><h4 id="☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"><a href="#☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。" class="headerlink" title="☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"></a>☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。</h4></li><li><h4 id="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"><a href="#☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。" class="headerlink" title="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"></a>☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。</h4></li><li><h4 id="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"><a href="#DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）" class="headerlink" title="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"></a>DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）</h4></li><li><h4 id="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"><a href="#DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。" class="headerlink" title="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"></a>DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004804.png" alt="Image [7]"></p></li><li><h3 id="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。"><a href="#①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。" class="headerlink" title="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。"></a>①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。</h3><ul><li><h5 id="document-write-““-向页面上写出一条横线（就是往页面写出信息的）"><a href="#document-write-““-向页面上写出一条横线（就是往页面写出信息的）" class="headerlink" title="document.write(““)   向页面上写出一条横线（就是往页面写出信息的）"></a>document.write(“<hr>“)   向页面上写出一条横线（就是往页面写出信息的）</h5></li><li><h4 id="1-1-document对象：获取element对象的方法。"><a href="#1-1-document对象：获取element对象的方法。" class="headerlink" title="1.1 document对象：获取element对象的方法。"></a>1.1 document对象：获取element对象的方法。</h4></li><li><blockquote><ol><li>getElementById（） ：根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName （） ：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName （）：根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName（）：根据name属性值获取元素对象们。返回值是一个数组</li></ol></blockquote></li><li><h4 id="1-2-document对象：创建其他DOM对象："><a href="#1-2-document对象：创建其他DOM对象：" class="headerlink" title="1.2  document对象：创建其他DOM对象："></a>1.2  document对象：创建其他DOM对象：</h4></li><li><blockquote><ol><li>createElement（“标签名”）：创建元素节点（记住）</li><li>createAttribute（name）：创建拥有指定名称的属性节点，并返回新的Attr对象。（了解）</li><li>createComment（）：创建注释节点。（了解）</li><li>createTextNode（）：创建文本节点。（了解）</li></ol></blockquote></li></ul></li><li><h3 id="②：Element对象（元素标签对象）"><a href="#②：Element对象（元素标签对象）" class="headerlink" title="②：Element对象（元素标签对象）"></a>②：Element对象（元素标签对象）</h3><ul><li>1，获取&#x2F;创建：通过document来获取和创建</li><li>2.方法：<ul><li>removeAttribute（“”） ：删除属性</li><li>setAttribute（“属性名”，“属性值”） ：设置属性值。</li></ul></li><li>补充：input框框，有个value属性，用其节点对象.value可以得到，文本框里面的内容。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004004.png" alt="Image [8]"></li></ul></li><li><h3 id="③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"><a href="#③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。" class="headerlink" title="③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"></a>③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。</h3></li><li><p>appendchild（节点对象名） ：向节点的子节点列表的结尾添加新的子节点。（增）</p></li><li><p>removechild（节点对象名） ：删除（并返回）当前节点的指定子节点。（删）</p></li><li><p>replacechild（节点对象名） ：用新节点替换一个子节点。（改，不常用）。</p></li><li><p>属性：父节点&#x3D;当前节点.parentNode; 返回当前节点的父节点。</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004614.png" alt="Image [9]"></p></li></ul><h2 id="六、☆javascript-中的几个对象的学习。"><a href="#六、☆javascript-中的几个对象的学习。" class="headerlink" title="六、☆javascript 中的几个对象的学习。"></a>六、☆javascript 中的几个对象的学习。</h2><ul><li><h3 id="1-☆-function函数方法对象、Array数组对象。"><a href="#1-☆-function函数方法对象、Array数组对象。" class="headerlink" title="1.☆ function函数方法对象、Array数组对象。"></a>1.☆ function函数方法对象、Array数组对象。</h3></li><li><p>function对象，在javascript 中，定义方法，是用function对象，来定义方法的。</p><blockquote><ul><li>语法：function 方法名（参数列表）{方法体}</li><li>&#x2F;&#x2F; javascript中定义方法，的写法和java类似。 但是是用的function对象定义的方法</li><li>&#x2F;&#x2F; js中用function定义的方法，参数列表不用写类型，返回值不用写类型</li><li>&#x2F;&#x2F; js中用function定义的方法，如果有多个同名的方法，那么后面的同名方法，会覆盖前面的同名方法，</li><li>&#x2F;&#x2F; js中用function定义的方法，在调用方法时，只要方法名确定就会调用最后面的同名不同参数的方法。他和参数列表无关。</li><li>&#x2F;* js中用function定义的方法，参数列表的括号里面隐藏了一个内置对象，是一个arguments的数组。 所以当参数列表中不写形式参数时，function add(){ 方法体} 括号里面就是一个可变形参 每一个传递过来的实参，都存在arguments[0].arguments[1]……..等数组中。 *&#x2F;</li></ul></blockquote></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005585.png" alt="Image [31]"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005624.png" alt="Image [32]"></p></li><li><h3 id="2-☆-Array数组对象"><a href="#2-☆-Array数组对象" class="headerlink" title="2.☆ Array数组对象"></a>2.☆ Array数组对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005814.png" alt="image-20240130233856091"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005815.png" alt="image-20240130233912957"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005824.png" alt="image-20240130233952371"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302340524.png" alt="image-20240130234025914"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005034.png" alt="image-20240130234102744"></li></ul></li><li><h3 id="3-☆-Date日期对象"><a href="#3-☆-Date日期对象" class="headerlink" title="3.☆ Date日期对象"></a>3.☆ Date日期对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006224.png" alt="image-20240130234717315"></li></ul></li><li><h3 id="4-☆Math数学对象"><a href="#4-☆Math数学对象" class="headerlink" title="4.☆Math数学对象"></a>4.☆Math数学对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006954.png" alt="image-20240130234909211"></li></ul></li><li><h3 id="5-☆-regExp：正则表达式对象。"><a href="#5-☆-regExp：正则表达式对象。" class="headerlink" title="5.☆ regExp：正则表达式对象。"></a>5.☆ regExp：正则表达式对象。</h3><ul><li><h5 id="先了解什么是正则表达式"><a href="#先了解什么是正则表达式" class="headerlink" title="先了解什么是正则表达式"></a>先了解什么是正则表达式</h5></li><li><p>正则表达式就是定义字符串的组成规则（通用的规则，在Java中或者其他语言中都可以使用）。在表单的输入框的地方，实现校验输入的字符串是不是符合正则表达式的规则。不符合校验失败，阻止表单的提交。 </p></li><li><p>☆ Javascript对表单的校验，是依赖于正则表达式的。</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006465.png" alt="image-20240130235118937"></p></li><li><h3 id="正则表达式对象。regExp"><a href="#正则表达式对象。regExp" class="headerlink" title="正则表达式对象。regExp"></a>正则表达式对象。regExp</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006474.png" alt="image-20240130235241803"></p></li></ul></li><li><h3 id="6-☆全局对象"><a href="#6-☆全局对象" class="headerlink" title="6.☆全局对象"></a>6.☆全局对象</h3><ul><li>在javascript中，有一个全局对象Global，他不用创建对象，直接用其内部的方法，就可以实现对应的功能，一般有字符串的URL编解码方法。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006591.png" alt="image-20240130235441038"></li></ul></li></ul><hr><hr><h2 id="七、-事件绑定的方式"><a href="#七、-事件绑定的方式" class="headerlink" title="七、 事件绑定的方式"></a>七、 事件绑定的方式</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007040.png" alt="Image [10]"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007483.png" alt="Image [11]"></p><ul><li><h3 id="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"><a href="#得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。" class="headerlink" title="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"></a>得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007833.png" alt="Image [12]"></p><hr><hr><h2 id="八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准"><a href="#八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准" class="headerlink" title="八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准"></a>八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准</h2><ul><li><h3 id="☆①所有的节点对象都有的关键的属性innerHTML"><a href="#☆①所有的节点对象都有的关键的属性innerHTML" class="headerlink" title="☆①所有的节点对象都有的关键的属性innerHTML"></a>☆①所有的节点对象都有的关键的属性innerHTML</h3><ul><li><p>innerHTML。是获取节点对象，里面的所有内容。就是获取了，一对“&lt;&gt;标签体&lt;&#x2F;&gt;”中的标签体的内容。标签体可以是一段文字，也可以是其他标签。 </p></li><li><p>通过给innerHTML赋值或者追加值，可以改表标签体的内容。如下图</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007153.png" alt="image-20240131000856980"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007874.png" alt="image-20240131000909451"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007864.png" alt="image-20240131000922589"></p></li><li><h5 id="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"><a href="#上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。" class="headerlink" title="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"></a>上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。</h5></li></ul></li><li><h3 id="☆②所有的节点对象都有的关键的属性style。"><a href="#☆②所有的节点对象都有的关键的属性style。" class="headerlink" title="☆②所有的节点对象都有的关键的属性style。"></a>☆②所有的节点对象都有的关键的属性style。</h3><ul><li><h4 id="1-给style属性赋值，就可以改变其样式。"><a href="#1-给style属性赋值，就可以改变其样式。" class="headerlink" title="1.给style属性赋值，就可以改变其样式。"></a>1.给style属性赋值，就可以改变其样式。</h4><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007847.png" alt="Image [70]"></li></ul></li><li><p>注意：两个单词的写法</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008113.png" alt="Image [71]"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310011810.png" alt="image-20240131001138257"></p></li><li><h3 id="2-改变节点对象的class值。用className属性。"><a href="#2-改变节点对象的class值。用className属性。" class="headerlink" title="2. 改变节点对象的class值。用className属性。"></a>2. 改变节点对象的class值。用className属性。</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008443.png" alt="Image [72]"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008722.png" alt="Image [73]"></p></li><li><h4 id="3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL"><a href="#3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL" class="headerlink" title="3.要想设置和修改，节点的属性值。查Api文档。例如： 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL"></a>3.要想设置和修改，节点的属性值。查Api文档。例如：<img> 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL</h4></li></ul></li></ul><hr><hr><h2 id="九、事件"><a href="#九、事件" class="headerlink" title="九、事件"></a>九、事件</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008164.png" alt="Image [74]"></p><ul><li><h3 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h3><ul><li><h4 id="1-点击事件"><a href="#1-点击事件" class="headerlink" title="1.点击事件"></a>1.点击事件</h4></li><li><blockquote><ol><li><p>onclick：单机事件</p></li><li><p>ondblclick ：双击事件</p></li></ol></blockquote></li><li><h4 id="2-焦点事件"><a href="#2-焦点事件" class="headerlink" title="2.焦点事件"></a>2.焦点事件</h4></li><li><blockquote><ol><li>onblur：失去焦点</li></ol><ul><li>一般用于表单验证,当光标不在输入框时，就会失去焦点，触发onblur事件发生。</li></ul><ol start="2"><li>onfocus：元素获得焦点</li></ol></blockquote></li><li><h4 id="3-加载事件"><a href="#3-加载事件" class="headerlink" title="3.加载事件"></a>3.加载事件</h4></li><li><blockquote><ol><li>onload：一张页面或者一幅图像完成加载</li></ol><ul><li>内部加载方式：script标签如果写在head标签里面，在上面的话，要使用窗口的事件机制，加载事件来控制，js 代码，在HTML页面加载完全，才运行。</li><li>如下图</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008323.png" alt="Image [80]"></li></ul></blockquote></li><li><h4 id="4-鼠标事件"><a href="#4-鼠标事件" class="headerlink" title="4.鼠标事件"></a>4.鼠标事件</h4></li><li><blockquote><ol><li>onmousedown ：标按钮披按下.</li></ol><ul><li>定义方法时,定义一个形参,接受 event 对象.</li><li>eventi对象的button属性可以获取鼠标按钮键被点击了.</li></ul><ol start="2"><li>onmouseup  ：鼠标按键被松开.</li><li>onmousemove ：鼠标被移动.</li><li>onmouseover：鼠标移到某元素之上.</li><li>onmouseout：鼠标从某元素移开.</li></ol></blockquote></li><li><h4 id="5-键盘事件"><a href="#5-键盘事件" class="headerlink" title="5.键盘事件"></a>5.键盘事件</h4></li><li><blockquote><ol><li>onkeydown： 某个键盘按键被按下.</li><li>onkeyup ：某个键盘按键被松开.</li><li>onkeypress： 某个键盘按键被按下并松开.</li></ol></blockquote></li><li><h4 id="6-选择和改变事件"><a href="#6-选择和改变事件" class="headerlink" title="6.选择和改变事件"></a>6.选择和改变事件</h4></li><li><blockquote><ol><li>onchange：域的内容被改变.</li></ol><ul><li><h4 id="☆-当在选择的下拉列表上，选择某个选项会触发该事件。"><a href="#☆-当在选择的下拉列表上，选择某个选项会触发该事件。" class="headerlink" title="☆ 当在选择的下拉列表上，选择某个选项会触发该事件。"></a>☆ 当在选择的下拉列表上，选择某个选项会触发该事件。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009283.png" alt="Image [81]"></p></li></ul><ol start="2"><li>onselect：文本被选中.</li></ol></blockquote></li><li><h4 id="7-表单事件"><a href="#7-表单事件" class="headerlink" title="7.表单事件:"></a>7.表单事件:</h4></li><li><blockquote><ol><li>onsubmit：确认按钮被点击.</li></ol><ul><li>可以阻止表单的提交<ul><li>方法返回falsel则表单被阻止提交.</li></ul></li><li>写法：</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009623.png" alt="Image [82]"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009823.png" alt="Image [83]"></li></ul><ol start="2"><li>onreset：重置按钮被点击.</li></ol></blockquote></li></ul></li></ul><hr><hr><h2 id="练习：动态表格案例"><a href="#练习：动态表格案例" class="headerlink" title="练习：动态表格案例"></a>练习：动态表格案例</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009683.png" alt="image-20240131000210183"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009764.png" alt="image-20240131000243636"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010442.png" alt="image-20240131000254150"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010003.png" alt="image-20240131000332037"></p><ul><li>☆动态表格案例总结：用DOM对象在内存层面你，不管创建了多少子节点或者父节点，这些结构都是在内存层面上的，在浏览器页面上不能够直接显示，要想显示，必须有html的已有标签对象。先获取已有的html标签对象节点，将内存层面上的节点，appendChild为已有节点的子节点。同时，属性的样式会关联到css样式表中，只要和css表中的选择器对应的上，就可以显示样式。</li><li>☆ 技巧：怎样获取当前标签的对象，直接在html标签后面，加上事件属性。绑定事件方式一，事件调用指定方法，括号里面写this。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010543.png" alt="image-20240131000404203"></li><li>那么就可以在方法声明的地方，形式参数就是当前对象。如下图：</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010436.png" alt="Image [62]"></li></ul><hr><hr><h2 id="总结1："><a href="#总结1：" class="headerlink" title="总结1："></a>总结1：</h2><ul><li><h3 id="怎么来理解BOM对象和DOM对象以及HTML-DOM对象？"><a href="#怎么来理解BOM对象和DOM对象以及HTML-DOM对象？" class="headerlink" title="怎么来理解BOM对象和DOM对象以及HTML DOM对象？"></a>怎么来理解BOM对象和DOM对象以及HTML DOM对象？</h3></li><li><p>1 . BOM对象，就是将浏览器各个组成部分，封装为对象。有显示器对象、浏览器对象、windows窗口对象、URL地址栏对象、以及历史记录对象，这5个BOM对象。windows窗口对象，是BOM对象中的主要对象，因为其他对象都在一个窗口当中。可以通过windows对象来获取，其他4个BOM对象。</p></li><li><p>2 .在windows窗口获取的document对象，是DOM对象。</p><ul><li>document对象是DOM对象的主要对象。DOM对象也在窗口内，但是只有document对象（.html文件对象）是通过窗口获取，其他DOM对象是通过document对象获取的。</li></ul></li><li><p>3 .document对象，他是将整个文档封装成一个document对象。对应着HTML里面最外层标签<html></html>。他可以获取其他节点对象</p><ul><li>document.getElementById()；。或者对象们；另外也可以创建其他DOM对象。</li></ul></li><li><p>4.有了一些基础的DOM对象，也就是有了某个标签的（节点）的对象之后。然后用HTML DOM来、对这个对象进行获取、修改、添加或删除操作。</p></li><li><p>5.从上往下看，一层一层的，从窗口(window)——&gt;文本对象(document)——&gt;单个文本元素对象(element)——&gt;单个文本元素操作（HTML DOM）这样方便记忆。也便于理解。</p></li><li><p>节点：在HTML中所有的单个元件，就是单个节点。对应着一对，一对的标签。</p></li><li><p>子节点：外标签包着内标签，也就是节点包着子节点。例如：<body>文字 <a>超链接</a></body>。</p></li><li><p>Node 节点对象：他可以认为是虚有的，它里面的方法用来“CRUDdom树”</p></li><li><p>其实就是所有的DOM对象，都是一个节点，DOM对象本身，就可以增加节点，删除节点，替换节点，查询节点。</p></li><li><p>有了DOM这些对象，用他们的功能。就可以用javaScript语言对HTML的标签进行操作。</p></li><li><p>要记住：虽然能用，JavaScript语言来操作，内存层面的HTML的元素对象代码，使其在浏览器上面显示样式。但是他和HTML里面的标签没有，任何关系。</p><ul><li>执行了“JavaScript语言操作的元件对象，比如添加节点，删除节点”不会再HTML文档中自动生成，HTML代码。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011212.png" alt="Image [84]"></p><ul><li><h3 id="理解、标签、标签体、标签属性、控制元素的样式。"><a href="#理解、标签、标签体、标签属性、控制元素的样式。" class="headerlink" title="理解、标签、标签体、标签属性、控制元素的样式。"></a>理解、标签、标签体、标签属性、控制元素的样式。</h3><blockquote><p>1.1标签: 标签就是一对对的&lt;&gt;&lt;&#x2F;&gt;。例如：<code>&lt;img&gt; &lt;/img&gt; </code></p><p>1.2标签体:一对标签里面的内容。例如：<code>&lt;img&gt;这是标签体，可以是子标签也可以是文字 &lt;/img&gt;</code></p><p>1.3 标签属性: 定义在标签&lt;&gt;里面的。例如：<code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code></p><p>1.4 标签控制样式:</p></blockquote></li></ul><h2 id="总结2："><a href="#总结2：" class="headerlink" title="总结2："></a>总结2：</h2><ul><li><h4 id="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。"><a href="#一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。" class="headerlink" title="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 &lt;script&gt;js代码&lt;/script&gt;，标签一般都写在&lt;body&gt;......&lt;script&gt;&lt;/body&gt;body标签的最下面。"></a>一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 <code>&lt;script&gt;js代码&lt;/script&gt;</code>，标签一般都写在<code>&lt;body&gt;......&lt;script&gt;&lt;/body&gt;</code>body标签的最下面。</h4></li><li><h4 id="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"><a href="#js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。" class="headerlink" title="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"></a>js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。</h4></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;javaScript&lt;/center&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="javaScript" scheme="https://protonlml.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>55.动态代理</title>
    <link href="https://protonlml.github.io/2019/09/27/55.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://protonlml.github.io/2019/09/27/55.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2019-09-27T14:38:00.000Z</published>
    <updated>2024-07-08T19:13:55.592Z</updated>
    
    <content type="html"><![CDATA[<h1><center>IO流-转换流</center></h1><h2 id="一、转换流"><a href="#一、转换流" class="headerlink" title="一、转换流"></a>一、转换流</h2><p>动态代理;</p><p>为什么要有动态代理对象？</p><ul><li><p>因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。</p></li><li><p>那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。</p></li></ul><p>解决办法;</p><ul><li>非侵入式增加功能。</li><li>1.我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。</li><li>2.然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。</li><li><h2 id="注意：代理对象在java中是有固定对象的，newProxyInstance-所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。"><a href="#注意：代理对象在java中是有固定对象的，newProxyInstance-所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。" class="headerlink" title="注意：代理对象在java中是有固定对象的，newProxyInstance();- 所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。"></a>注意：代理对象在java中是有固定对象的，newProxyInstance();<br>- 所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。</h2></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;IO流-转换流&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、转换流&quot;&gt;&lt;a href=&quot;#一、转换流&quot; class=&quot;headerlink&quot; title=&quot;一、转换流&quot;&gt;&lt;/a&gt;一、转换流&lt;/h2&gt;&lt;p&gt;动态代理;&lt;/p&gt;
&lt;p&gt;为什么要有动态代理对</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>54.多线程</title>
    <link href="https://protonlml.github.io/2019/09/27/54.%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://protonlml.github.io/2019/09/27/54.%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2019-09-27T01:38:00.000Z</published>
    <updated>2024-07-08T19:13:44.451Z</updated>
    
    <content type="html"><![CDATA[<h1><center>IO流-转换流</center></h1><h2 id="一、转换流"><a href="#一、转换流" class="headerlink" title="一、转换流"></a>一、转换流</h2><hr><hr><p>多线程：</p><ul><li>一个软件运行了，就相当于一个“进程”，然后软件中，有很多独立的功能，多个功能就是多个线程。</li><li>比如：腾讯电脑管家运行了，他是一个进程，里面的“病毒查杀”“垃圾清理”“电脑加速”等功能分别是多个线程，他们可以同时在这个“电脑管家”进程中，同步进行。并列执行。这就是多线程</li></ul><p>开发中，需要用到多线程的时候，当前模块项目就是一个进程，里面有很多独立的业务流程，他们是可以并行执行的。不一定都是单线程的，执行了这个功能，需要等待执行完才能执行下一个功能。这样是很慢的。所以需要多线程。</p><p>当业务代码中需要多线程的时候，我们用代码手动创建另一个或者多个线程，将不同的业务代码流程，分别写在多个线程内部。当执行这个软件的时候，执行到此部分多线程业务时，会自动的开多线程并行执行多个业务功能，同时产生结果，最终返回给主线程。</p><p>项目主业务流程都是在，main中开始的线程，就是主线程。当需要执行其他的业务流程时，需要从main其中开启其他线程的。</p><p>（比如：手机启动游戏的时候，有线程是加载本地文件，有的线程是加载背景音乐，有的线程是加载动态背景图，多个线程并行运行）</p><p>&#x2F;&#x2F;一般java中有线程池，我们使用线程池来拿线程就行了，然后进行使用。目的是：线程也是资源，每次都要创建需要耗费时间，如果某个线程一直不释放，就会占用很长时间的资源内存。所以我们写代码时，不要自己创建，java已经给创建好了，我们只需要从线程池中拿线程对象来开启新线程。并且java也会自动管理这个线程。&#x2F;&#x2F;</p><p>CPU 执行多个线程，单核cpu就是，执行1线程，然后又去执行2线程，执行3线程，多个线程交替执行，由于cpu速度非常快，感觉几个线程是，同时并行执行的，其实不是。</p><p>CPU多核多线程，如4核8线程，指的是CPU能够同时一下8个线程同时并行执行，每个线程都是独立的，速度更快。如果此时开启了16个线程，那么它也是8个线程，和另8个线程交替执行。</p><hr><hr><p>线程安全问题：</p><ul><li><p>比如，卖100张票，创建了3个线程假设为3个窗口，3个线程中执行的业务代码是一样的，3个线程都要对这同100张票进行售卖。</p></li><li><p>这里100张票，属于3个线程的共享数据，共享数据只能有一份。某个线程对这个共享数据进行修改了，都会影响到其他线程中使用这个数据。</p></li><li><p>这里static 修饰的ticket变量作为“电影票变量”  在 线程任务对象中，只有一份，不管创建几个同种任务对象，都共享这个变量的值ticket,因为其是static的，属于类，类加载就加载了在方法区，只有一份。以后每次new的任务对象都在堆中，所以可以共享。</p></li><li><p>但是，在每个线程中，操作共享数据的代码，每个线程是抢夺cpu调度的，也就是说，线程1在操作这个共享ticket数据时，刚改完，线程2可能就抢到了cpu调度，线程2又把这个共享ticket数据给改了，那就会导致最终的共享数据是错误的。</p></li><li><p>解决办法就是，将线程中，操作共享数据的这部分代码，给锁起来。如：线程1抢到了cpu调度时，执行操作共享数据这部分代码时，给包裹起来，此时只有线程1能执行它线程中这部分代码。其他线程都得等线程1执行完共享数据的操作，开锁了。其他线程才可以抢cpu调度 {执行操作共享数据的代码}。</p></li><li><p>这样就保证了，多线程共享数据的安全性，只有当某个线程全部操作完共享数据的代码，就是改完了确定改好了，才让其他线程去改。</p></li><li><p>这个锁就是同步代码块，让同步代码块里面的代码是轮流执行的</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;IO流-转换流&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、转换流&quot;&gt;&lt;a href=&quot;#一、转换流&quot; class=&quot;headerlink&quot; title=&quot;一、转换流&quot;&gt;&lt;/a&gt;一、转换流&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;多线程：&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>52.IO流-转换流</title>
    <link href="https://protonlml.github.io/2019/09/26/52.IO%E6%B5%81-%E8%BD%AC%E6%8D%A2%E6%B5%81/"/>
    <id>https://protonlml.github.io/2019/09/26/52.IO%E6%B5%81-%E8%BD%AC%E6%8D%A2%E6%B5%81/</id>
    <published>2019-09-26T01:38:00.000Z</published>
    <updated>2024-07-08T19:06:04.004Z</updated>
    
    <content type="html"><![CDATA[<h1><center>IO流-转换流</center></h1><h2 id="一、转换流"><a href="#一、转换流" class="headerlink" title="一、转换流"></a>一、转换流</h2><ul><li><h3 id="转换流：是字节流，与字符流之间的桥梁"><a href="#转换流：是字节流，与字符流之间的桥梁" class="headerlink" title="转换流：是字节流，与字符流之间的桥梁"></a>转换流：是字节流，与字符流之间的桥梁</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407090142769.png" alt="image-20240709014159796"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li><h2 id="转换文件编码"><a href="#转换文件编码" class="headerlink" title="转换文件编码"></a>转换文件编码</h2></li></ul><h5 id="需求1：手动创建一个GBK的文件，把文件中的中文读取到内存中，不能出现乱码"><a href="#需求1：手动创建一个GBK的文件，把文件中的中文读取到内存中，不能出现乱码" class="headerlink" title="需求1：手动创建一个GBK的文件，把文件中的中文读取到内存中，不能出现乱码"></a>需求1：手动创建一个GBK的文件，把文件中的中文读取到内存中，不能出现乱码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.io_stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入 转换流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReadDemo</span> <span class="keyword">extends</span> <span class="title class_">ConversionFlowTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需求1：手动创建一个GBK的文件，把文件中的中文读取到内存中，不能出现乱码</span></span><br><span class="line"><span class="comment">         *  了解 一下， 这种方式在JDK11时 被淘汰了</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// gbkcsb.txt 文件在本地就是GBK编码</span></span><br><span class="line">    <span class="comment">/*    InputStreamReader gbk = new InputStreamReader(new FileInputStream(&quot;javabasis/aaa/gbkcsb.txt&quot;),&quot;GBK&quot;);</span></span><br><span class="line"><span class="comment">        int len;</span></span><br><span class="line"><span class="comment">        char[] chars = new char[8192];</span></span><br><span class="line"><span class="comment">        while ((len=gbk.read(chars))!=-1)&#123;</span></span><br><span class="line"><span class="comment">            for (char aChar : chars) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(aChar);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        gbk.close();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 替代方案</span></span><br><span class="line"><span class="comment">         * 直接使用 FileReader 来指定 编码读取文本</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;javabasis/aaa/gbkcsb.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bfr.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        bfr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="需求2：把一段中文按照GBK的方式写到本地文件"><a href="#需求2：把一段中文按照GBK的方式写到本地文件" class="headerlink" title="需求2：把一段中文按照GBK的方式写到本地文件"></a>需求2：把一段中文按照GBK的方式写到本地文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.io_stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出 转换流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutPutStreamWriteDemo</span> <span class="keyword">extends</span> <span class="title class_">ConversionFlowTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需求2：把一段中文按照GBK的方式写到本地文件</span></span><br><span class="line"><span class="comment">         *  这里是追加到 gbkcsb.txt文本文件后面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;javabasis/aaa/gbkcsb.txt&quot;</span>, <span class="literal">true</span>), <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);<span class="comment">//使用字符缓冲流包一下</span></span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//可以使用 换行</span></span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;出师表，诸葛亮，躬耕南阳，采菊东篱&quot;</span>);</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="需求3：将本地文件中的GBK文件，转成UTF-8"><a href="#需求3：将本地文件中的GBK文件，转成UTF-8" class="headerlink" title="需求3：将本地文件中的GBK文件，转成UTF-8"></a>需求3：将本地文件中的GBK文件，转成UTF-8</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.io_stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingConversion</span> <span class="keyword">extends</span> <span class="title class_">ConversionFlowTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需求3：将本地文件中的GBK文件，转成UTF-8</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.JDK11之前的写法</span></span><br><span class="line">        <span class="comment">/*BufferedReader bfr = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;javabasis/aaa/gbkcsb.txt&quot;), &quot;GBK&quot;));</span></span><br><span class="line"><span class="comment">        BufferedWriter bfw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(&quot;javabasis/aaa/utf-8csb.txt&quot;), &quot;UTF-8&quot;));</span></span><br><span class="line"><span class="comment">        String line;</span></span><br><span class="line"><span class="comment">        while ((line=bfr.readLine())!=null)&#123;</span></span><br><span class="line"><span class="comment">            bfw.newLine();</span></span><br><span class="line"><span class="comment">            bfw.write(line);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        bfw.close();</span></span><br><span class="line"><span class="comment">        bfr.close();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// JDK11之后的写法</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;javabasis/aaa/gbkcsb.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;javabasis/aaa/utf-8csb.txt&quot;</span>, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bfr.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            bfw.write(line);</span><br><span class="line">            bfw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bfw.close();</span><br><span class="line">        bfr.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407090305901.png" alt="image-20240709030531972"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407090300598.png" alt="image-20240709030039577"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;IO流-转换流&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、转换流&quot;&gt;&lt;a href=&quot;#一、转换流&quot; class=&quot;headerlink&quot; title=&quot;一、转换流&quot;&gt;&lt;/a&gt;一、转换流&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;转换流：是字节流，</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>51.IO流-字节缓冲流与字符缓冲流</title>
    <link href="https://protonlml.github.io/2019/09/26/51.IO%E6%B5%81-%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E6%B5%81/"/>
    <id>https://protonlml.github.io/2019/09/26/51.IO%E6%B5%81-%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E6%B5%81/</id>
    <published>2019-09-26T01:35:00.000Z</published>
    <updated>2024-07-08T17:33:11.722Z</updated>
    
    <content type="html"><![CDATA[<h1><center>IO流-字节缓冲流与字符缓冲流</center></h1><h2 id="一、字节缓冲流与字符缓冲流体系"><a href="#一、字节缓冲流与字符缓冲流体系" class="headerlink" title="一、字节缓冲流与字符缓冲流体系"></a>一、字节缓冲流与字符缓冲流体系</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082253166.png" alt="image-20240708225354464"></p><ul><li><h3 id="1-为什么使用缓冲流"><a href="#1-为什么使用缓冲流" class="headerlink" title="1.为什么使用缓冲流"></a>1.为什么使用缓冲流</h3><ul><li><h4 id="缓冲流底层自带了一个数组8192个字节，一次能读8192个字节。到缓冲区"><a href="#缓冲流底层自带了一个数组8192个字节，一次能读8192个字节。到缓冲区" class="headerlink" title="缓冲流底层自带了一个数组8192个字节，一次能读8192个字节。到缓冲区"></a>缓冲流底层自带了一个数组8192个字节，一次能读8192个字节。到缓冲区</h4></li><li><h4 id="所以，为了提高读取和写出的效率，使用缓冲流"><a href="#所以，为了提高读取和写出的效率，使用缓冲流" class="headerlink" title="所以，为了提高读取和写出的效率，使用缓冲流"></a>所以，为了提高读取和写出的效率，使用缓冲流</h4></li></ul></li><li><h3 id="2-怎么使用"><a href="#2-怎么使用" class="headerlink" title="2.怎么使用"></a>2.怎么使用</h3><ul><li><h3 id="直接包在字节流，或者字符流的外面就行了"><a href="#直接包在字节流，或者字符流的外面就行了" class="headerlink" title="直接包在字节流，或者字符流的外面就行了"></a>直接包在字节流，或者字符流的外面就行了</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082312042.png" alt="image-20240708231220196"></p></li><li><h4 id="虽然“字符流”已经有了缓冲区，包与不包读取写出区别不大，但是它中有特有方法，可以对纯文本文件更好的操作，所以说也有包的必要"><a href="#虽然“字符流”已经有了缓冲区，包与不包读取写出区别不大，但是它中有特有方法，可以对纯文本文件更好的操作，所以说也有包的必要" class="headerlink" title="虽然“字符流”已经有了缓冲区，包与不包读取写出区别不大，但是它中有特有方法，可以对纯文本文件更好的操作，所以说也有包的必要"></a>虽然“字符流”已经有了缓冲区，包与不包读取写出区别不大，但是它中有特有方法，可以对纯文本文件更好的操作，所以说也有包的必要</h4></li></ul></li></ul><h2 id="二、字节缓冲流提高效率的原理"><a href="#二、字节缓冲流提高效率的原理" class="headerlink" title="二、字节缓冲流提高效率的原理"></a>二、字节缓冲流提高效率的原理</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082305501.png" alt="image-20240708230554407"></p><h2 id="三、实操"><a href="#三、实操" class="headerlink" title="三、实操"></a>三、实操</h2><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082318280.png" alt="image-20240708231850012"></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><hr><h2 id="四、字符缓冲流"><a href="#四、字符缓冲流" class="headerlink" title="四、字符缓冲流"></a>四、字符缓冲流</h2><ul><li><h3 id="特殊方法的使用"><a href="#特殊方法的使用" class="headerlink" title="特殊方法的使用"></a>特殊方法的使用</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082322199.png" alt="image-20240708232247136"></p><h2 id="readLine-方法的细节"><a href="#readLine-方法的细节" class="headerlink" title="readLine()方法的细节"></a>readLine()方法的细节</h2><ul><li><h4 id="readLine方法在读取的时候，一次读一整行，遇到回车换行结束"><a href="#readLine方法在读取的时候，一次读一整行，遇到回车换行结束" class="headerlink" title="readLine方法在读取的时候，一次读一整行，遇到回车换行结束"></a>readLine方法在读取的时候，一次读一整行，遇到回车换行结束</h4></li><li><h4 id="但是他不会把回车换行读到内存当中"><a href="#但是他不会把回车换行读到内存当中" class="headerlink" title="但是他不会把回车换行读到内存当中"></a>但是他不会把回车换行读到内存当中</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082349685.png" alt="image-20240708234153183"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082350588.png" alt="image-20240708235024071"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.io_stream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将出师表csb.txt文章中的顺序恢复</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;javabasis/aaa/csb.txt&quot;</span>));</span><br><span class="line">        TreeMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(); <span class="comment">//使用treeMap 排序</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            String[] strs = line.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">            <span class="comment">//读取一行，进行排序</span></span><br><span class="line">            map.put(Integer.parseInt(strs[<span class="number">0</span>]),strs[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写出到本地文件中</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;javabasis/aaa/result.txt&quot;</span>));</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entries = map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : entries) &#123;</span><br><span class="line">            bw.write(entry.getValue());</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407090021748.png" alt="image-20240709002104483"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;IO流-字节缓冲流与字符缓冲流&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、字节缓冲流与字符缓冲流体系&quot;&gt;&lt;a href=&quot;#一、字节缓冲流与字符缓冲流体系&quot; class=&quot;headerlink&quot; title=&quot;一、字节缓冲流与字符缓冲流体系&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>50.IO（字节流&amp;字符流）</title>
    <link href="https://protonlml.github.io/2019/09/26/50.IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81&amp;%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/"/>
    <id>https://protonlml.github.io/2019/09/26/50.IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81&amp;%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/</id>
    <published>2019-09-26T01:31:00.000Z</published>
    <updated>2024-07-08T17:28:30.086Z</updated>
    
    <content type="html"><![CDATA[<h1><center>IO（字节流&字符流）</center></h1><h2 id="一、什么是IO流？"><a href="#一、什么是IO流？" class="headerlink" title="一、什么是IO流？"></a>一、什么是IO流？</h2><ul><li><h4 id="存储和读取数据的解决方案"><a href="#存储和读取数据的解决方案" class="headerlink" title="存储和读取数据的解决方案"></a>存储和读取数据的解决方案</h4><ul><li><h4 id="只要项目中，需要对本地文件进行读取和写入操作，肯定是需要用到IO流处理"><a href="#只要项目中，需要对本地文件进行读取和写入操作，肯定是需要用到IO流处理" class="headerlink" title="只要项目中，需要对本地文件进行读取和写入操作，肯定是需要用到IO流处理"></a>只要项目中，需要对本地文件进行读取和写入操作，肯定是需要用到IO流处理</h4></li></ul></li></ul><hr><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407051727884.png" alt="image-20240705172745968"></p><h2 id="二、IO流体系"><a href="#二、IO流体系" class="headerlink" title="二、IO流体系"></a>二、IO流体系</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407051742916.png" alt="image-20240705174236054"></p><hr><hr><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082306087.png" alt="image-202407082305501.png"></p><hr><h2 id="IO流的使用原则"><a href="#IO流的使用原则" class="headerlink" title="IO流的使用原则"></a>IO流的使用原则</h2><ul><li><h4 id="随用随创建"><a href="#随用随创建" class="headerlink" title="随用随创建"></a>随用随创建</h4></li><li><h4 id="什么时候不用，什么时候关闭"><a href="#什么时候不用，什么时候关闭" class="headerlink" title="什么时候不用，什么时候关闭"></a>什么时候不用，什么时候关闭</h4></li><li><h4 id="切记，不要上来就把所有的流都创建在代码的最上面。"><a href="#切记，不要上来就把所有的流都创建在代码的最上面。" class="headerlink" title="切记，不要上来就把所有的流都创建在代码的最上面。"></a>切记，不要上来就把所有的流都创建在代码的最上面。</h4></li></ul><hr><h1 id="1-字节流"><a href="#1-字节流" class="headerlink" title="1.字节流"></a>1.字节流</h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407051743687.png" alt="image-20240705174330297"></p><hr><ul><li><h3 id="1-字节输出流-FileOutputStream"><a href="#1-字节输出流-FileOutputStream" class="headerlink" title="1. 字节输出流 FileOutputStream"></a>1. 字节输出流 FileOutputStream</h3><ul><li><h4 id="操作本地文件的字节输出流，可以把程序中的数据写到本地文件中。"><a href="#操作本地文件的字节输出流，可以把程序中的数据写到本地文件中。" class="headerlink" title="操作本地文件的字节输出流，可以把程序中的数据写到本地文件中。"></a>操作本地文件的字节输出流，可以把程序中的数据写到本地文件中。</h4></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407052150386.png" alt="image-20240705215025016"> </p><ul><li><h3 id="续写："><a href="#续写：" class="headerlink" title="续写："></a>续写：</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407052153443.png" alt="image-20240705215327806"></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407052159728.png" alt="image-20240705215909710"></p><hr><hr><ul><li><h3 id="2-字节输入流-FileInputStream"><a href="#2-字节输入流-FileInputStream" class="headerlink" title="2. 字节输入流 FileInputStream"></a>2. 字节输入流 FileInputStream</h3><ul><li><h4 id="操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来。"><a href="#操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来。" class="headerlink" title="操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来。"></a>操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来。</h4></li><li><h3 id="这里面要记住，循环读取的套路书写方法"><a href="#这里面要记住，循环读取的套路书写方法" class="headerlink" title="这里面要记住，循环读取的套路书写方法"></a>这里面要记住，循环读取的套路书写方法</h3></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407052232409.png" alt="image-20240705223257226"></p><ul><li><h3 id="一次读一个字节，效率太慢了，一次读多个字节？"><a href="#一次读一个字节，效率太慢了，一次读多个字节？" class="headerlink" title="一次读一个字节，效率太慢了，一次读多个字节？"></a>一次读一个字节，效率太慢了，一次读多个字节？</h3><ul><li><h4 id="注意：一次读一个字节数组的数据，每次读取会尽可能把数组装满。"><a href="#注意：一次读一个字节数组的数据，每次读取会尽可能把数组装满。" class="headerlink" title="注意：一次读一个字节数组的数据，每次读取会尽可能把数组装满。"></a>注意：一次读一个字节数组的数据，每次读取会尽可能把数组装满。<img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060010806.png" alt="image-20240706001005685"></h4></li><li><h4 id="循环读，就能读取本地文件中的所有内容"><a href="#循环读，就能读取本地文件中的所有内容" class="headerlink" title="(循环读，就能读取本地文件中的所有内容)"></a>(循环读，就能读取本地文件中的所有内容)</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060013097.png" alt="image-20240706001357137"></p></li></ul></li></ul><hr><hr><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407052328373.png" alt="image-20240705232843350"></p><ul><li><h3 id="拷贝大文件"><a href="#拷贝大文件" class="headerlink" title="拷贝大文件"></a>拷贝大文件</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060017137.png" alt="image-20240706001710617"></li></ul></li></ul><hr><hr><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><ul><li><h4 id="字节流读取文件的时候，文件中不要有中文"><a href="#字节流读取文件的时候，文件中不要有中文" class="headerlink" title="字节流读取文件的时候，文件中不要有中文"></a>字节流读取文件的时候，文件中不要有中文</h4></li><li><p>使用字节流读取纯文本文件时，内容中有 “汉字” 读取到系统内存之后，会有乱码。</p><ul><li>因为：字节流 FileinputStream的read方法，读取文件时，是一个字节一个字节读取的，而一个汉字，在计算机中占用3个字节，Unicode组织制定的（GBK是2个字节），有可能读取的时候，字节没有读取完整。</li><li>但是拷贝纯文本文件没有问题，因为是全部字节循环读取，最终都会被读取完毕，再写到目标文件中也是完整的。</li></ul></li><li><p>字节流：一次只能读取一个字节</p><p>在计算机中，一个字母正好是一个字节（不管是ASCII 还是Unicode字符集）</p><p>但是在Unicode字符集中，规定一个汉字占用了3个字节。（Unicode组织制定的，全世界通用）</p><p>在GBK字符集中，一个汉字占用了两个字节（我国自己指定的）</p><p>所以使用字节流来读取文本文件(内部是汉字)会出现乱码，因为一次只读取了一个字节。</p><ul><li>在系统中使用的Unicode字符集，是通用的，需要使用UTF-8来编解码。</li></ul></li></ul><hr><hr><h1 id="2-字符流"><a href="#2-字符流" class="headerlink" title="2. 字符流"></a>2. 字符流</h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060132692.png" alt="image-20240706013200033"></p><ul><li><h3 id="字符流，最适合操作纯文本文件，遇到中文也不会出现乱码"><a href="#字符流，最适合操作纯文本文件，遇到中文也不会出现乱码" class="headerlink" title="字符流，最适合操作纯文本文件，遇到中文也不会出现乱码"></a>字符流，最适合操作纯文本文件，遇到中文也不会出现乱码</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060130593.png" alt="image-20240706013041354"></p><ul><li><h2 id="2-1-字符输入流FileReader"><a href="#2-1-字符输入流FileReader" class="headerlink" title="2.1 字符输入流FileReader"></a>2.1 字符输入流FileReader</h2><ul><li><h2 id="就是从本地文件中，读取内容"><a href="#就是从本地文件中，读取内容" class="headerlink" title="就是从本地文件中，读取内容"></a>就是从本地文件中，读取内容</h2></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060218923.png" alt="image-20240706021838958"></p></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407031847873.png" alt="image-20240703184711072"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407031856921.png" alt="image-20240703185620400"></p><h3 id="字符输入流，就是从本地文件中读取文本内容到系统中。"><a href="#字符输入流，就是从本地文件中读取文本内容到系统中。" class="headerlink" title="字符输入流，就是从本地文件中读取文本内容到系统中。"></a>字符输入流，就是从本地文件中读取文本内容到系统中。</h3><ul><li><h5 id="原理是，在创建字符输入流的时候，它会在底层创建一个字节数组长度为8192，read一次就会尽可能的将这个字节数组给填满。（他就是缓冲区）。下一次读，就会直接在缓冲区中读，缓冲区中读取完了，再将本地文本再次加载到缓冲区。（提高读取文件的效率）"><a href="#原理是，在创建字符输入流的时候，它会在底层创建一个字节数组长度为8192，read一次就会尽可能的将这个字节数组给填满。（他就是缓冲区）。下一次读，就会直接在缓冲区中读，缓冲区中读取完了，再将本地文本再次加载到缓冲区。（提高读取文件的效率）" class="headerlink" title="原理是，在创建字符输入流的时候，它会在底层创建一个字节数组长度为8192，read一次就会尽可能的将这个字节数组给填满。（他就是缓冲区）。下一次读，就会直接在缓冲区中读，缓冲区中读取完了，再将本地文本再次加载到缓冲区。（提高读取文件的效率）"></a>原理是，在创建字符输入流的时候，它会在底层创建一个字节数组长度为8192，read一次就会尽可能的将这个字节数组给填满。（他就是缓冲区）。下一次读，就会直接在缓冲区中读，缓冲区中读取完了，再将本地文本再次加载到缓冲区。（提高读取文件的效率）</h5></li><li><h5 id="字节输入流，没有这个缓冲区"><a href="#字节输入流，没有这个缓冲区" class="headerlink" title="字节输入流，没有这个缓冲区"></a>字节输入流，没有这个缓冲区</h5></li><li><h2 id="2-2-字符输出流-FileWriter"><a href="#2-2-字符输出流-FileWriter" class="headerlink" title="2.2 字符输出流 FileWriter"></a>2.2 字符输出流 FileWriter</h2><ul><li><h2 id="就是将程序中的数据，写出到本地文件中。（write的两种方式）"><a href="#就是将程序中的数据，写出到本地文件中。（write的两种方式）" class="headerlink" title="就是将程序中的数据，写出到本地文件中。（write的两种方式）"></a>就是将程序中的数据，写出到本地文件中。（write的两种方式）</h2></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060233450.png" alt="image-20240706023312824"></p></li></ul></li></ul><hr><hr><h1 id="字符流的底层原理（有缓冲区）"><a href="#字符流的底层原理（有缓冲区）" class="headerlink" title="字符流的底层原理（有缓冲区）"></a>字符流的底层原理（有缓冲区）</h1><ul><li><h3 id="字符输入流的底层原理"><a href="#字符输入流的底层原理" class="headerlink" title="字符输入流的底层原理"></a>字符输入流的底层原理</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060235307.png" alt="image-20240706023516385"></p><ul><li><h3 id="字符输出流的底层原理"><a href="#字符输出流的底层原理" class="headerlink" title="字符输出流的底层原理"></a>字符输出流的底层原理</h3><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060243864.png" alt="image-20240706024303312"></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407080149822.png" alt="image-20240708000749263"></p><h1 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h1><h3 id="拷贝文件夹中的所有文件（包括子文件夹）"><a href="#拷贝文件夹中的所有文件（包括子文件夹）" class="headerlink" title="拷贝文件夹中的所有文件（包括子文件夹）"></a>拷贝文件夹中的所有文件（包括子文件夹）</h3><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407080201552.png" alt="image-20240708020125127"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.io_stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习一：</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 拷贝：</span></span><br><span class="line"><span class="comment"> * 拷贝一个文件夹，考虑子文件夹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将一个文件夹中的所有 内容拷贝</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//源文件路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;javabasis\\aaa&quot;</span>);</span><br><span class="line">        <span class="comment">// 目标文件路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;javabasis\\copy_directorys&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拷贝就想  使用 字节流  来操作</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        copyDirectorys(src, to);</span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;拷贝完成用时&quot;</span> + (l1 - l) + <span class="string">&quot;豪秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src 文件夹源路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to  目标路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyDirectorys</span><span class="params">(File src, File to)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//由于目的地文件夹如果不存在，会报错。所以先创建。即使目的文件夹有，也没关系不报错</span></span><br><span class="line">        to.mkdir();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// src 从源文件夹中 拿出所有的文件包括文件夹</span></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                    <span class="comment">//使用缓冲流包一下，目的是流 读到 缓冲区，再从缓冲区往外写 效率速度提高</span></span><br><span class="line">                    <span class="type">BufferedInputStream</span> <span class="variable">bfis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">                    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(to, file.getName()));</span><br><span class="line">                    <span class="comment">//使用缓冲流包一下，目的是流先 写到缓冲区，再从缓冲区写到文本中 效率速度提高</span></span><br><span class="line">                    <span class="type">BufferedOutputStream</span> <span class="variable">bfos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//是文件直接拷贝</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 一个字节，一个字节的读，一个字节一个字节的写</span></span><br><span class="line"><span class="comment">                     * 非常慢</span></span><br><span class="line"><span class="comment">                     * 等了好久也没结束</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="comment">/*int b;</span></span><br><span class="line"><span class="comment">                    while ((b = fis.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">                        fos.write(b); //读多少就写多少</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    fos.close();</span></span><br><span class="line"><span class="comment">                    fis.close();*/</span></span><br><span class="line">                    <span class="comment">/*-----------------------------------------*/</span></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 使用字节数组，指定一次读取 0.5M</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 因为都是小文件，中间的容器创建太大，导致空间浪费，速度反而慢</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 最终 拷贝完成用时 577~668豪秒</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line"></span><br><span class="line">                     <span class="comment">/*int len;</span></span><br><span class="line"><span class="comment">                     byte[] b = new byte[1024 * 1024 * 1/2]; //0.5M大小</span></span><br><span class="line"><span class="comment">                     while ((len = fis.read(b)) != -1) &#123;</span></span><br><span class="line"><span class="comment">                     fos.write(b, 0, len); //读多少就写多少</span></span><br><span class="line"><span class="comment">                     &#125;</span></span><br><span class="line"><span class="comment">                     fos.close();</span></span><br><span class="line"><span class="comment">                     fis.close();*/</span></span><br><span class="line">                    <span class="comment">/*-----------------------------------------*/</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 使用缓冲流包一下，速度快了一点</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 最终 拷贝完成用时797豪秒</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        int b;</span></span><br><span class="line"><span class="comment">                        while ((b=bfis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">                            bfos.write(b);</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                        bfos.close();</span></span><br><span class="line"><span class="comment">                        bfis.close();</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="comment">/*-----------------------------------------*/</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 使用缓冲流，</span></span><br><span class="line"><span class="comment">                     * 同时加上 还指定一次读0.5M数组</span></span><br><span class="line"><span class="comment">                     * 更快</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 最终：拷贝完成用时 511~616 豪秒</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 最快的</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="type">int</span> len;</span><br><span class="line">                    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1</span> / <span class="number">2</span>]; <span class="comment">//一次读取 0.5M 大小到数组中</span></span><br><span class="line">                    <span class="keyword">while</span> ((len = bfis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bfos.write(b, <span class="number">0</span>, len);<span class="comment">//一次写出 0.5M 到本地文件中</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    bfos.close();</span><br><span class="line">                    bfis.close();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//是文件夹，进入再拷贝</span></span><br><span class="line">                    copyDirectorys(file, <span class="keyword">new</span> <span class="title class_">File</span>(to, file.getName()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><h3 id="二、文件加密"><a href="#二、文件加密" class="headerlink" title="二、文件加密"></a>二、文件加密</h3><ul><li><h4 id="利用-异或-（如：100-10-110；110-10-100）-一个十进制数异或同一个数字两次，可以得到原数据"><a href="#利用-异或-（如：100-10-110；110-10-100）-一个十进制数异或同一个数字两次，可以得到原数据" class="headerlink" title="利用(^异或) （如：100^10&#x3D;110；110^10&#x3D;100） 一个十进制数异或同一个数字两次，可以得到原数据"></a>利用(^异或) （如：100^10&#x3D;110；110^10&#x3D;100） 一个十进制数异或同一个数字两次，可以得到原数据</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.io_stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对文件进行加密</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 将一个文件读出来之后，对其字节进行操作</span></span><br><span class="line"><span class="comment">         * 字节流</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;javabasis\\aaa\\aaa.mp4&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">ency</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;javabasis\\aaa\\bbbbbbbb.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件加密 存到 本地</span></span><br><span class="line">            fileEncryption(src,ency);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件解密</span></span><br><span class="line">        <span class="comment">// fileEncryption(ency,src);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密/解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ency</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fileEncryption</span><span class="params">(File src,File ency)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(ency);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>/<span class="number">2</span>]; <span class="comment">//0.5M 的 转移 容器</span></span><br><span class="line">        <span class="type">int</span> len;<span class="comment">//每次转移的字节数量</span></span><br><span class="line">        <span class="type">byte</span> myb=<span class="number">10</span>; <span class="comment">//声明一个字节默认值是 10</span></span><br><span class="line">        <span class="keyword">while</span> ((len=fileInputStream.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;len; i++) &#123;</span><br><span class="line">                b[i]= (<span class="type">byte</span>) (b[i]^myb);<span class="comment">//将每个字节异或操作后，在存到字节数组中（加密）</span></span><br><span class="line">            &#125;</span><br><span class="line">            fileOutputStream.write(b,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、文件排序"><a href="#三、文件排序" class="headerlink" title="三、文件排序"></a>三、文件排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">     <span class="comment">/*   *</span></span><br><span class="line"><span class="comment">      * 文本文件中有以下的数据：</span></span><br><span class="line"><span class="comment">      * 2-1-9-4-7-8</span></span><br><span class="line"><span class="comment">      * 将文件中的数据进行排序，变成以下的数据：</span></span><br><span class="line"><span class="comment">      * 1-2-4-7-8-9</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">     <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;javabasis\\aaa\\num.txt&quot;</span>);</span><br><span class="line">     <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);<span class="comment">//字符输入流</span></span><br><span class="line">     <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;javabasis\\aaa\\numSort.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">     ArrayList&lt;String&gt; str = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="type">char</span>[] ch = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">     <span class="type">int</span> len;</span><br><span class="line">     <span class="keyword">while</span> ((len = fr.read(ch)) != -<span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(ch[i]);</span><br><span class="line">             <span class="keyword">if</span> (!<span class="string">&quot;-&quot;</span>.equals(s)) &#123;</span><br><span class="line">                 str.add(s);</span><br><span class="line">                 <span class="comment">//不是&quot;-&quot;横线</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     Collections.sort(str);<span class="comment">//从小到大排序</span></span><br><span class="line">     <span class="type">StringJoiner</span> <span class="variable">stringJoiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span> (String s : str) &#123;</span><br><span class="line">         stringJoiner.add(s);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     fw.write(stringJoiner.toString());</span><br><span class="line"></span><br><span class="line">     fw.close();</span><br><span class="line">     fr.close();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082250732.png" alt="image-20240708225004524"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082250650.png" alt="image-20240708224703567"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407082248942.png" alt="image-20240708224820724"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;IO（字节流&amp;字符流）&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、什么是IO流？&quot;&gt;&lt;a href=&quot;#一、什么是IO流？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是IO流？&quot;&gt;&lt;/a&gt;一、什么是IO流？&lt;/h2&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>49.File类</title>
    <link href="https://protonlml.github.io/2019/09/26/49.File/"/>
    <id>https://protonlml.github.io/2019/09/26/49.File/</id>
    <published>2019-09-26T00:31:00.000Z</published>
    <updated>2024-07-03T09:07:14.962Z</updated>
    
    <content type="html"><![CDATA[<h1><center>File类</center></h1><h2 id="一、File"><a href="#一、File" class="headerlink" title="一、File"></a>一、File</h2><ul><li><h3 id="对File的理解"><a href="#对File的理解" class="headerlink" title="对File的理解"></a>对File的理解</h3></li><li><h4 id="File-出现，new出来肯定是带（绝对路径的，已经存在的）"><a href="#File-出现，new出来肯定是带（绝对路径的，已经存在的）" class="headerlink" title="File 出现，new出来肯定是带（绝对路径的，已经存在的）"></a>File 出现，new出来肯定是带（绝对路径的，已经存在的）</h4><ul><li><h4 id="1-形参中是文件的绝对路径（此时就表示一个文件）"><a href="#1-形参中是文件的绝对路径（此时就表示一个文件）" class="headerlink" title="1.形参中是文件的绝对路径（此时就表示一个文件）"></a>1.形参中是文件的绝对路径（此时就表示一个文件）</h4></li><li><h4 id="2-形参中是文件夹的绝对路径（此时就表示一个文件夹）"><a href="#2-形参中是文件夹的绝对路径（此时就表示一个文件夹）" class="headerlink" title="2.形参中是文件夹的绝对路径（此时就表示一个文件夹）"></a>2.形参中是文件夹的绝对路径（此时就表示一个文件夹）</h4></li></ul></li></ul><hr><ul><li><h4 id="new-File-形参-是-不存在的路径，就表示一个路径而已，使用File中的方法来创建实际文件或者文件夹。"><a href="#new-File-形参-是-不存在的路径，就表示一个路径而已，使用File中的方法来创建实际文件或者文件夹。" class="headerlink" title="new File(形参) 是 不存在的路径，就表示一个路径而已，使用File中的方法来创建实际文件或者文件夹。"></a>new File(形参) 是 不存在的路径，就表示一个路径而已，使用File中的方法来创建实际文件或者文件夹。</h4></li></ul><hr><ul><li><h4 id="为什么要用File类，就是为了表述系统中的文件，使用File类中的方法，对当前File进行操作。"><a href="#为什么要用File类，就是为了表述系统中的文件，使用File类中的方法，对当前File进行操作。" class="headerlink" title="为什么要用File类，就是为了表述系统中的文件，使用File类中的方法，对当前File进行操作。"></a>为什么要用File类，就是为了表述系统中的文件，使用File类中的方法，对当前File进行操作。</h4></li></ul><hr><hr><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021751478.png" alt="image-20240702175109110"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021751937.png" alt="image-20240702175127948"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021814490.png" alt="image-20240702181421477"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021811150.png" alt="image-20240702181153076"></p><h2 id="二、File-的方法"><a href="#二、File-的方法" class="headerlink" title="二、File 的方法"></a>二、File 的方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021815581.png" alt="image-20240702181526494"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407022152070.png" alt="image-20240702215257042"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021815145.png" alt="image-20240702181546913"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407022155698.png" alt="image-20240702215518579"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021819918.png" alt="image-20240702181630094"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407022202896.png" alt="image-20240702220240753"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h3 id="1-file获取文件名f-getName-带后缀名"><a href="#1-file获取文件名f-getName-带后缀名" class="headerlink" title="1.file获取文件名f.getName()带后缀名"></a>1.file获取文件名f.getName()带后缀名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个方法找某一个文件夹中，是否有以 avi 结尾的电影。</span></span><br><span class="line"><span class="comment"> * （暂时不需要考虑子文件夹）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\lml\\Downloads\\aaa&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> existAvi(file);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">existAvi</span><span class="params">(File file)</span>&#123;</span><br><span class="line">        <span class="comment">// C:\Users\lml\Downloads\aaa 文件夹</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">// 遍历aaa文件夹下的 文件夹以及文件的路径</span></span><br><span class="line">            <span class="keyword">if</span>(f.isFile()&amp;&amp;f.getName().endsWith(<span class="string">&quot;.avi&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-涉及到多级文件夹，需要递归"><a href="#2-涉及到多级文件夹，需要递归" class="headerlink" title="2.涉及到多级文件夹，需要递归"></a>2.涉及到多级文件夹，需要递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.file_demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到电脑中所有以avi结尾的电影。</span></span><br><span class="line"><span class="comment"> * (需要考虑子文件夹）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  思想：把大问题拆分，拆到某一个文件夹中不包含其他文件夹为止</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        递归思想，就是将大的问题，拆成小的问题去解决</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        凡事要考虑文件夹里面的内容了，就使用下面的套路</span></span><br><span class="line"><span class="comment"> *        写递归方法的套路</span></span><br><span class="line"><span class="comment"> *        套路：</span></span><br><span class="line"><span class="comment"> *          1.进入文件夹</span></span><br><span class="line"><span class="comment"> *          2.遍历数组</span></span><br><span class="line"><span class="comment"> *              2.1.遍历内部：判断，如果是文件  就执行题目的业务逻辑</span></span><br><span class="line"><span class="comment"> *              2.2.遍历内部：判断，如果不是文件，他就是文件夹，继续调用当前方法，递归</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">/* File file = new File(&quot;C:\\&quot;); //C盘</span></span><br><span class="line"><span class="comment">        findAVI(file);*/</span></span><br><span class="line">        findAVI();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询电脑上 所有盘符 中 avi文件的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findAVI</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        File[] files = File.listRoots(); <span class="comment">//获取系统中所有的盘符</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            findAVI(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归方法</span></span><br><span class="line"><span class="comment">     * 递归查询 指定文件夹 中的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findAVI</span><span class="params">(File file)</span>&#123;</span><br><span class="line">        <span class="comment">//1.进入文件夹,找到当前文件夹下面 所有的路径</span></span><br><span class="line">        <span class="comment">// 包含当前文件夹下的 所有文件夹，文件</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意细节：file可能为null 因为盘符有权限可能进不去</span></span><br><span class="line">        <span class="keyword">if</span>(files!=<span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.遍历数组</span></span><br><span class="line">            <span class="keyword">for</span> (File src : files) &#123;</span><br><span class="line">                <span class="comment">//3.判断，如果是文件就执行题目的业务逻辑</span></span><br><span class="line">                <span class="keyword">if</span>(src.isFile())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(src.getName().endsWith(<span class="string">&quot;.avi&quot;</span>))&#123;</span><br><span class="line">                        System.out.println(src);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//4.判断，如果不是文件，他就是文件夹，继续调用当前方法，递归</span></span><br><span class="line">                    <span class="comment">// 注意 src 一定是 file 的下级目录</span></span><br><span class="line">                    findAVI(src);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-删除多级文件夹"><a href="#3-删除多级文件夹" class="headerlink" title="3.删除多级文件夹"></a>3.删除多级文件夹</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除多级文件夹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 先思考删除一个文件夹内的内容怎么删</span></span><br><span class="line"><span class="comment">         * 如果 当前文件夹下面 还有文件夹 再调用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\lml\\Downloads\\aaa\\eee&quot;</span>);</span><br><span class="line">        deleteMultilevelDirectory(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src 文件夹地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除成功与否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteMultilevelDirectory</span><span class="params">(File src)</span> &#123;</span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span>(file.isFile())&#123; <span class="comment">//是文件直接删除</span></span><br><span class="line">                    file.delete();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123; <span class="comment">//是文件夹，且文件夹不是空的 递归</span></span><br><span class="line">                    deleteMultilevelDirectory(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自己也删</span></span><br><span class="line">        src.delete();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-递归多级目录，递归方法中的局部变量怎么统计"><a href="#4-递归多级目录，递归方法中的局部变量怎么统计" class="headerlink" title="4.递归多级目录，递归方法中的局部变量怎么统计"></a>4.递归多级目录，递归方法中的局部变量怎么统计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：统计一个文件夹中每种文件的个数并打印。（考虑子文件夹）</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * ① 打印格式如下：</span></span><br><span class="line"><span class="comment"> * ②    txt：3个</span></span><br><span class="line"><span class="comment"> * ③    doc：4个</span></span><br><span class="line"><span class="comment"> * ④     jpg：6个</span></span><br><span class="line"><span class="comment"> * 。。。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\lml\\Downloads\\aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; count = getCount(file);</span><br><span class="line">        System.out.println(count); <span class="comment">//&#123;jpg=9, txt=4, xlsx=1, avi=1, doc=4&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计文件夹下面的 各种文件格式 个数</span></span><br><span class="line"><span class="comment">     * 并打印</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  使用了 map 的统计思想</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *        因为是递归方法，</span></span><br><span class="line"><span class="comment">     *        所以其中的 局部变量怎么能产生关系?</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *        就是在调用递归之后，回到当前方法，把递归的值，返回给当前</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title function_">getCount</span><span class="params">(File src)</span> &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                    <span class="comment">//如果当前是文件，判断文件的 格式 并记录</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br><span class="line">                    <span class="comment">//注意这里的截取 点 要加 双反斜线</span></span><br><span class="line">                    String[] split = name.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (split.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="comment">//这里是有后缀名的文件才进行统计</span></span><br><span class="line">                        <span class="comment">//a.txt 统计 //a.a.b,txt 统计</span></span><br><span class="line">                        <span class="comment">// aaa无后缀名 不统计</span></span><br><span class="line">                        <span class="comment">//利用Map 进行统计</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> split[split.length - <span class="number">1</span>]; <span class="comment">//后缀</span></span><br><span class="line">                        <span class="keyword">if</span> (hm.containsKey(suffix)) &#123;</span><br><span class="line">                            <span class="comment">//map中已经存在这个 格式 如：txt</span></span><br><span class="line">                            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> hm.get(suffix);</span><br><span class="line">                            count++;</span><br><span class="line">                            hm.put(suffix, count);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//第一次添加</span></span><br><span class="line">                            hm.put(suffix, <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//不是文件，是文件夹（递归）结果是子文件夹的统计</span></span><br><span class="line">                    <span class="comment">// hm &#123;txt=3,doc=4,jpg=1 &#125;</span></span><br><span class="line">                    <span class="comment">// map&#123;txt=1,doc=1,jpg=1,xlsx=1&#125;</span></span><br><span class="line">                    Map&lt;String, Integer&gt; map = getCount(file); <span class="comment">//走到这一步，下面就先不看，再旁边想象新的方法，结果放在这里</span></span><br><span class="line">                    <span class="comment">//遍历map</span></span><br><span class="line">                    map.forEach((k, v) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (hm.containsKey(k)) &#123;</span><br><span class="line">                            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> hm.get(k);</span><br><span class="line">                            <span class="comment">// 说明已经有 这个后缀</span></span><br><span class="line">                            hm.put(k, v + count);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//这里表示hm中不存在的 key格式值</span></span><br><span class="line">                            hm.put(k, v);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-递归方法中的局部变量怎么处理"><a href="#5-递归方法中的局部变量怎么处理" class="headerlink" title="5.递归方法中的局部变量怎么处理"></a>5.递归方法中的局部变量怎么处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计一个文件夹内所有文件的总大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo8</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1.先路径定义到 这个文件夹</span></span><br><span class="line"><span class="comment">         * 2. 将文件夹展开</span></span><br><span class="line"><span class="comment">         *     如果是文件直接统计大小</span></span><br><span class="line"><span class="comment">         *     如果是文件夹，继续递归第2步</span></span><br><span class="line"><span class="comment">         *     最终将所有的文件大小加在一起</span></span><br><span class="line"><span class="comment">         *  3.返回统计值</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//这里统计 aaa文件夹总大小</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\lml\\Downloads\\aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> countTotalSize(file);</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Long <span class="title function_">countTotalSize</span><span class="params">(File src)</span> &#123;</span><br><span class="line">        <span class="comment">//注意这个length是局部变量，第二次递归的时候，这个值就又变成了0</span></span><br><span class="line">        <span class="comment">// 怎么解决？把递归的结果加在第一次执行时length上面。</span></span><br><span class="line">        <span class="comment">// 执行到递归时，就想旁边有一个一模一样的方法，它的计算和 当前方法执行 没有关系</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                    <span class="comment">//如果是文件，直接算出大小</span></span><br><span class="line">                    length = length + file.length();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    length = length + countTotalSize(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;File类&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、File&quot;&gt;&lt;a href=&quot;#一、File&quot; class=&quot;headerlink&quot; title=&quot;一、File&quot;&gt;&lt;/a&gt;一、File&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;对File的理</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>47.方法引用</title>
    <link href="https://protonlml.github.io/2019/09/26/47.%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
    <id>https://protonlml.github.io/2019/09/26/47.%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</id>
    <published>2019-09-26T00:30:00.000Z</published>
    <updated>2024-07-02T07:48:13.556Z</updated>
    
    <content type="html"><![CDATA[<h1><center>方法引用</center></h1><h2 id="一、方法引用"><a href="#一、方法引用" class="headerlink" title="一、方法引用"></a>一、方法引用</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021240777.png" alt="image-20240702124045853"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021245617.png" alt="image-20240702124552617"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021246558.png" alt="image-20240702124614489"></p><hr><hr><h2 id="二、方法引用的分类"><a href="#二、方法引用的分类" class="headerlink" title="二、方法引用的分类"></a>二、方法引用的分类</h2><ul><li><h3 id="1-引用静态方法"><a href="#1-引用静态方法" class="headerlink" title="1.引用静态方法"></a>1.引用静态方法</h3><ul><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021419699.png" alt="image-20240702141907998"></p></li><li><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：<img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021431396.png" alt="image-20240702143137496"></h4></li></ul></li><li><h3 id="2-引用成员方法"><a href="#2-引用成员方法" class="headerlink" title="2.引用成员方法"></a>2.引用成员方法</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021432123.png" alt="image-20240702143232058"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021435931.png" alt="image-20240702143539302"></li></ul></li><li><h3 id="3-引用构造方法"><a href="#3-引用构造方法" class="headerlink" title="3.引用构造方法"></a>3.引用构造方法</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021437786.png" alt="image-20240702143748751"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021445431.png" alt="image-20240702144527089"></li></ul></li></ul><h2 id="三、方法引用的理解"><a href="#三、方法引用的理解" class="headerlink" title="三、方法引用的理解"></a>三、方法引用的理解</h2><ul><li><h4 id="（大小写转换）"><a href="#（大小写转换）" class="headerlink" title="（大小写转换）"></a>（大小写转换）</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021454045.png" alt="image-20240702145425612"></p><h2 id="四、数组构造器引用"><a href="#四、数组构造器引用" class="headerlink" title="四、数组构造器引用"></a>四、数组构造器引用</h2><ul><li><h4 id="以后stream流收集为Array数组的时候，就可以使用”数组的构造器引用”"><a href="#以后stream流收集为Array数组的时候，就可以使用”数组的构造器引用”" class="headerlink" title="以后stream流收集为Array数组的时候，就可以使用”数组的构造器引用”"></a>以后stream流收集为Array数组的时候，就可以使用”数组的构造器引用”</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021509490.png" alt="image-202407021508003"></p></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021512049.png" alt="image-20240702151246628"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="创建一个student类"><a href="#创建一个student类" class="headerlink" title="创建一个student类"></a>创建一个student类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.stream_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = str.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.age = Integer.parseInt(str.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接数据</span></span><br><span class="line"><span class="comment">     * 把姓名和年龄拼接成：张三-23的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">splicing</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student.getName()+<span class="string">&quot;-&quot;</span>+student.getAge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用Student构造器方法引用"><a href="#使用Student构造器方法引用" class="headerlink" title="使用Student构造器方法引用"></a>使用Student构造器方法引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 集合中存储一些字符串的数据，比如：张三，23。</span></span><br><span class="line"><span class="comment">        * 收集到Student：类型的数组当中（使用方法引用完成）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       </span><br><span class="line">       ArrayList&lt;String&gt; manName = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       Collections.addAll(manName, <span class="string">&quot;蔡徐坤,23&quot;</span>, <span class="string">&quot;吴京,29&quot;</span>, <span class="string">&quot;林根锡,15&quot;</span>, <span class="string">&quot;顾佳,66&quot;</span>, <span class="string">&quot;叶问,54&quot;</span>, <span class="string">&quot;洪金宝,32&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Student[] students = manName.stream()</span><br><span class="line">               <span class="comment">// 下面这句话怎么理解， 就是stream上的 每个元素，都调用了，new Student() 方法，并且又将结果返回给 stream流上。</span></span><br><span class="line">               <span class="comment">// map处理过后，stream流上面全是student对象</span></span><br><span class="line">               .map(Student::<span class="keyword">new</span>) <span class="comment">//使用 student的构造器方法 引用</span></span><br><span class="line"></span><br><span class="line">               .toArray(Student[]::<span class="keyword">new</span>);<span class="comment">// 使用student 数组构造引用</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">           System.out.println(student);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用Student中成员方法引用"><a href="#使用Student中成员方法引用" class="headerlink" title="使用Student中成员方法引用"></a>使用Student中成员方法引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 创建集合添加学生对象，学生对象属性：name,age</span></span><br><span class="line"><span class="comment">        * 只获取姓名并放到数组当中（使用方法引用完成）</span></span><br><span class="line"><span class="comment">        * &quot;蔡徐坤,23&quot;, &quot;吴京,29&quot;, &quot;林根锡,15&quot;, &quot;顾佳,66&quot;, &quot;叶问,54&quot;, &quot;洪金宝,32&quot;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       ArrayList&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;蔡徐坤&quot;</span>,<span class="number">23</span>));</span><br><span class="line">       students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;吴京&quot;</span>,<span class="number">29</span>));</span><br><span class="line">       students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林根锡&quot;</span>,<span class="number">15</span>));</span><br><span class="line">       students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;顾佳&quot;</span>,<span class="number">66</span>));</span><br><span class="line">       students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;叶问&quot;</span>,<span class="number">54</span>));</span><br><span class="line"></span><br><span class="line">       String[] names = students.stream()</span><br><span class="line">               .map(Student::getName)</span><br><span class="line">               .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">      Arrays.stream(names).forEach(n-&gt; System.out.println(n));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="使用Student中静态方法引用"><a href="#使用Student中静态方法引用" class="headerlink" title="使用Student中静态方法引用"></a>使用Student中静态方法引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *创建集合添加学生对象，学生对象属性：name,age</span></span><br><span class="line"><span class="comment">         * 把姓名和年龄拼接成：张三-23的字符串，并放到数组当中（使用方法引用完成）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;蔡徐坤&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;吴京&quot;</span>,<span class="number">29</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林根锡&quot;</span>,<span class="number">15</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;顾佳&quot;</span>,<span class="number">66</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;叶问&quot;</span>,<span class="number">54</span>));</span><br><span class="line"></span><br><span class="line">        String[] students1 = students.stream()</span><br><span class="line">                .map(Student::splicing)</span><br><span class="line">                .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Arrays.toString(students1);</span><br><span class="line">        System.out.println(s);<span class="comment">//[蔡徐坤-23, 吴京-29, 林根锡-15, 顾佳-66, 叶问-54]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;方法引用&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、方法引用&quot;&gt;&lt;a href=&quot;#一、方法引用&quot; class=&quot;headerlink&quot; title=&quot;一、方法引用&quot;&gt;&lt;/a&gt;一、方法引用&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>48.异常体系</title>
    <link href="https://protonlml.github.io/2019/09/26/48.%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/"/>
    <id>https://protonlml.github.io/2019/09/26/48.%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</id>
    <published>2019-09-26T00:30:00.000Z</published>
    <updated>2024-07-02T09:48:48.069Z</updated>
    
    <content type="html"><![CDATA[<h1><center>异常体系</center></h1><h2 id="一、异常体系"><a href="#一、异常体系" class="headerlink" title="一、异常体系"></a>一、异常体系</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021553622.png" alt="image-20240702155320190"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021554823.png" alt="image-20240702155408624"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021556964.png" alt="image-20240702155633774"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021557462.png" alt="image-20240702155721568"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021559675.png" alt="image-20240702155936907"></p><hr><hr><h2 id="二、捕获异常"><a href="#二、捕获异常" class="headerlink" title="二、捕获异常"></a>二、捕获异常</h2><ul><li><h4 id="在代码中将可能存在异常的部分，使用-try-catch包裹住，在catch中捕获异常，并进行处理（可以记录到日志）"><a href="#在代码中将可能存在异常的部分，使用-try-catch包裹住，在catch中捕获异常，并进行处理（可以记录到日志）" class="headerlink" title="在代码中将可能存在异常的部分，使用 try-catch包裹住，在catch中捕获异常，并进行处理（可以记录到日志）"></a>在代码中将可能存在异常的部分，使用 try-catch包裹住，在catch中捕获异常，并进行处理（可以记录到日志）</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021606419.png" alt="image-20240702160658424"></p></li><li><h3 id="目的：当代码出现异常时，可以让程序继续往下执行，而不是交给虚拟机默认处理，给系统停止了"><a href="#目的：当代码出现异常时，可以让程序继续往下执行，而不是交给虚拟机默认处理，给系统停止了" class="headerlink" title="目的：当代码出现异常时，可以让程序继续往下执行，而不是交给虚拟机默认处理，给系统停止了"></a>目的：当代码出现异常时，可以让程序继续往下执行，而不是交给虚拟机默认处理，给系统停止了</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021608571.png" alt="image-20240702160840893"></p></li></ul><p> <img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021609203.png" alt="image-20240702160947706"></p><h2 id="三、异常类中的常见方法"><a href="#三、异常类中的常见方法" class="headerlink" title="三、异常类中的常见方法"></a>三、异常类中的常见方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021610134.png" alt="image-20240702161022322"></p><h2 id="四、异常的抛出处理"><a href="#四、异常的抛出处理" class="headerlink" title="四、异常的抛出处理"></a>四、异常的抛出处理</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021611197.png" alt="image-20240702161144548"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021612771.png" alt="image-20240702161250842"></p><h3 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h3><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021613102.png" alt="image-20240702161349512"></p><hr><hr><h2 id="五、自定义异常类（类名要见名知意）"><a href="#五、自定义异常类（类名要见名知意）" class="headerlink" title="五、自定义异常类（类名要见名知意）"></a>五、自定义异常类（类名要见名知意）</h2><ul><li><h2 id="意义：就是为了让控制台的报错信息更加见名知意"><a href="#意义：就是为了让控制台的报错信息更加见名知意" class="headerlink" title="意义：就是为了让控制台的报错信息更加见名知意"></a>意义：就是为了让控制台的报错信息更加见名知意</h2><ul><li><h3 id="目的是：在Java中，没有一个异常能够完美-表示-当前出现的问题"><a href="#目的是：在Java中，没有一个异常能够完美-表示-当前出现的问题" class="headerlink" title="目的是：在Java中，没有一个异常能够完美 表示 当前出现的问题"></a>目的是：在Java中，没有一个异常能够完美 表示 当前出现的问题</h3></li><li><h3 id="自定义一个异常类，表示当前出现问题的异常类"><a href="#自定义一个异常类，表示当前出现问题的异常类" class="headerlink" title="自定义一个异常类，表示当前出现问题的异常类"></a>自定义一个异常类，表示当前出现问题的异常类</h3></li></ul></li><li><p><img src="/48.%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.assets/image-20240702174743886.png" alt="image-20240702174743886"></p></li><li></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021632052.png" alt="image-20240702163258096"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;异常体系&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、异常体系&quot;&gt;&lt;a href=&quot;#一、异常体系&quot; class=&quot;headerlink&quot; title=&quot;一、异常体系&quot;&gt;&lt;/a&gt;一、异常体系&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>46.stream流</title>
    <link href="https://protonlml.github.io/2019/09/26/46.stream%E6%B5%81/"/>
    <id>https://protonlml.github.io/2019/09/26/46.stream%E6%B5%81/</id>
    <published>2019-09-26T00:22:00.000Z</published>
    <updated>2024-07-02T08:28:17.181Z</updated>
    
    <content type="html"><![CDATA[<h1><center>stream流</center></h1><h2 id="一、流的思想"><a href="#一、流的思想" class="headerlink" title="一、流的思想"></a>一、流的思想</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012216079.png" alt="image-20240701221652019"></p><h2 id="二、为什么要用stream流"><a href="#二、为什么要用stream流" class="headerlink" title="二、为什么要用stream流"></a>二、为什么要用stream流</h2><ul><li><h3 id="目的是为了，简化-集合、数组的操作（配合Lambda表达式使用）"><a href="#目的是为了，简化-集合、数组的操作（配合Lambda表达式使用）" class="headerlink" title="目的是为了，简化 集合、数组的操作（配合Lambda表达式使用）"></a>目的是为了，简化 集合、数组的操作（配合Lambda表达式使用）</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012221449.png" alt="image-20240701222112324"></p></li></ul><h2 id="三、获取Stream流"><a href="#三、获取Stream流" class="headerlink" title="三、获取Stream流"></a>三、获取Stream流</h2><ul><li><h4 id="这个stream流，一般就是用来简化集合的操作的，所以它和集合是分不开的，使用集合可以直接调用stream方法，来上流"><a href="#这个stream流，一般就是用来简化集合的操作的，所以它和集合是分不开的，使用集合可以直接调用stream方法，来上流" class="headerlink" title="这个stream流，一般就是用来简化集合的操作的，所以它和集合是分不开的，使用集合可以直接调用stream方法，来上流"></a>这个stream流，一般就是用来简化集合的操作的，所以它和集合是分不开的，使用集合可以直接调用stream方法，来上流</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012225826.png" alt="image-20240701222543063"></p></li><li><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012229694.png" alt="image-20240701222910161"></p></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012230358.png" alt="image-20240701223019895"></p><h2 id="四、Stream流的中间方法"><a href="#四、Stream流的中间方法" class="headerlink" title="四、Stream流的中间方法"></a>四、Stream流的中间方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012231373.png" alt="image-20240701223156962"></p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012336458.png" alt="image-20240701233628414"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012337342.png" alt="image-20240701233739091"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012338285.png" alt="image-20240701233828377"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012339770.png" alt="image-20240701233942691"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012340536.png" alt="image-20240701233959589"></p><hr><hr><h2 id="五、Stream流中的终结方法"><a href="#五、Stream流中的终结方法" class="headerlink" title="五、Stream流中的终结方法"></a>五、Stream流中的终结方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012340750.png" alt="image-20240701234038096"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012350467.png" alt="image-20240701235035635"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407021508003.png" alt="image-20240702150852771"></p><h2 id="收集到集合当中（List集合，以及Map集合）"><a href="#收集到集合当中（List集合，以及Map集合）" class="headerlink" title="收集到集合当中（List集合，以及Map集合）"></a>收集到集合当中（List集合，以及Map集合）</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012357987.png" alt="image-20240701235747816"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407012358504.png" alt="image-20240701235858457"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.stream_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 现在有两个ArrayList集合，</span></span><br><span class="line"><span class="comment">         * 第一个集合中：存储6名男演员的名字和年龄。</span></span><br><span class="line"><span class="comment">         * 第二个集合中：存储6名女演员的名字和年龄。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 姓名和年龄中间用逗号隔开。比如：张三,23</span></span><br><span class="line"><span class="comment">         * 要求完成如下的操作：</span></span><br><span class="line"><span class="comment">         * 1，男演员只要名字为 3个字的 前两人</span></span><br><span class="line"><span class="comment">         * 2，女演员只要姓杨的，并且不要第一个</span></span><br><span class="line"><span class="comment">         * 3，把过滤后的男演员姓名和女演员姓名合并到一起</span></span><br><span class="line"><span class="comment">         * 4，将上一步的演员信息封装成Actor对象。</span></span><br><span class="line"><span class="comment">         * 5，将所有的演员对象都保存到List集合中。</span></span><br><span class="line"><span class="comment">         * 备注：演员类Actor，属性有：name,age</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; manName = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(manName, <span class="string">&quot;蔡徐坤,23&quot;</span>, <span class="string">&quot;吴京,29&quot;</span>, <span class="string">&quot;林根锡,15&quot;</span>, <span class="string">&quot;顾佳,66&quot;</span>, <span class="string">&quot;叶问,54&quot;</span>, <span class="string">&quot;洪金宝,32&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; girlName = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(girlName, <span class="string">&quot;杨幂,20&quot;</span>, <span class="string">&quot;刘诗诗,28&quot;</span>, <span class="string">&quot;赵丽颖,22&quot;</span>, <span class="string">&quot;高圆圆,29&quot;</span>, <span class="string">&quot;张甜甜,33&quot;</span>, <span class="string">&quot;杨政馨,46&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list1 = manName.stream()</span><br><span class="line">                .filter(s -&gt; (s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]).length() == <span class="number">3</span>)</span><br><span class="line">                .limit(<span class="number">2</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list2 = girlName.stream()</span><br><span class="line">                .filter(s -&gt; s.startsWith(<span class="string">&quot;杨&quot;</span>))</span><br><span class="line">                .skip(<span class="number">1</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* ArrayList&lt;Actor&gt; actors = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Stream.concat(list1.stream(), list2.stream())</span></span><br><span class="line"><span class="comment">                .forEach(l -&gt; &#123;</span></span><br><span class="line"><span class="comment">            String[] split = l.split(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">            String name = split[0];</span></span><br><span class="line"><span class="comment">            int age = Integer.parseInt(split[1]);</span></span><br><span class="line"><span class="comment">            actors.add(new Actor(name, age));</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Actor&gt; actors = Stream.concat(list1.stream(), list2.stream())</span><br><span class="line">                .map(s -&gt; <span class="keyword">new</span> <span class="title class_">Actor</span>(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>], Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>])))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        System.out.println(actors);<span class="comment">//[Actor&#123;name=&#x27;蔡徐坤&#x27;, age=23&#125;, Actor&#123;name=&#x27;林根锡&#x27;, age=15&#125;, Actor&#123;name=&#x27;杨政馨&#x27;, age=46&#125;]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;stream流&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、流的思想&quot;&gt;&lt;a href=&quot;#一、流的思想&quot; class=&quot;headerlink&quot; title=&quot;一、流的思想&quot;&gt;&lt;/a&gt;一、流的思想&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://r</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>50.字符集详解</title>
    <link href="https://protonlml.github.io/2019/09/26/50.%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://protonlml.github.io/2019/09/26/50.%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-09-25T19:00:00.000Z</published>
    <updated>2024-07-05T17:28:06.085Z</updated>
    
    <content type="html"><![CDATA[<h1><center>字符集详解</center></h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060036799.png" alt="image-20240706003628984"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060037525.png" alt="image-20240706003752476"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060039317.png" alt="image-20240706003818074"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060043620.png" alt="image-20240706003945959"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060042255.png" alt="image-20240706004230552"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060047076.png" alt="image-20240706004248656"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060046113.png" alt="image-20240706004314889"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060048231.png" alt="image-20240706004809535"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060123519.png" alt="image-20240706010905816"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060123540.png" alt="image-20240706012321939"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060124690.png" alt="image-20240706012413355"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060126369.png" alt="image-20240706012624902"></p><h3 id="java中的编解码"><a href="#java中的编解码" class="headerlink" title="java中的编解码"></a>java中的编解码</h3><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060127752.png" alt="image-20240706012740081"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;字符集详解&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407060036799.png&quot; alt=&quot;i</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>45.集合进阶-12-TreeMap</title>
    <link href="https://protonlml.github.io/2019/09/25/45.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-12-TreeMap/"/>
    <id>https://protonlml.github.io/2019/09/25/45.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-12-TreeMap/</id>
    <published>2019-09-25T00:22:00.000Z</published>
    <updated>2024-06-28T09:05:07.988Z</updated>
    
    <content type="html"><![CDATA[<h1><center>TreeMap</center></h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281637731.png" alt="image-20240628163714743"></p><ul><li><h3 id="1-第一种排序规则"><a href="#1-第一种排序规则" class="headerlink" title="1.第一种排序规则"></a>1.第一种排序规则</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281659906.png" alt="image-20240628165916283"></p><ul><li><h3 id="2-第二种排序规则"><a href="#2-第二种排序规则" class="headerlink" title="2.第二种排序规则"></a>2.第二种排序规则</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281704454.png" alt="image-20240628165655914"></p><hr><hr><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h4 id="使用Map-来进行统计"><a href="#使用Map-来进行统计" class="headerlink" title="使用Map 来进行统计"></a>使用Map 来进行统计</h4><ul><li><h4 id="这里使用TreeMap因为结果有-字母升序排列"><a href="#这里使用TreeMap因为结果有-字母升序排列" class="headerlink" title="这里使用TreeMap因为结果有 字母升序排列"></a>这里使用TreeMap因为结果有 字母升序排列</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281703525.png" alt="image-20240628170322006"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;TreeMap&lt;/center&gt;&lt;/h1&gt;



&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281637731.png&quot; al</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>44.集合进阶-11-LinkedHashMap</title>
    <link href="https://protonlml.github.io/2019/09/25/44.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-11-LinkedHashMap/"/>
    <id>https://protonlml.github.io/2019/09/25/44.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-11-LinkedHashMap/</id>
    <published>2019-09-25T00:20:00.000Z</published>
    <updated>2024-06-28T08:35:55.935Z</updated>
    
    <content type="html"><![CDATA[<h1><center>LinkedHashMap</center></h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281633904.png" alt="image-20240628163318996"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281634049.png" alt="image-20240628163442102"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;LinkedHashMap&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281633904.png</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>43.集合进阶-10-HashMap</title>
    <link href="https://protonlml.github.io/2019/09/25/43.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-10-HashMap/"/>
    <id>https://protonlml.github.io/2019/09/25/43.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-10-HashMap/</id>
    <published>2019-09-25T00:18:00.000Z</published>
    <updated>2024-06-28T08:31:56.325Z</updated>
    
    <content type="html"><![CDATA[<h1><center>HashMap</center></h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281625712.png" alt="image-20240628162507511"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281629568.png" alt="image-20240628162926278"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281629398.png" alt="image-20240628162943964"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281630003.png" alt="image-20240628163033088"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;HashMap&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281625712.png&quot; alt=</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>42.集合进阶-09-双列集合Map、常用API、三种遍历方式</title>
    <link href="https://protonlml.github.io/2019/09/25/42.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-09-Map%E7%89%B9%E7%82%B9%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%81%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    <id>https://protonlml.github.io/2019/09/25/42.%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6-09-Map%E7%89%B9%E7%82%B9%E3%80%81%E5%B8%B8%E7%94%A8API%E3%80%81%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</id>
    <published>2019-09-25T00:10:00.000Z</published>
    <updated>2024-06-28T08:21:57.091Z</updated>
    
    <content type="html"><![CDATA[<h1><center>双列集合Map</center></h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281609438.png" alt="image-20240628160931984"></p><h2 id="一、双列集合的特点"><a href="#一、双列集合的特点" class="headerlink" title="一、双列集合的特点"></a>一、双列集合的特点</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281608400.png" alt="image-20240628160851236"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281608458.png" alt="image-20240628160827195"></p><hr><hr><h2 id="二、Map中常见的API"><a href="#二、Map中常见的API" class="headerlink" title="二、Map中常见的API"></a>二、Map中常见的API</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281610860.png" alt="image-20240628161030546"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281612320.png" alt="image-20240628161234185"></p><h2 id="三、Map的三种遍历方式"><a href="#三、Map的三种遍历方式" class="headerlink" title="三、Map的三种遍历方式"></a>三、Map的三种遍历方式</h2><ul><li><h3 id="1-键找值"><a href="#1-键找值" class="headerlink" title="1.键找值"></a>1.键找值</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281619632.png" alt="image-20240628161935255"></li></ul></li><li><h3 id="2-键值对Entry对象"><a href="#2-键值对Entry对象" class="headerlink" title="2.键值对Entry对象"></a>2.键值对Entry对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281617466.png" alt="image-20240628161742321"></li></ul></li><li><h3 id="3-Lambda表达式遍历"><a href="#3-Lambda表达式遍历" class="headerlink" title="3.Lambda表达式遍历"></a>3.Lambda表达式遍历</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281621501.png" alt="image-20240628162115427"></li></ul></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;双列集合Map&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406281609438.png&quot; alt=</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>34.Hutool工具包</title>
    <link href="https://protonlml.github.io/2019/09/25/34.Hutool%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    <id>https://protonlml.github.io/2019/09/25/34.Hutool%E5%B7%A5%E5%85%B7%E5%8C%85/</id>
    <published>2019-09-24T23:32:00.000Z</published>
    <updated>2024-07-09T18:35:33.839Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Hutool工具包</center></h1><h2 id="Hutool🍬官网"><a href="#Hutool🍬官网" class="headerlink" title="Hutool🍬官网"></a><a href="https://hutool.cn/">Hutool🍬官网</a></h2><h2 id="Hutool工具包操作文档"><a href="#Hutool工具包操作文档" class="headerlink" title="Hutool工具包操作文档"></a><a href="https://www.hutool.cn/docs/#/core/IO/%E6%A6%82%E8%BF%B0">Hutool工具包操作文档</a></h2><h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a><a href="https://apidoc.gitee.com/dromara/hutool/">API文档</a></h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407100215263.png" alt="image-20240710021543369"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Hutool工具包&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;Hutool🍬官网&quot;&gt;&lt;a href=&quot;#Hutool🍬官网&quot; class=&quot;headerlink&quot; title=&quot;Hutool🍬官网&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hu</summary>
      
    
    
    
    <category term="工具类" scheme="https://protonlml.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
    <category term="工具类" scheme="https://protonlml.github.io/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
</feed>
