<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://protonlml.github.io/atom.xml" rel="self"/>
  
  <link href="https://protonlml.github.io/"/>
  <updated>2024-06-15T06:14:53.260Z</updated>
  <id>https://protonlml.github.io/</id>
  
  <author>
    <name>𝚲𝚳𝚲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码</title>
    <link href="https://protonlml.github.io/2024/01/01/%E6%8C%82%E5%B9%B4%E5%85%BD/"/>
    <id>https://protonlml.github.io/2024/01/01/%E6%8C%82%E5%B9%B4%E5%85%BD/</id>
    <published>2024-01-01T03:00:00.000Z</published>
    <updated>2024-06-15T06:14:53.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码"><a href="#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码" class="headerlink" title="换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码"></a>换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码</h1><ul><li><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>这篇文章介绍了一个在博客网站右上角添加悬挂年兽的方法。通过在CSS代码中插入相应的素材链接，可以实现在网站右上角挂上一个龙的效果。对于自定义主题的网站，可以将相关的CSS和HTML代码添加到自定义头部中。对于全屏网站，建议在CSS代码的16行左右插入一行代码以实现相应效果。</li></ul></li></ul><h1 id="一、简介-教程"><a href="#一、简介-教程" class="headerlink" title="一、简介-教程"></a>一、简介-教程</h1><blockquote><p>换新颜新气象，给网站右上角挂一个龙，吸吸龙气</p><p>css第6行放入下面素材链接（本站开了防盗所以给你也无用就放下面了）</p><p>如果你的主题是自定义，那就是主题设置自定义里面</p><p>自定义css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">850px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.NewYear</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://img.ly522.com/LY/uploads/2023/12/longgyaj.gif</span>) no-repeat <span class="number">50%</span>/<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">85.8%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">50</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">animation</span>: new-year <span class="number">1.2s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@keyframes</span> new-year&#123;</span><br><span class="line">      <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="number">100%</span>&#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">10deg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="html放到你的自定义头部html即可！！"><a href="#html放到你的自定义头部html即可！！" class="headerlink" title="html放到你的自定义头部html即可！！"></a>html放到你的自定义头部html即可！！</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;NewYear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：如果你的是全屏网站建议在pointer-events: none;下面加一行。即css代码16行左右哪里加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;</span><br></pre></td></tr></table></figure><blockquote><h3 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h3></blockquote><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401180203516.png" alt="image-20240118020305488"></p><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div><p>​     </p></escape>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot;&gt;&lt;a href=&quot;#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot; class=&quot;headerlink&quot; title=&quot;换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码&quot;&gt;&lt;/a&gt;换新颜给博客网站</summary>
      
    
    
    
    <category term="新年快乐" scheme="https://protonlml.github.io/categories/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    
    
    <category term="春节挂件" scheme="https://protonlml.github.io/tags/%E6%98%A5%E8%8A%82%E6%8C%82%E4%BB%B6/"/>
    
    <category term="技巧优化" scheme="https://protonlml.github.io/tags/%E6%8A%80%E5%B7%A7%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>matery主题的使用</title>
    <link href="https://protonlml.github.io/2020/03/17/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://protonlml.github.io/2020/03/17/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-17T03:00:00.000Z</published>
    <updated>2024-06-15T06:14:53.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matery主题的使用"><a href="#matery主题的使用" class="headerlink" title="matery主题的使用"></a>matery主题的使用</h1><h1 id="一、下载matery主题"><a href="#一、下载matery主题" class="headerlink" title="一、下载matery主题"></a>一、下载matery主题</h1><ul><li><h3 id="1-GitHub源项目"><a href="#1-GitHub源项目" class="headerlink" title="1.GitHub源项目"></a>1.GitHub源项目</h3></li><li><p><a href="https://github.com/blinkfox/hexo-theme-matery">GitHub - blinkfox&#x2F;hexo-theme-matery: 一个基于材料设计和响应式设计而成的全面、美观的Hexo主题。</a></p></li><li><h3 id="2-在本地clone下来"><a href="#2-在本地clone下来" class="headerlink" title="2.在本地clone下来"></a>2.在本地clone下来</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/blinkfox/hexo-theme-matery.git</span></span><br></pre></td></tr></table></figure><h1 id="二、配置hexo根yml文件"><a href="#二、配置hexo根yml文件" class="headerlink" title="二、配置hexo根yml文件"></a>二、配置hexo根yml文件</h1><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401120050772.png" alt="image-20240112005024106"></li></ul><h1 id="三、自定义主题"><a href="#三、自定义主题" class="headerlink" title="三、自定义主题"></a>三、自定义主题</h1><ul><li><h3 id="1-修改导航名称和路径图标"><a href="#1-修改导航名称和路径图标" class="headerlink" title="1.修改导航名称和路径图标"></a>1.修改导航名称和路径图标</h3><ul><li><h5 id="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"><a href="#添加导航二级菜单的写法（如下是“关于”一级菜单修改）" class="headerlink" title="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"></a>添加导航二级菜单的写法（如下是“关于”一级菜单修改）</h5></li><li><p>注意：1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) </p></li><li><p>​             2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找  ,线上的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">About:</span><br><span class="line">   url: /about</span><br><span class="line">   # icon: fas fa-user-circle 注释掉原来的，加上下面这一段</span><br><span class="line">   icon: fas fa-list</span><br><span class="line">   children:</span><br><span class="line">     - name: 爱的颜色</span><br><span class="line">       url: /love</span><br><span class="line">       icon: fas fa-heart</span><br><span class="line">     - name: 生日快乐</span><br><span class="line">       url: /birthday</span><br><span class="line">       icon: fas fa-cake</span><br></pre></td></tr></table></figure></li><li><h3 id="2-手机二级菜单配置"><a href="#2-手机二级菜单配置" class="headerlink" title="2.手机二级菜单配置"></a>2.手机二级菜单配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navMenu:</span></span><br><span class="line">  <span class="attr">mleft:</span> <span class="literal">true</span>    <span class="comment">#  二级侧栏子菜单是否对齐左边</span></span><br><span class="line">  <span class="attr">bgColor:</span> <span class="string">&quot; &quot;</span>   <span class="comment">#  二级侧栏子菜单背景颜色,留空即为全局背景色</span></span><br></pre></td></tr></table></figure></li><li><h3 id="3-首页中间右侧-banner"><a href="#3-首页中间右侧-banner" class="headerlink" title="3.首页中间右侧 banner"></a>3.首页中间右侧 banner</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubLink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                   <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/sitoi/sitoi.github.io</span>  <span class="comment"># GitHub 仓库地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Fork</span> <span class="string">Me</span>                                 <span class="comment"># 显示文字</span></span><br></pre></td></tr></table></figure></li><li><h3 id="4-首页轮播图相关配置"><a href="#4-首页轮播图相关配置" class="headerlink" title="4.首页轮播图相关配置"></a>4.首页轮播图相关配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">showPrevNext:</span> <span class="literal">false</span>     <span class="comment"># 是否显示左右切换按钮</span></span><br><span class="line">  <span class="attr">showIndicators:</span> <span class="literal">false</span>   <span class="comment"># 是否显示指示器</span></span><br><span class="line">  <span class="attr">autoLoop:</span> <span class="literal">false</span>         <span class="comment"># 是否自动轮播</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">120</span>           <span class="comment"># 切换延迟时间，默认单位 秒</span></span><br><span class="line">  <span class="attr">intervalTime:</span> <span class="number">5000</span>      <span class="comment"># 自动切换下一张的间隔时间</span></span><br></pre></td></tr></table></figure></li></ul><p>参考：</p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 (blinkfox.github.io)</a></p><p><a href="https://sitoi.cn/posts/63466.html">基于 Hexo GitHub 从零开始搭建个人博客（三）：Matery 主题（DIY 版）详细配置教程，附博客源码 | Sitoi</a></p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-23">(๑•̀ㅂ•́) ✧被发现了～ (sunhwee.com)</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;matery主题的使用&quot;&gt;&lt;a href=&quot;#matery主题的使用&quot; class=&quot;headerlink&quot; title=&quot;matery主题的使用&quot;&gt;&lt;/a&gt;matery主题的使用&lt;/h1&gt;&lt;h1 id=&quot;一、下载matery主题&quot;&gt;&lt;a href=&quot;#一、下载m</summary>
      
    
    
    
    <category term="博客相关" scheme="https://protonlml.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://protonlml.github.io/tags/Hexo/"/>
    
    <category term="matery主题" scheme="https://protonlml.github.io/tags/matery%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>3.git初始化仓库的两种方式</title>
    <link href="https://protonlml.github.io/2019/10/10/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://protonlml.github.io/2019/10/10/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2019-10-10T06:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.901Z</updated>
    
    <content type="html"><![CDATA[<h1><center>git初始化仓库的两种方式</center></h1><h2 id="一、当远程仓库有内容，本地文件夹没内容。"><a href="#一、当远程仓库有内容，本地文件夹没内容。" class="headerlink" title="一、当远程仓库有内容，本地文件夹没内容。"></a>一、当远程仓库有内容，本地文件夹没内容。</h2><ul><li><h4 id="1-在本地创建一个文件夹，名称和远程仓库名称相同"><a href="#1-在本地创建一个文件夹，名称和远程仓库名称相同" class="headerlink" title="1. 在本地创建一个文件夹，名称和远程仓库名称相同"></a>1. 在本地创建一个文件夹，名称和远程仓库名称相同</h4><ul><li><h4 id="在文件夹内，直接使用-Git-Bash-来克隆远程仓库的内容-git-clone"><a href="#在文件夹内，直接使用-Git-Bash-来克隆远程仓库的内容-git-clone" class="headerlink" title="在文件夹内，直接使用 Git Bash 来克隆远程仓库的内容 git clone"></a>在文件夹内，直接使用 Git Bash 来克隆远程仓库的内容 git clone</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150735037.png" alt="image-20240615073509611"></p></li></ul></li></ul><h2 id="二、将”本地仓库（本地仓库是已有项目，要交给远程仓库管理）”，给绑定到GitHub上的-“远程仓库”上面"><a href="#二、将”本地仓库（本地仓库是已有项目，要交给远程仓库管理）”，给绑定到GitHub上的-“远程仓库”上面" class="headerlink" title="二、将”本地仓库（本地仓库是已有项目，要交给远程仓库管理）”，给绑定到GitHub上的 “远程仓库”上面"></a>二、将”本地仓库（本地仓库是已有项目，要交给远程仓库管理）”，给绑定到GitHub上的 “远程仓库”上面</h2><ul><li><h4 id="1-首先在本地创建了本地仓库-git-init-仓库中必须有内容"><a href="#1-首先在本地创建了本地仓库-git-init-仓库中必须有内容" class="headerlink" title="1.首先在本地创建了本地仓库** git init        (仓库中必须有内容)"></a>1.首先在本地创建了本地仓库** <strong>git init</strong>        (仓库中必须有内容)</h4></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150736037.png" alt="Image"></p><ul><li><h4 id="2-要在-GitHub上面创建一个空的仓库，是没有初始化的。"><a href="#2-要在-GitHub上面创建一个空的仓库，是没有初始化的。" class="headerlink" title="2.要在 GitHub上面创建一个空的仓库，是没有初始化的。"></a>2.要在 GitHub上面创建一个空的仓库，是没有初始化的。</h4></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150737968.png" alt="Image"></p><ul><li><h5 id="git-remote-add-origin-https-gitee-com-lmlpla-blog-git-（已有远程仓库情况绑定仓库）"><a href="#git-remote-add-origin-https-gitee-com-lmlpla-blog-git-（已有远程仓库情况绑定仓库）" class="headerlink" title="git remote add origin https://gitee.com/lmlpla/blog.git**（已有远程仓库情况绑定仓库）**"></a><strong>git remote add origin</strong> <a href="https://gitee.com/lmlpla/blog.git**%EF%BC%88%E5%B7%B2%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%83%85%E5%86%B5%E7%BB%91%E5%AE%9A%E4%BB%93%E5%BA%93%EF%BC%89">https://gitee.com/lmlpla/blog.git**（已有远程仓库情况绑定仓库）</a>**</h5></li></ul><hr><hr><ul><li><h4 id="3-在本地Git窗口中，使用命令进行绑定远程仓库。"><a href="#3-在本地Git窗口中，使用命令进行绑定远程仓库。" class="headerlink" title="3.在本地Git窗口中，使用命令进行绑定远程仓库。"></a>3.<strong>在本地Git窗口中，使用命令进行绑定远程仓库。</strong></h4><ul><li><h5 id="先在（项目根目录）下面，添加-gitignore文件。"><a href="#先在（项目根目录）下面，添加-gitignore文件。" class="headerlink" title="先在（项目根目录）下面，添加    .gitignore文件。"></a>先在（项目根目录）下面，添加    .gitignore文件。</h5></li><li><p>然后在</p></li><li><h5 id="git-init-（git初始化）"><a href="#git-init-（git初始化）" class="headerlink" title="git init  （git初始化）"></a>git init  （git初始化）</h5></li><li><h5 id="git-add-注意这有个空格"><a href="#git-add-注意这有个空格" class="headerlink" title="git add .    (注意这有个空格)"></a>git add .    (注意这有个空格)</h5></li><li><h6 id="git-status-查看当前提交状态"><a href="#git-status-查看当前提交状态" class="headerlink" title="&#x2F;&#x2F;(git status 查看当前提交状态)"></a>&#x2F;&#x2F;(git status 查看当前提交状态)</h6></li><li><h5 id="git-commit-m-‘first-commit-init-project’"><a href="#git-commit-m-‘first-commit-init-project’" class="headerlink" title="git commit -m ‘first commit init project’"></a>git commit -m ‘first commit init project’</h5></li><li><h5 id="git-remote-add-origin-x67-x69-116-x40-x67-x69-116-x65-101-46-x63-111-x6d-plalml-thefields-git-绑定远程仓库"><a href="#git-remote-add-origin-x67-x69-116-x40-x67-x69-116-x65-101-46-x63-111-x6d-plalml-thefields-git-绑定远程仓库" class="headerlink" title="git remote add origin &#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#x65;&#101;&#46;&#x63;&#111;&#x6d;:plalml&#x2F;thefields.git    (绑定远程仓库)"></a>git remote add origin <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#x65;&#101;&#46;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#116;&#x65;&#101;&#46;&#x63;&#111;&#x6d;</a>:plalml&#x2F;thefields.git    (绑定远程仓库)</h5></li><li><h5 id="git-push-u-origin-master-（推送本地仓库master分支到远程仓库的master分支）"><a href="#git-push-u-origin-master-（推送本地仓库master分支到远程仓库的master分支）" class="headerlink" title="git push -u origin master          （推送本地仓库master分支到远程仓库的master分支）"></a>git push -u origin master          （推送本地仓库master分支到远程仓库的master分支）</h5></li></ul></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;git初始化仓库的两种方式&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、当远程仓库有内容，本地文件夹没内容。&quot;&gt;&lt;a href=&quot;#一、当远程仓库有内容，本地文件夹没内容。&quot; class=&quot;headerlink&quot; title=&quot;一、当远程仓库有内容，</summary>
      
    
    
    
    <category term="经验" scheme="https://protonlml.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="经验" scheme="https://protonlml.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://protonlml.github.io/2019/10/10/Maven/"/>
    <id>https://protonlml.github.io/2019/10/10/Maven/</id>
    <published>2019-10-10T03:00:00.000Z</published>
    <updated>2024-06-15T06:14:53.100Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Maven</center></h1><h2 id="一、Maven的一些理解"><a href="#一、Maven的一些理解" class="headerlink" title="一、Maven的一些理解"></a>一、Maven的一些理解</h2><ul><li>1.项目的构建，是指项目的“打包”，“编译”，“部署”，“运行”等一系列操作。 </li><li>2.用Maven就可以使我们的项目，能够自动化构建。 </li><li>3.maven是java项目的自动化构建工具。   </li><li>4.Maven可以，将一个大型的项目的不同功能，拆分成多个模块，分别进行开发管理。 </li><li>5.Maven可以，通过配置poom文件，来导入某个技术的jar包，同时会自动的导入这个jar包的相关依赖jar包。</li></ul><h2 id="二、Maven程序的执行原理"><a href="#二、Maven程序的执行原理" class="headerlink" title="二、Maven程序的执行原理"></a>二、Maven程序的执行原理</h2><ol><li><p>maven核心程序指的是，解压后的maven程序目录。也是maven软件的目录里面的内容。</p></li><li><p>Maven在自动构建项目的时候，使用插件会在本地仓库中找，使用依赖jar包也在本地仓库中找。本地找不到就到中央仓库中下载。 </p></li><li><p>怎么使用maven？（不用开发工具）</p><ol><li>创建一个maven规定的项目目录结构，在有poom.xml文件的目录下面，执行maven命令</li><li>当我们执行的Maven命令需要用到某些插件的时候，Maven核心程序会首先到本地仓库中查找</li><li>本地仓库的默认位置：[系统当前用户的家目录].m2\repository(Maven找插件的时候，自动创建)</li><li>Maven核心程序如果在本地仓库中找不到需要的插件的时候，那么它会自动联网，到中央仓库中下载。</li></ol></li><li><p>Maven的生命周期就是指的是“项目的构建过程”，项目的构建是有顺序的，执行的任何一个Maven命令都是从生命周期的头开始。</p></li><li><p>Maven构建项目完成之后，生成的“产品”就放在“项目src所在目录”中的“target”目录中。</p></li><li><p>Pom</p><ol><li>【1】含义：project Object Model 项目对象模型。</li><li>pom.xml对于Maven工程师核心配置文件，与构建过程相关的一切设置都在这个文件中进行</li></ol></li><li><p>Maven坐标类比一下：</p><ol><li><p>数学中可以用（x,yz）三个项量来确定一个空间的点。</p></li><li><p>Maven的pom文件中，也是使用三个项量，来在仓库中唯一定位一个Maven工程</p><ul><li>[1]：<strong>g</strong>roupid：公司或组织域名倒序+项目名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;cn.itcast&lt;/groupId&gt;</span><br></pre></td></tr></table></figure><ul><li>[2]：<strong>a</strong>rtifactid：模块名 </li><li>[3]：<strong>v</strong>ersion：版本<ul><li>只要讲“<strong>gav</strong>”就讲的是Maven的坐标。</li></ul></li><li>[4] :Maven工程的坐标与仓库中的路径对应关系。<ul><li>在Maven仓库里面。每一个Maven工程，他的坐标一定是不重复的，即标识了这个Maven工程信息，同时也决定了他在仓库中存放的目录是什么。</li></ul></li></ul></li></ol></li><li><p>仓库中保存的内容：宽泛的说就是（Maven工程项目）  </p><ul><li>主要有3大块：<ul><li>-[1]：Maven核心软件，自身所需要的一些插件</li><li>[2]：第三方框架或工具的jar包(其实就是第三方项目，打成了jar包)</li><li>[3]：我们自己开发的工程。Maven将“插件”、“框架jar包”、“我们自己的项目”都用统一的目录结构，放在了仓库中，这样就方便Maven核心程序的管理和使用。</li></ul></li></ul></li><li><p>pom.xml文件解析。</p><ul><li>创建的Maven项目中有pom.xml文件，他是Maven项目的核心配置文件。<ul><li>【1】.除了上面三个坐标用来，定位当前项目用Maven核心程序安装在仓库中的位置。</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281041857.png" alt="Image"></li><li>2】.中间部分是“依赖部分”，就是指当前项目，所使用的到的“其他模块项目和jar包”，在Maven仓库中的坐标。如果仓库中没有指定的依赖jar包，就会自动从私服上面下载，私服上面没有就会到中央仓库中下载。<ul><li>但是如果当前项目，用到我们自己写的模块，这时候就需要将，要使用的模块项目给“安装”到仓库中，用“ mvn install”命令进行安装。是不可能从网上下载的，因为这是我们自己写的，不是第三方jar包项目。这样我们就可以将一个大的项目，进行拆分成很多小的模块，然后各个模块之间用“依赖坐标”，来互相关联。</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281041248.png" alt="Image"></li></ul></li><li>【3】最下面是“插件”部分。<ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281041606.png" alt="Image"></li></ul></li></ul></li></ul></li><li><p>依赖</p><ol><li>①Maven解析依赖信息时会到本地仓库中查找被依赖的jar包。<ul><li>对于我们自己开发的Maven工程，使用mvn install命令安装后就可以进入仓库。</li></ul></li><li>②依赖的范围<ul><li>【1】在pom.xml文件中<scope>依赖的范围</scope></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281042365.png" alt="Image"></li><li>依赖的范围一般常用的有三个：compile，test、provided三个。</li><li>依赖范围：意思就是，当前项目所依赖的这个“依赖”，在编译，测试，打包。过程当中时候有效。<ul><li>[1]compile范围的“依赖”（编译范围）</li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：参与</li><li>是否 参与部署：参与</li><li>[2]test范围的“依赖”（测试范围）</li><li>对主程序是否有效：无效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：“junit依赖”它就是测试依赖，这个jar包，不参与打包，在主程序中没有。</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281045023.png" alt="Image"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281045144.png" alt="Image"></li><li>[3]provided范围的“依赖”，通常是为web工程来添加的（不参与部署的范围）。<ul><li>说明只要加了provided范围的“依赖”，web容器中都有。比如：servlet的这个依赖，部署的时候就不需要，因为Tomcat服务器本身就有servlet的jar包。</li></ul></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281045793.png" alt="Image"></li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：servlet-api.jar</li></ul></li></ul></li></ol></li><li><p>maven命令是什么？</p><ul><li>maven这个程序，用来构建项目所使用的命令。（这些命令的顺序，就是生命周期的顺序）</li><li>比如【1】清理：mvn clean</li><li>【2】：编译主程序：mvn compile</li><li>【3】：编译测试程序：mvn test-compile</li><li>【4】：执行测试：mvn test</li><li>【5】：打包：mvn package</li><li>【6】：安装：mvn install</li><li>【7】：生成站点：mvn site这些命令，构成了Maven构建项目时的，不同生命周期，</li></ul></li><li><p>12.Maven的生命周期</p><ul><li>【1】意思：就是Maven构建项目的的，各个构建环节执行的顺序。：不能打乱顺序，必须按照既定的正确顺序来执行，是生命周期的各个阶段的命令来实现的。</li><li>【2】生命周期是在Maven的核心程序中定义了，抽象的生命周期。 生命周期中各个阶段的具体任务是由插件来完成的。</li><li>【3】有三套独立的生命周期：<ul><li>①Clean Lifecycle（清理生命周期）在进行，在真正的构建一个项目之前，必须先进行一些清理工作。</li><li>②Default lifecycle（默认的生命周期）构建的核心部分，编译，测试，打包，安装，部署等等。</li><li>③Site Lifecycle（生成站点生命周期）生成项目报告，站点，发布站点。</li></ul></li><li>【4】每个生命周期的具体实现<ul><li>比如：只执行“mvn clean 清理命令”就会进行清理生命周期。</li><li>执行“mvn install 安装命令”就会进行Maven构建项目的默认生命周期，此时Maven核心程序，会从头开始执行“clean清理”,“compile 编译”，“test-compile 编译测试”，“test 执行测试”，“package 打包”，“install 安装”这一系列的过程。</li><li>执行“site 生成站点”，也会从头开始，将所有过程进行一边。这是生成站点生命周期</li><li>Maven核心程序为了更好的实现自动化构建，按照这一的特点执行生命周期中的各个阶段：不论现在要执行生命周期中的哪一个阶段，都是从这个生命周期最初的位置开始执行。</li></ul></li><li>【5】生命周期的各个阶段仅仅定义了要执行的任务是什么（命令）完成这个命令，是由特定的Maven插件来完成的。<ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281048751.png" alt="Image"></li></ul></li></ul></li><li><p>创建Maven工程之前，需要将IDEA编辑器，和本地下载的Maven程序，进行关联配置。具体操作，见文末。</p></li></ol><hr><hr><h2 id="三、使用IDEA创建普通的javaMaven工程"><a href="#三、使用IDEA创建普通的javaMaven工程" class="headerlink" title="三、使用IDEA创建普通的javaMaven工程"></a>三、使用IDEA创建普通的javaMaven工程</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281049426.png" alt="Image"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281050505.png" alt="Image"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281050614.png" alt="Image"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281050417.png" alt="Image"></p><h2 id="四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）"><a href="#四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）" class="headerlink" title="四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）"></a>四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）</h2><ul><li><p>【1】必须先创建一个空的工程。在空的工程中添加模块。（每次添加模块都要使用快捷键“ctrl+alt+shift+s”来调出<strong>Project Structure窗口，在这个窗口中添加模块，不能直接在模块上面右键添加模块。（在模块上右键模块会添加到“模块里面”）</strong>）</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281051453.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281051169.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281051640.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281052141.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281052005.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281052752.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281052182.png" alt="Image"></p></li><li><h3 id="【标准的Maven工程，分模块的大型web项目，目录结构】"><a href="#【标准的Maven工程，分模块的大型web项目，目录结构】" class="headerlink" title="【标准的Maven工程，分模块的大型web项目，目录结构】"></a>【标准的Maven工程，分模块的大型web项目，目录结构】</h3></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281052343.png" alt="Image"></p></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><h5 id="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"><a href="#我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。" class="headerlink" title="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"></a>我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。</h5></li></ul><h2 id="五、依赖"><a href="#五、依赖" class="headerlink" title="五、依赖"></a>五、依赖</h2><ul><li><h3 id="依赖的传递性："><a href="#依赖的传递性：" class="headerlink" title="依赖的传递性："></a>依赖的传递性：</h3><ul><li>【1】依赖的传递性是指，如果在一个大型的项目当中，各个模块相互依赖，那么在“最下面的模块（依赖关系最下面，这个模块只是被依赖，不去依赖别的模块）”中，pom.xml文件里面，配置的<strong>compile</strong>”范围的依赖jar包，其他模块的pom.xml文件虽然没有声明一样的<strong>compile</strong>”范围的依赖jar包，但是也可以使用这个依赖。</li><li>【2】前提是“<strong>compile</strong>”范围的依赖才能传递，“<strong>test</strong>”“<strong>provided</strong>”范围的依赖不能传递。所以在各个工程模块中，能够传递的依赖，只在“最下面”模块中声明一次就可以了，不能够传递的“<strong>test</strong>”“<strong>provided</strong>”范围的依赖就得各个模块中重复声明依赖。比如：servlet的依赖，他就是“provided范围的模块”，需要在每一个项目模块pom.xml文件中，都要重复声明。</li><li>【3】我们在开发项目的时候，会有一个专门的模块来负责维护这些框架jar包的依赖信息的。在这个模块中，全部都写“<strong>compile</strong>”范围的依赖”，让其他功能模块，来依赖这个“专门模块”，就可以实现“<strong>compile</strong>”范围的依赖”通用。</li><li>【4】子类继承了父类模块，也可以实现依赖传递，默认就是依赖的，不需要再在子类中，重新声明依赖父类，只在子类中声明父类就可以了。</li></ul></li><li><h3 id="依赖的排除："><a href="#依赖的排除：" class="headerlink" title="依赖的排除："></a>依赖的排除：</h3><ul><li>依赖的排除，在哪个工程里面排除的，就在哪个工程里面生效。</li><li>【1】当我们导入某些依赖jar包的时候，Maven会自动将这个jar的其他依赖jar包也一起导入到工程当中，这个时候，如果不需要这个额外的jar包，就可以用“排除依赖”来进行排除。</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281054619.png" alt="Image"></li><li>【2】找到要排除的依赖的ID（假如spring-jcl依赖要被排除）</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281054870.png" alt="Image"></li><li>3】添加<exclusions> </exclusions>标签</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281054912.png" alt="Image"></li></ul></li><li><h3 id="依赖原则："><a href="#依赖原则：" class="headerlink" title="依赖原则："></a>依赖原则：</h3><ul><li><h4 id="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"><a href="#解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）" class="headerlink" title="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"></a>解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）</h4></li><li><p>前提是因为“依赖的传递性”导致的jar包冲突问题。</p></li><li><p>冲突情景：</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281057370.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281057892.png" alt="Image"></p></li><li><p><strong>properties标签</strong>配合自定义标签声明数据的配置并。(可以利用这个标签，实现在一个页面上，同种类型的框架jar包，版本号相同，)在父模块中就更简便了</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281057518.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281057000.png" alt="Image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span> <span class="comment">&lt;!--不是只能用于声明依赖的版本号。凡是需要统一声明后再引用的场合都可以使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="六、Mavne继承（pom文件的继承）"><a href="#六、Mavne继承（pom文件的继承）" class="headerlink" title="六、Mavne继承（pom文件的继承）"></a>六、Mavne继承（pom文件的继承）</h2><ul><li><p>存在的问题：我们都知道在一个“模块项目1”中配置了“<strong>compile</strong>”范围的依赖jar包”，“其他模块项目”来依赖这个“模块项目1”的时候，“其他模块项目”中会自动的存在了“项目模块1的”“<strong>compile</strong>”范围的依赖jar包”。这是依赖的传递性。只用在“模块项目1”中声明一份就可以了。</p></li><li><p>但是：如果是““<strong>test</strong>”“<strong>provided</strong>”范围的依赖是不能传递的”，需要在每一个模块中都要，重复的手动添加““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”，比如“junit依赖”，他就是“test范围的依赖”。（不能够传递的依赖，他就是零散的分散在各个模块当中，就很容易造成各个模块工程之间的版本不一致）。</p></li><li><p>这就存在一个问题，开发一个大型项目的时候，各个模块是不同开发组来开发的，使用“junit这种依赖”的时候，可能版本号就会不相同，导致各个模块之间不统一。</p></li><li><p>解决办法：使用Maven的继承，统一成同一个版本。（以junit依赖为例）</p></li><li><p>【1】专门创建一个模块是所有模块的“父模块”，可以用作““<strong>compile</strong>”范围的依赖jar包”传递依赖。也可以用作““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”的版本管理。</p></li><li><p>【2】解决思路：将junit依赖统一提取到“父”工程中，在子工程中声明junit依赖时不指定版本，以父工程中统一设定的为准。同时也便于修改。</p></li><li><p>【3】操作步骤  [1]创建一个Maven工程作为父工程。注意：打包的方式pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281059822.png" alt="Image"></p></li><li><p>[2]在子工程中声明对父工程的引用（认干爹的一个仪式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子工程中声明父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--以当前pom文件为基准的,找父工程pom.xml文件的相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[3]在父工程中统一管理junit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理，这里专门用来管理，不能够传递的依赖，进行版本号控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- junit是“test”范围的依赖，不能够传递，在这里面统一管理版本号--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[4]在子工程中删除junit依赖的版本号部分 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;version&gt;4.11&lt;/version&gt;--&gt;</span> 删除掉</span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[5]实现效果</p><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281101844.png" alt="Image"></li></ul></li><li><p>[6]：父模块的Pom.xml文件的配置。</p><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281101254.png" alt="Image"></li></ul></li></ul><h2 id="七、Maven的聚合："><a href="#七、Maven的聚合：" class="headerlink" title="七、Maven的聚合："></a>七、Maven的聚合：</h2><ul><li><p>（聚合就是Maven中，各个模块的一键安装。）</p></li><li><p>注意：配置了继承的模块，在执行安装命令（ install）的时候，要先安装 “父模块”再安装其他模块才能成功。</p></li><li><p>Maven中的一件安装，就可以自动的按顺序，将每个模块都按依赖顺序进行安装。</p></li><li><p>实现一件安装步骤：</p><ul><li><p>【1】创建一个“总的聚合工程”，（一般把“父模块”作为“总的聚合工程”，大的情况下也是将，聚合的配置，也配在父模块内）</p></li><li><p>【2】在一个”总的聚合工程”的pom.xml文件中，配置各个參与聚合的模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置聚合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--指定各个子工程的相对路径--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hellow<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HellowFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="八、Maven仓库地址"><a href="#八、Maven仓库地址" class="headerlink" title="八、Maven仓库地址"></a>八、Maven仓库地址</h2><ul><li><a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a></li><li><a href="https://developer.aliyun.com/mvn/search">仓库服务 (aliyun.com)</a></li></ul><h2 id="九、IDEA中Maven配置"><a href="#九、IDEA中Maven配置" class="headerlink" title="九、IDEA中Maven配置"></a>九、IDEA中Maven配置</h2><p><a href="https://www.jb51.net/article/259780.htm">IDEA配置Maven的超详细步骤_java_脚本之家 (jb51.net)</a></p><p><a href="https://blog.csdn.net/qq_42057154/article/details/106114515">IDEA配置Maven（详细版）_idea maven-CSDN博客</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Maven&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、Maven的一些理解&quot;&gt;&lt;a href=&quot;#一、Maven的一些理解&quot; class=&quot;headerlink&quot; title=&quot;一、Maven的一些理解&quot;&gt;&lt;/a&gt;一、Maven的一些理解&lt;/h2&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    <category term="maven" scheme="https://protonlml.github.io/categories/java/maven/"/>
    
    
    <category term="maven" scheme="https://protonlml.github.io/tags/maven/"/>
    
    <category term="项目自动化构建工具" scheme="https://protonlml.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>javaScript</title>
    <link href="https://protonlml.github.io/2019/10/01/javascript/"/>
    <id>https://protonlml.github.io/2019/10/01/javascript/</id>
    <published>2019-10-01T04:00:00.000Z</published>
    <updated>2024-06-15T06:14:53.247Z</updated>
    
    <content type="html"><![CDATA[<h1><center>javaScript</center></h1><blockquote><p>静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。</p><ol><li>程序设计有两种架构：1 c&#x2F;s架构，是客户端和服务器端，要开发两个程序。2 b&#x2F;s架构，是浏览器和服务端。只用浏览器来申请服务器端的资源，再展示出来就好了。只用开发服务器端一个软件。</li><li>javaWeb开发，是B&#x2F;S架构的。</li><li>事件：事件是什么意思？通俗的理解，HTML中的元素组件，被某个动作（事件的属性），触动后，会发生一定的变化。（执行了另一个js代码）。</li><li>将HTML，CSS，JavaScript分别独立出来，可以降低耦合度，</li></ol><p>javaScript最初被设计用于浏览器中，他和java语言没有关系，他是客户端脚本语言</p><p>javaScript语言运行出错，要在浏览器控制台上面查看。F12打开控制台。</p></blockquote><p>- </p><h2 id="一、javaScript"><a href="#一、javaScript" class="headerlink" title="一、javaScript"></a>一、javaScript</h2><ul><li>注意：在一个html的页面中，可以定义多个script的标签，而且存放的位置是任意的，但是会影响运行的先后顺序，一般都是等html页面元素全部加载完毕，再运行js代码，并且是一种等待状态。当在html中的某个位置，触发了某个事件，此时对应的js等待代码，就会执行。从而产生行为效果</li></ul><h3 id="1-javascript与HTML的关联方式："><a href="#1-javascript与HTML的关联方式：" class="headerlink" title="1.javascript与HTML的关联方式："></a>1.javascript与HTML的关联方式：</h3><ul><li><p>内部关联</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302141892.png" alt="image-20240130214055735"></p></li><li><p>外部关联</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302141171.png" alt="image-20240130214133935"></p></li></ul><h3 id="2-javascript的数据类型"><a href="#2-javascript的数据类型" class="headerlink" title="2.javascript的数据类型"></a>2.javascript的数据类型</h3><ul><li><blockquote><p>原始数据类型：</p><pre><code>     1. number：数字 。 整数/小数/ NAN （not  a number 一个不是数字的数字类型）        2. string ：字符串。字符串 &quot;abc&quot; &quot;a&quot; &#39;abc&#39;        3. boolean：true 和 false        4. null：一个对象为空的占位符        5. undefined：未定义，如果一个变量没有给他初始化值，则会被默认赋值为undefined</code></pre><p>注意：NaN是number类型，他是（不是数字的数字）。在js当中，运算符，后面的运算数，不是运算符要求的类型，js就会自动的将运算数进行类型转换。比如：numb&#x3D; +”abc”;此时：number根据”+”运算符，如果是数字，就会直接转换成数字，但是转换符后面跟的不是数字类型，则会转换成不是数字的数字类型。值为NaN.</p></blockquote></li></ul><h3 id="3-JavaScript的变量"><a href="#3-JavaScript的变量" class="headerlink" title="3.JavaScript的变量"></a>3.JavaScript的变量</h3><ul><li><p>什么是变量：变量就是内存空间中的一小片区域。有类型，有名称，有值。比如：int a&#x3D;3;</p></li><li><p>JavaScript的变量是弱类型的，什么叫弱类型，就是不管定义什么类型的变量，都用var开头。</p></li><li><p>而java中定义整型用int，定义字符型用char 。所以java是强类型的。</p></li><li><p>☆ 通过typeof(变量名)可以得到变量的类型</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302150588.png" alt="image-20240130215045915"></p></li><li><p>注释:你也许会问,为什么typeof运算符对于nul值会返回”object”.这实际上是javaScript最初实现中的个错误,然后被<br>ECMAScript沿用了,现在,null被认为是 对象的占位符,从而解释了这一矛盾,但从技求上来说,它仍是原始值。</p></li></ul><h3 id="4-javascript中的运算符"><a href="#4-javascript中的运算符" class="headerlink" title="4.javascript中的运算符"></a>4.javascript中的运算符</h3><ul><li><h4 id="①一元运算符：就是只有一个运运算数的运算符。"><a href="#①一元运算符：就是只有一个运运算数的运算符。" class="headerlink" title="①一元运算符：就是只有一个运运算数的运算符。"></a>①一元运算符：就是只有一个运运算数的运算符。</h4><ul><li>++ 、–、+（正号）、-（负号）</li><li>“++（–）”在前，先自增（自减），再运算。</li><li>“++（–）”在后，先运算，再自增（自减）。</li><li>+（-）（正负号）</li></ul></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302204727.png" alt="Image"></p></li><li><h4 id="②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）"><a href="#②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）" class="headerlink" title="②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）"></a>②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）</h4></li><li><h4 id="③赋值运算符：“-”，“-”“-”（和java中使用方法相同）"><a href="#③赋值运算符：“-”，“-”“-”（和java中使用方法相同）" class="headerlink" title="③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）"></a>③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）</h4></li><li><h4 id="④-比较运算符：“-”，“-”，“"><a href="#④-比较运算符：“-”，“-”，“" class="headerlink" title="④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”"></a>④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”</h4><ul><li>“&#x3D; &#x3D;”是比较两个数是否相等，“&#x3D;&#x3D;&#x3D;全等于”是加上了类型的比较。</li></ul></li><li><h3 id="⑤-逻辑运算符：“-”，“-”，“！”"><a href="#⑤-逻辑运算符：“-”，“-”，“！”" class="headerlink" title="⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”"></a>⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302211570.png" alt="Image [3]"></li></ul></li><li><h3 id="⑥-三元运算符“-？：表达式”"><a href="#⑥-三元运算符“-？：表达式”" class="headerlink" title="⑥ 三元运算符“ ？：表达式”"></a>⑥ 三元运算符“ <u>？：表达式</u>”</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302211345.png" alt="Image [4]"></li></ul></li></ul><h2 id="二、javascript-中的特殊语法"><a href="#二、javascript-中的特殊语法" class="headerlink" title="二、javascript 中的特殊语法."></a>二、javascript 中的特殊语法.</h2><p>(了解一下就好，但是要和java规范一样写代码，不要省“；”，也不要省“var”，带var的变量，是局部变量，不带var的变量是全局变量 。)</p><h2 id="三、流程控制语句"><a href="#三、流程控制语句" class="headerlink" title="三、流程控制语句"></a>三、流程控制语句</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302213021.png" alt="Image [5]"></p><h2 id="练习-：javascript（9x9乘法表）"><a href="#练习-：javascript（9x9乘法表）" class="headerlink" title="练习 ：javascript（9x9乘法表）"></a>练习 ：javascript（9x9乘法表）</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302213809.png" alt="Image [6]"></p><hr><hr><h2 id="四、BOM对象："><a href="#四、BOM对象：" class="headerlink" title="四、BOM对象："></a>四、BOM对象：</h2><ul><li><h4 id="概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。"><a href="#概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。" class="headerlink" title="概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。"></a>概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302312704.png" alt="Image [13]"></p></li><li><h4 id="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"><a href="#BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。" class="headerlink" title="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"></a>BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。</h4><h3 id="①-window窗口对象。"><a href="#①-window窗口对象。" class="headerlink" title="① window窗口对象。"></a>① window窗口对象。</h3><ul><li><h4 id="window窗口的第一类方法：弹窗有关的方法"><a href="#window窗口的第一类方法：弹窗有关的方法" class="headerlink" title="window窗口的第一类方法：弹窗有关的方法"></a>window窗口的第一类方法：弹窗有关的方法</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302317649.png" alt="image-20240130231750600"></p></li><li><h4 id="window窗口的第二类方法：打开关闭窗口的方法。"><a href="#window窗口的第二类方法：打开关闭窗口的方法。" class="headerlink" title="window窗口的第二类方法：打开关闭窗口的方法。"></a>window窗口的第二类方法：打开关闭窗口的方法。</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302320023.png" alt="image-20240130232026695"></p></li><li><h4 id="window窗口的第三类方法：与定时器有关的方法"><a href="#window窗口的第三类方法：与定时器有关的方法" class="headerlink" title="window窗口的第三类方法：与定时器有关的方法"></a>window窗口的第三类方法：与定时器有关的方法</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302322466.png" alt="image-20240130232218944"></p></li><li><h4 id="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用"><a href="#Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用" class="headerlink" title="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用"></a>Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302327561.png" alt="Image [27]"></p></li></ul></li></ul><h2 id="②、-Location地址栏对象"><a href="#②、-Location地址栏对象" class="headerlink" title="②、 Location地址栏对象"></a>②、 Location地址栏对象</h2><ul><li><p>Location 对象的方法。reload().用来刷新当前页面。 属性：href</p></li><li><p>Location地址栏对象，他的一个属性href。有两个作用，设置当前页面的URL和获取当前页面的完整的URL.（这里面的设置和获取URL都是针对当前页面的。设置的话，就是重新赋值，设置为新的地址，这样当前页面就会跳转到设置的地址页面中去）</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302328922.png" alt="Image [28]"></p></li><li><h3 id="倒计时跳转网页案例"><a href="#倒计时跳转网页案例" class="headerlink" title="倒计时跳转网页案例"></a>倒计时跳转网页案例</h3></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302330863.png" alt="image-20240130233011287"></p></li></ul><h2 id="③、-history当前页面历史记录对象。"><a href="#③、-history当前页面历史记录对象。" class="headerlink" title="③、 history当前页面历史记录对象。"></a>③、 history当前页面历史记录对象。</h2><ul><li>属性：length：history.length；返回的是。历史记录的个数。 </li><li>方法：back();加载history列表中的上一个URL。绑定单击事件，就可以做一个后退的按钮。</li><li>方法： forword(); 加载history列表中的下一个URL。绑定单击事件，就可以做一个前进的按钮。</li><li>方法：go(); 加载history列表中的某一个具体页面。</li></ul><hr><hr><h2 id="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）"><a href="#五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）" class="headerlink" title="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）"></a>五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）</h2><ul><li><h4 id="☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"><a href="#☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。" class="headerlink" title="☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"></a>☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。</h4></li><li><h4 id="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"><a href="#☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。" class="headerlink" title="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"></a>☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。</h4></li><li><h4 id="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"><a href="#DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）" class="headerlink" title="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"></a>DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）</h4></li><li><h4 id="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"><a href="#DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。" class="headerlink" title="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"></a>DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302230077.png" alt="Image [7]"></p></li><li><h3 id="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。"><a href="#①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。" class="headerlink" title="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。"></a>①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。</h3><ul><li><h5 id="document-write-““-向页面上写出一条横线（就是往页面写出信息的）"><a href="#document-write-““-向页面上写出一条横线（就是往页面写出信息的）" class="headerlink" title="document.write(““)   向页面上写出一条横线（就是往页面写出信息的）"></a>document.write(“<hr>“)   向页面上写出一条横线（就是往页面写出信息的）</h5></li><li><h4 id="1-1-document对象：获取element对象的方法。"><a href="#1-1-document对象：获取element对象的方法。" class="headerlink" title="1.1 document对象：获取element对象的方法。"></a>1.1 document对象：获取element对象的方法。</h4></li><li><blockquote><ol><li>getElementById（） ：根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName （） ：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName （）：根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName（）：根据name属性值获取元素对象们。返回值是一个数组</li></ol></blockquote></li><li><h4 id="1-2-document对象：创建其他DOM对象："><a href="#1-2-document对象：创建其他DOM对象：" class="headerlink" title="1.2  document对象：创建其他DOM对象："></a>1.2  document对象：创建其他DOM对象：</h4></li><li><blockquote><ol><li>createElement（“标签名”）：创建元素节点（记住）</li><li>createAttribute（name）：创建拥有指定名称的属性节点，并返回新的Attr对象。（了解）</li><li>createComment（）：创建注释节点。（了解）</li><li>createTextNode（）：创建文本节点。（了解）</li></ol></blockquote></li></ul></li><li><h3 id="②：Element对象（元素标签对象）"><a href="#②：Element对象（元素标签对象）" class="headerlink" title="②：Element对象（元素标签对象）"></a>②：Element对象（元素标签对象）</h3><ul><li>1，获取&#x2F;创建：通过document来获取和创建</li><li>2.方法：<ul><li>removeAttribute（“”） ：删除属性</li><li>setAttribute（“属性名”，“属性值”） ：设置属性值。</li></ul></li><li>补充：input框框，有个value属性，用其节点对象.value可以得到，文本框里面的内容。</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302239426.png" alt="Image [8]"></li></ul></li><li><h3 id="③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"><a href="#③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。" class="headerlink" title="③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"></a>③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。</h3></li><li><p>appendchild（节点对象名） ：向节点的子节点列表的结尾添加新的子节点。（增）</p></li><li><p>removechild（节点对象名） ：删除（并返回）当前节点的指定子节点。（删）</p></li><li><p>replacechild（节点对象名） ：用新节点替换一个子节点。（改，不常用）。</p></li><li><p>属性：父节点&#x3D;当前节点.parentNode; 返回当前节点的父节点。</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302240885.png" alt="Image [9]"></p></li></ul><h2 id="六、☆javascript-中的几个对象的学习。"><a href="#六、☆javascript-中的几个对象的学习。" class="headerlink" title="六、☆javascript 中的几个对象的学习。"></a>六、☆javascript 中的几个对象的学习。</h2><ul><li><h3 id="1-☆-function函数方法对象、Array数组对象。"><a href="#1-☆-function函数方法对象、Array数组对象。" class="headerlink" title="1.☆ function函数方法对象、Array数组对象。"></a>1.☆ function函数方法对象、Array数组对象。</h3></li><li><p>function对象，在javascript 中，定义方法，是用function对象，来定义方法的。</p><blockquote><ul><li>语法：function 方法名（参数列表）{方法体}</li><li>&#x2F;&#x2F; javascript中定义方法，的写法和java类似。 但是是用的function对象定义的方法</li><li>&#x2F;&#x2F; js中用function定义的方法，参数列表不用写类型，返回值不用写类型</li><li>&#x2F;&#x2F; js中用function定义的方法，如果有多个同名的方法，那么后面的同名方法，会覆盖前面的同名方法，</li><li>&#x2F;&#x2F; js中用function定义的方法，在调用方法时，只要方法名确定就会调用最后面的同名不同参数的方法。他和参数列表无关。</li><li>&#x2F;* js中用function定义的方法，参数列表的括号里面隐藏了一个内置对象，是一个arguments的数组。 所以当参数列表中不写形式参数时，function add(){ 方法体} 括号里面就是一个可变形参 每一个传递过来的实参，都存在arguments[0].arguments[1]……..等数组中。 *&#x2F;</li></ul></blockquote></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302336101.png" alt="Image [31]"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302336754.png" alt="Image [32]"></p></li><li><h3 id="2-☆-Array数组对象"><a href="#2-☆-Array数组对象" class="headerlink" title="2.☆ Array数组对象"></a>2.☆ Array数组对象</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302338259.png" alt="image-20240130233856091"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302339764.png" alt="image-20240130233912957"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302339719.png" alt="image-20240130233952371"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302340524.png" alt="image-20240130234025914"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302341187.png" alt="image-20240130234102744"></li></ul></li><li><h3 id="3-☆-Date日期对象"><a href="#3-☆-Date日期对象" class="headerlink" title="3.☆ Date日期对象"></a>3.☆ Date日期对象</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302347839.png" alt="image-20240130234717315"></li></ul></li><li><h3 id="4-☆Math数学对象"><a href="#4-☆Math数学对象" class="headerlink" title="4.☆Math数学对象"></a>4.☆Math数学对象</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302349463.png" alt="image-20240130234909211"></li></ul></li><li><h3 id="5-☆-regExp：正则表达式对象。"><a href="#5-☆-regExp：正则表达式对象。" class="headerlink" title="5.☆ regExp：正则表达式对象。"></a>5.☆ regExp：正则表达式对象。</h3><ul><li><h5 id="先了解什么是正则表达式"><a href="#先了解什么是正则表达式" class="headerlink" title="先了解什么是正则表达式"></a>先了解什么是正则表达式</h5></li><li><p>正则表达式就是定义字符串的组成规则（通用的规则，在Java中或者其他语言中都可以使用）。在表单的输入框的地方，实现校验输入的字符串是不是符合正则表达式的规则。不符合校验失败，阻止表单的提交。 </p></li><li><p>☆ Javascript对表单的校验，是依赖于正则表达式的。</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302351087.png" alt="image-20240130235118937"></p></li><li><h3 id="正则表达式对象。regExp"><a href="#正则表达式对象。regExp" class="headerlink" title="正则表达式对象。regExp"></a>正则表达式对象。regExp</h3></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302352011.png" alt="image-20240130235241803"></p></li></ul></li><li><h3 id="6-☆全局对象"><a href="#6-☆全局对象" class="headerlink" title="6.☆全局对象"></a>6.☆全局对象</h3><ul><li>在javascript中，有一个全局对象Global，他不用创建对象，直接用其内部的方法，就可以实现对应的功能，一般有字符串的URL编解码方法。</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302354439.png" alt="image-20240130235441038"></li></ul></li></ul><hr><hr><h2 id="七、-事件绑定的方式"><a href="#七、-事件绑定的方式" class="headerlink" title="七、 事件绑定的方式"></a>七、 事件绑定的方式</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302309137.png" alt="Image [10]"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302310432.png" alt="Image [11]"></p><ul><li><h3 id="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"><a href="#得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。" class="headerlink" title="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"></a>得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。</h3></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302310594.png" alt="Image [12]"></p><hr><hr><h2 id="八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准"><a href="#八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准" class="headerlink" title="八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准"></a>八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准</h2><ul><li><h3 id="☆①所有的节点对象都有的关键的属性innerHTML"><a href="#☆①所有的节点对象都有的关键的属性innerHTML" class="headerlink" title="☆①所有的节点对象都有的关键的属性innerHTML"></a>☆①所有的节点对象都有的关键的属性innerHTML</h3><ul><li><p>innerHTML。是获取节点对象，里面的所有内容。就是获取了，一对“&lt;&gt;标签体&lt;&#x2F;&gt;”中的标签体的内容。标签体可以是一段文字，也可以是其他标签。 </p></li><li><p>通过给innerHTML赋值或者追加值，可以改表标签体的内容。如下图</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310008885.png" alt="image-20240131000856980"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310009414.png" alt="image-20240131000909451"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310009904.png" alt="image-20240131000922589"></p></li><li><h5 id="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"><a href="#上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。" class="headerlink" title="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"></a>上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。</h5></li></ul></li><li><h3 id="☆②所有的节点对象都有的关键的属性style。"><a href="#☆②所有的节点对象都有的关键的属性style。" class="headerlink" title="☆②所有的节点对象都有的关键的属性style。"></a>☆②所有的节点对象都有的关键的属性style。</h3><ul><li><h4 id="1-给style属性赋值，就可以改变其样式。"><a href="#1-给style属性赋值，就可以改变其样式。" class="headerlink" title="1.给style属性赋值，就可以改变其样式。"></a>1.给style属性赋值，就可以改变其样式。</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310010681.png" alt="Image [70]"></li></ul></li><li><p>注意：两个单词的写法</p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310011498.png" alt="Image [71]"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310011810.png" alt="image-20240131001138257"></p></li><li><h3 id="2-改变节点对象的class值。用className属性。"><a href="#2-改变节点对象的class值。用className属性。" class="headerlink" title="2. 改变节点对象的class值。用className属性。"></a>2. 改变节点对象的class值。用className属性。</h3></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310012825.png" alt="Image [72]"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310012327.png" alt="Image [73]"></p></li><li><h4 id="3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL"><a href="#3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL" class="headerlink" title="3.要想设置和修改，节点的属性值。查Api文档。例如： 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL"></a>3.要想设置和修改，节点的属性值。查Api文档。例如：<img> 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL</h4></li></ul></li></ul><hr><hr><h2 id="九、事件"><a href="#九、事件" class="headerlink" title="九、事件"></a>九、事件</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310015267.png" alt="Image [74]"></p><ul><li><h3 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h3><ul><li><h4 id="1-点击事件"><a href="#1-点击事件" class="headerlink" title="1.点击事件"></a>1.点击事件</h4></li><li><blockquote><ol><li><p>onclick：单机事件</p></li><li><p>ondblclick ：双击事件</p></li></ol></blockquote></li><li><h4 id="2-焦点事件"><a href="#2-焦点事件" class="headerlink" title="2.焦点事件"></a>2.焦点事件</h4></li><li><blockquote><ol><li>onblur：失去焦点</li></ol><ul><li>一般用于表单验证,当光标不在输入框时，就会失去焦点，触发onblur事件发生。</li></ul><ol start="2"><li>onfocus：元素获得焦点</li></ol></blockquote></li><li><h4 id="3-加载事件"><a href="#3-加载事件" class="headerlink" title="3.加载事件"></a>3.加载事件</h4></li><li><blockquote><ol><li>onload：一张页面或者一幅图像完成加载</li></ol><ul><li>内部加载方式：script标签如果写在head标签里面，在上面的话，要使用窗口的事件机制，加载事件来控制，js 代码，在HTML页面加载完全，才运行。</li><li>如下图</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310030871.png" alt="Image [80]"></li></ul></blockquote></li><li><h4 id="4-鼠标事件"><a href="#4-鼠标事件" class="headerlink" title="4.鼠标事件"></a>4.鼠标事件</h4></li><li><blockquote><ol><li>onmousedown ：标按钮披按下.</li></ol><ul><li>定义方法时,定义一个形参,接受 event 对象.</li><li>eventi对象的button属性可以获取鼠标按钮键被点击了.</li></ul><ol start="2"><li>onmouseup  ：鼠标按键被松开.</li><li>onmousemove ：鼠标被移动.</li><li>onmouseover：鼠标移到某元素之上.</li><li>onmouseout：鼠标从某元素移开.</li></ol></blockquote></li><li><h4 id="5-键盘事件"><a href="#5-键盘事件" class="headerlink" title="5.键盘事件"></a>5.键盘事件</h4></li><li><blockquote><ol><li>onkeydown： 某个键盘按键被按下.</li><li>onkeyup ：某个键盘按键被松开.</li><li>onkeypress： 某个键盘按键被按下并松开.</li></ol></blockquote></li><li><h4 id="6-选择和改变事件"><a href="#6-选择和改变事件" class="headerlink" title="6.选择和改变事件"></a>6.选择和改变事件</h4></li><li><blockquote><ol><li>onchange：域的内容被改变.</li></ol><ul><li><h4 id="☆-当在选择的下拉列表上，选择某个选项会触发该事件。"><a href="#☆-当在选择的下拉列表上，选择某个选项会触发该事件。" class="headerlink" title="☆ 当在选择的下拉列表上，选择某个选项会触发该事件。"></a>☆ 当在选择的下拉列表上，选择某个选项会触发该事件。</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310032281.png" alt="Image [81]"></p></li></ul><ol start="2"><li>onselect：文本被选中.</li></ol></blockquote></li><li><h4 id="7-表单事件"><a href="#7-表单事件" class="headerlink" title="7.表单事件:"></a>7.表单事件:</h4></li><li><blockquote><ol><li>onsubmit：确认按钮被点击.</li></ol><ul><li>可以阻止表单的提交<ul><li>方法返回falsel则表单被阻止提交.</li></ul></li><li>写法：</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310033920.png" alt="Image [82]"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310033022.png" alt="Image [83]"></li></ul><ol start="2"><li>onreset：重置按钮被点击.</li></ol></blockquote></li></ul></li></ul><hr><hr><h2 id="练习：动态表格案例"><a href="#练习：动态表格案例" class="headerlink" title="练习：动态表格案例"></a>练习：动态表格案例</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310002855.png" alt="image-20240131000210183"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310002593.png" alt="image-20240131000243636"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310003451.png" alt="image-20240131000254150"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310003911.png" alt="image-20240131000332037"></p><ul><li>☆动态表格案例总结：用DOM对象在内存层面你，不管创建了多少子节点或者父节点，这些结构都是在内存层面上的，在浏览器页面上不能够直接显示，要想显示，必须有html的已有标签对象。先获取已有的html标签对象节点，将内存层面上的节点，appendChild为已有节点的子节点。同时，属性的样式会关联到css样式表中，只要和css表中的选择器对应的上，就可以显示样式。</li><li>☆ 技巧：怎样获取当前标签的对象，直接在html标签后面，加上事件属性。绑定事件方式一，事件调用指定方法，括号里面写this。</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310004539.png" alt="image-20240131000404203"></li><li>那么就可以在方法声明的地方，形式参数就是当前对象。如下图：</li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310004456.png" alt="Image [62]"></li></ul><hr><hr><h2 id="总结1："><a href="#总结1：" class="headerlink" title="总结1："></a>总结1：</h2><ul><li><h3 id="怎么来理解BOM对象和DOM对象以及HTML-DOM对象？"><a href="#怎么来理解BOM对象和DOM对象以及HTML-DOM对象？" class="headerlink" title="怎么来理解BOM对象和DOM对象以及HTML DOM对象？"></a>怎么来理解BOM对象和DOM对象以及HTML DOM对象？</h3></li><li><p>1 . BOM对象，就是将浏览器各个组成部分，封装为对象。有显示器对象、浏览器对象、windows窗口对象、URL地址栏对象、以及历史记录对象，这5个BOM对象。windows窗口对象，是BOM对象中的主要对象，因为其他对象都在一个窗口当中。可以通过windows对象来获取，其他4个BOM对象。</p></li><li><p>2 .在windows窗口获取的document对象，是DOM对象。</p><ul><li>document对象是DOM对象的主要对象。DOM对象也在窗口内，但是只有document对象（.html文件对象）是通过窗口获取，其他DOM对象是通过document对象获取的。</li></ul></li><li><p>3 .document对象，他是将整个文档封装成一个document对象。对应着HTML里面最外层标签<html></html>。他可以获取其他节点对象</p><ul><li>document.getElementById()；。或者对象们；另外也可以创建其他DOM对象。</li></ul></li><li><p>4.有了一些基础的DOM对象，也就是有了某个标签的（节点）的对象之后。然后用HTML DOM来、对这个对象进行获取、修改、添加或删除操作。</p></li><li><p>5.从上往下看，一层一层的，从窗口(window)——&gt;文本对象(document)——&gt;单个文本元素对象(element)——&gt;单个文本元素操作（HTML DOM）这样方便记忆。也便于理解。</p></li><li><p>节点：在HTML中所有的单个元件，就是单个节点。对应着一对，一对的标签。</p></li><li><p>子节点：外标签包着内标签，也就是节点包着子节点。例如：<body>文字 <a>超链接</a></body>。</p></li><li><p>Node 节点对象：他可以认为是虚有的，它里面的方法用来“CRUDdom树”</p></li><li><p>其实就是所有的DOM对象，都是一个节点，DOM对象本身，就可以增加节点，删除节点，替换节点，查询节点。</p></li><li><p>有了DOM这些对象，用他们的功能。就可以用javaScript语言对HTML的标签进行操作。</p></li><li><p>要记住：虽然能用，JavaScript语言来操作，内存层面的HTML的元素对象代码，使其在浏览器上面显示样式。但是他和HTML里面的标签没有，任何关系。</p><ul><li>执行了“JavaScript语言操作的元件对象，比如添加节点，删除节点”不会再HTML文档中自动生成，HTML代码。</li></ul></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310036188.png" alt="Image [84]"></p><ul><li><h3 id="理解、标签、标签体、标签属性、控制元素的样式。"><a href="#理解、标签、标签体、标签属性、控制元素的样式。" class="headerlink" title="理解、标签、标签体、标签属性、控制元素的样式。"></a>理解、标签、标签体、标签属性、控制元素的样式。</h3><blockquote><p>1.1标签: 标签就是一对对的&lt;&gt;&lt;&#x2F;&gt;。例如：<code>&lt;img&gt; &lt;/img&gt; </code></p><p>1.2标签体:一对标签里面的内容。例如：<code>&lt;img&gt;这是标签体，可以是子标签也可以是文字 &lt;/img&gt;</code></p><p>1.3 标签属性: 定义在标签&lt;&gt;里面的。例如：<code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code></p><p>1.4 标签控制样式:</p></blockquote></li></ul><h2 id="总结2："><a href="#总结2：" class="headerlink" title="总结2："></a>总结2：</h2><ul><li><h4 id="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。"><a href="#一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。" class="headerlink" title="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 &lt;script&gt;js代码&lt;/script&gt;，标签一般都写在&lt;body&gt;......&lt;script&gt;&lt;/body&gt;body标签的最下面。"></a>一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 <code>&lt;script&gt;js代码&lt;/script&gt;</code>，标签一般都写在<code>&lt;body&gt;......&lt;script&gt;&lt;/body&gt;</code>body标签的最下面。</h4></li><li><h4 id="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"><a href="#js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。" class="headerlink" title="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"></a>js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。</h4></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;javaScript&lt;/center&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="javaScript" scheme="https://protonlml.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>11.static静态变量</title>
    <link href="https://protonlml.github.io/2019/09/24/11.static%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/"/>
    <id>https://protonlml.github.io/2019/09/24/11.static%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/</id>
    <published>2019-09-24T12:30:00.000Z</published>
    <updated>2024-06-16T01:06:54.784Z</updated>
    
    <content type="html"><![CDATA[<h1><center>static静态变量</center></h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160906609.png" alt="image-20240616090611612"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160906619.png" alt="image-20240616090645028"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;static静态变量&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>10.集合</title>
    <link href="https://protonlml.github.io/2019/09/24/10.%E9%9B%86%E5%90%88/"/>
    <id>https://protonlml.github.io/2019/09/24/10.%E9%9B%86%E5%90%88/</id>
    <published>2019-09-24T12:00:00.000Z</published>
    <updated>2024-06-16T01:09:37.953Z</updated>
    
    <content type="html"><![CDATA[<h1><center>集合</center></h1><h2 id="一、集合和数组都是存数据的容器"><a href="#一、集合和数组都是存数据的容器" class="headerlink" title="一、集合和数组都是存数据的容器"></a>一、集合和数组都是存数据的容器</h2><ul><li><h4 id="1-集合和数组的区别"><a href="#1-集合和数组的区别" class="headerlink" title="1.集合和数组的区别"></a>1.集合和数组的区别</h4><ul><li><h5 id="数组：长度是固定的，可以存储基本数据类型，也可以存储引用数据类型"><a href="#数组：长度是固定的，可以存储基本数据类型，也可以存储引用数据类型" class="headerlink" title="数组：长度是固定的，可以存储基本数据类型，也可以存储引用数据类型"></a>数组：长度是固定的，可以存储基本数据类型，也可以存储引用数据类型</h5></li><li><h5 id="集合：-长度是可变的，只能存储引用数据类型。"><a href="#集合：-长度是可变的，只能存储引用数据类型。" class="headerlink" title="集合： 长度是可变的，只能存储引用数据类型。"></a>集合： 长度是可变的，只能存储引用数据类型。</h5></li></ul></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160909100.png" alt="image-20240614215622841"></p></li></ul><h2 id="二、集合的基本操作（增删改查）"><a href="#二、集合的基本操作（增删改查）" class="headerlink" title="二、集合的基本操作（增删改查）"></a>二、集合的基本操作（增删改查）</h2><ul><li><h4 id="对容器类的对象的操作，基本上就是增删改查"><a href="#对容器类的对象的操作，基本上就是增删改查" class="headerlink" title="对容器类的对象的操作，基本上就是增删改查"></a>对容器类的对象的操作，基本上就是增删改查</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160909639.png" alt="image-20240614220414018"></p></li><li><h4 id="1-创建集合对象（-中表示泛型）"><a href="#1-创建集合对象（-中表示泛型）" class="headerlink" title="1.创建集合对象（&lt;&gt; 中表示泛型）"></a>1.创建集合对象（&lt;&gt; 中表示泛型）</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160909949.png" alt="image-20240614230046252"></p></li></ul><hr><hr><h2 id="三、基本数据类型对应的包装类"><a href="#三、基本数据类型对应的包装类" class="headerlink" title="三、基本数据类型对应的包装类"></a>三、基本数据类型对应的包装类</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150022361.png" alt="image-20240615002212022"></p><h2 id="四、集合综合练习"><a href="#四、集合综合练习" class="headerlink" title="四、集合综合练习"></a>四、集合综合练习</h2><ul><li><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150433052.png" alt="image-20240615043351999"></h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150434510.png" alt="image-20240615043452052"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150435118.png" alt="image-20240615043542259"></p></li></ul><h2 id="五、知识点（标号的使用）"><a href="#五、知识点（标号的使用）" class="headerlink" title="五、知识点（标号的使用）"></a>五、知识点（标号的使用）</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406150421726.png" alt="image-20240615042125994"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;集合&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、集合和数组都是存数据的容器&quot;&gt;&lt;a href=&quot;#一、集合和数组都是存数据的容器&quot; class=&quot;headerlink&quot; title=&quot;一、集合和数组都是存数据的容器&quot;&gt;&lt;/a&gt;一、集合和数组都是存数</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>9.字符串综合练习</title>
    <link href="https://protonlml.github.io/2019/09/24/9.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/"/>
    <id>https://protonlml.github.io/2019/09/24/9.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/</id>
    <published>2019-09-24T11:00:00.000Z</published>
    <updated>2024-06-15T06:14:53.026Z</updated>
    
    <content type="html"><![CDATA[<h1><center>字符串综合练习</center></h1><h2 id="一、转换罗马数字"><a href="#一、转换罗马数字" class="headerlink" title="一、转换罗马数字"></a>一、转换罗马数字</h2><ul><li><h4 id="使用到了-string-字符串-转-char-方法是toCharArray"><a href="#使用到了-string-字符串-转-char-方法是toCharArray" class="headerlink" title="使用到了 string 字符串 转 char[] :方法是toCharArray()"></a>使用到了 string 字符串 转 char[] :方法是toCharArray()</h4></li><li><h4 id="使用到将-char-i-某个char字符，转为-数字-：方法使用-Character-getNumericValue-chars-i"><a href="#使用到将-char-i-某个char字符，转为-数字-：方法使用-Character-getNumericValue-chars-i" class="headerlink" title="使用到将 char[i] 某个char字符，转为 数字 ：方法使用 Character.getNumericValue(chars[i]);"></a>使用到将 char[i] 某个char字符，转为 数字 ：方法使用 Character.getNumericValue(chars[i]);</h4></li><li><h4 id="使用jdk12中-的-switch的写法进行匹配"><a href="#使用jdk12中-的-switch的写法进行匹配" class="headerlink" title="使用jdk12中 的 switch的写法进行匹配"></a>使用jdk12中 的 switch的写法进行匹配</h4></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406132320494.png" alt="image-20240613232053432"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406140217831.png" alt="image-20240614021756737"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406140218239.png" alt="image-20240614021823302"></p><hr><hr><h2 id="二、调整字符串"><a href="#二、调整字符串" class="headerlink" title="二、调整字符串"></a>二、调整字符串</h2><ul><li><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.<img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406142134805.png" alt="image-20240614213457577"></h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406142135008.png" alt="image-20240614213531911"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;字符串综合练习&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、转换罗马数字&quot;&gt;&lt;a href=&quot;#一、转换罗马数字&quot; class=&quot;headerlink&quot; title=&quot;一、转换罗马数字&quot;&gt;&lt;/a&gt;一、转换罗马数字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 i</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>8.字符串</title>
    <link href="https://protonlml.github.io/2019/09/23/8.%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://protonlml.github.io/2019/09/23/8.%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2019-09-23T08:00:00.000Z</published>
    <updated>2024-06-15T06:14:53.015Z</updated>
    
    <content type="html"><![CDATA[<h1><center>字符串</center></h1><h2 id="一、字符串构造方法"><a href="#一、字符串构造方法" class="headerlink" title="一、字符串构造方法"></a>一、字符串构造方法</h2><p> <img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406120204744.png" alt="image-20240612020422300"></p><h2 id="二、字符串创建方式"><a href="#二、字符串创建方式" class="headerlink" title="二、字符串创建方式"></a>二、字符串创建方式</h2><ul><li><h4 id="0-直接赋值（最常用），这种赋值后，字符串会放在“字符串常量池”，再次声明这个字符串，可以直接复用，节省内存"><a href="#0-直接赋值（最常用），这种赋值后，字符串会放在“字符串常量池”，再次声明这个字符串，可以直接复用，节省内存" class="headerlink" title="0.直接赋值（最常用），这种赋值后，字符串会放在“字符串常量池”，再次声明这个字符串，可以直接复用，节省内存"></a>0.直接赋值（最常用），这种赋值后，字符串会放在“字符串常量池”，再次声明这个字符串，可以直接复用，节省内存</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406120208164.png" alt="image-20240612020830919"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406120210516.png" alt="image-20240612021003035"></li></ul></li><li><h4 id="1-使用字符数组作为参数，构建String-字符串"><a href="#1-使用字符数组作为参数，构建String-字符串" class="headerlink" title="1.使用字符数组作为参数，构建String 字符串"></a>1.使用字符数组作为参数，构建String 字符串</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406120205226.png" alt="image-20240612020554687"></li></ul></li><li><h4 id="2-使用，字节码数组作为构造参数"><a href="#2-使用，字节码数组作为构造参数" class="headerlink" title="2.使用，字节码数组作为构造参数"></a>2.使用，字节码数组作为构造参数</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406120206771.png" alt="image-20240612020629805"></li></ul></li></ul><h2 id="三、字符串的操作"><a href="#三、字符串的操作" class="headerlink" title="三、字符串的操作"></a>三、字符串的操作</h2><ul><li><h4 id="1-字符串的比较（”-”-比较的是地址值，”equals”比较的是内容）"><a href="#1-字符串的比较（”-”-比较的是地址值，”equals”比较的是内容）" class="headerlink" title="1.字符串的比较（”&#x3D;&#x3D;” 比较的是地址值，”equals”比较的是内容）"></a>1.字符串的比较（”&#x3D;&#x3D;” 比较的是地址值，”equals”比较的是内容）</h4></li><li><h4 id="注意点：通过Scanner对象，从键盘录入的字符串是-new出来的，放在堆里"><a href="#注意点：通过Scanner对象，从键盘录入的字符串是-new出来的，放在堆里" class="headerlink" title="注意点：通过Scanner对象，从键盘录入的字符串是 new出来的，放在堆里"></a>注意点：通过Scanner对象，从键盘录入的字符串是 new出来的，放在堆里</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406120254618.png" alt="image-20240612025424581"></li></ul></li><li><h4 id="2-字符串，提取指定的字符charAt-方法"><a href="#2-字符串，提取指定的字符charAt-方法" class="headerlink" title="2.字符串，提取指定的字符charAt( )方法"></a>2.字符串，提取指定的字符charAt( )方法</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406122349265.png" alt="image-20240612234922039"></li></ul></li><li><h4 id="3-字符串的截取-subString"><a href="#3-字符串的截取-subString" class="headerlink" title="3.字符串的截取 subString()"></a>3.字符串的截取 subString()</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406130009394.png" alt="image-20240613000943504"></li></ul></li><li><h4 id="4-字符串转数字（要注意字符串转为数字后的范围大不大）-parseInt"><a href="#4-字符串转数字（要注意字符串转为数字后的范围大不大）-parseInt" class="headerlink" title="4.字符串转数字（要注意字符串转为数字后的范围大不大） parseInt()"></a>4.字符串转数字（要注意字符串转为数字后的范围大不大） parseInt()</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406130032296.png" alt="image-20240613003250952"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406130033810.png" alt="image-20240613003315612"></li></ul></li><li><h4 id="5-判断字符串是不是空字符串-isEmpty"><a href="#5-判断字符串是不是空字符串-isEmpty" class="headerlink" title="5.判断字符串是不是空字符串  isEmpty()"></a>5.判断字符串是不是空字符串  isEmpty()</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406130035252.png" alt="image-20240613003515105"></li></ul></li><li><h4 id="6-字符串的替换-replace"><a href="#6-字符串的替换-replace" class="headerlink" title="6. 字符串的替换 replace()"></a>6. 字符串的替换 replace()</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406130045568.png" alt="image-20240613004556418"></li></ul></li></ul><hr><hr><h2 id="四、StringBuilder的使用"><a href="#四、StringBuilder的使用" class="headerlink" title="四、StringBuilder的使用"></a>四、StringBuilder的使用</h2><ul><li><h4 id="为什么使用Stringbuilder"><a href="#为什么使用Stringbuilder" class="headerlink" title="为什么使用Stringbuilder"></a>为什么使用Stringbuilder</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406132213540.png" alt="image-20240613221339141"></p></li><li><h4 id="只要涉及到字符串的-“拼接”，“替换”，“反转”-就要想到StringBuilder，"><a href="#只要涉及到字符串的-“拼接”，“替换”，“反转”-就要想到StringBuilder，" class="headerlink" title="只要涉及到字符串的 “拼接”，“替换”，“反转” 就要想到StringBuilder，"></a>只要涉及到字符串的 “拼接”，“替换”，“反转” 就要想到StringBuilder，</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406132218896.png" alt="image-20240613221811939"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406132218554.png" alt="image-20240613221838196"></p></li><li><h4 id="而字符串的-“截取subString”，“获取某个字符使用-charAt-”，都是String自身可以做到"><a href="#而字符串的-“截取subString”，“获取某个字符使用-charAt-”，都是String自身可以做到" class="headerlink" title="而字符串的 “截取subString”，“获取某个字符使用 charAt()”，都是String自身可以做到"></a>而字符串的 “截取subString”，“获取某个字符使用 charAt()”，都是String自身可以做到</h4></li></ul><hr><h2 id="五、StringJoiner（拼接字符串使用）"><a href="#五、StringJoiner（拼接字符串使用）" class="headerlink" title="五、StringJoiner（拼接字符串使用）"></a>五、StringJoiner（拼接字符串使用）</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406132220873.png" alt="image-20240613222018943"></p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406132221218.png" alt="image-20240613222112681"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;字符串&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、字符串构造方法&quot;&gt;&lt;a href=&quot;#一、字符串构造方法&quot; class=&quot;headerlink&quot; title=&quot;一、字符串构造方法&quot;&gt;&lt;/a&gt;一、字符串构造方法&lt;/h2&gt;&lt;p&gt; &lt;img src=&quot;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>7.封装</title>
    <link href="https://protonlml.github.io/2019/09/23/7.%E5%B0%81%E8%A3%85/"/>
    <id>https://protonlml.github.io/2019/09/23/7.%E5%B0%81%E8%A3%85/</id>
    <published>2019-09-23T02:30:00.000Z</published>
    <updated>2024-06-15T06:14:52.984Z</updated>
    
    <content type="html"><![CDATA[<h1><center>对象的封装</center></h1><h2 id="一、对象封装"><a href="#一、对象封装" class="headerlink" title="一、对象封装"></a>一、对象封装</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406112148222.png" alt="image-20240611205756140"></p><h2 id="二、对象中-“成员变量”-”成员方法”"><a href="#二、对象中-“成员变量”-”成员方法”" class="headerlink" title="二、对象中 “成员变量”,”成员方法”."></a>二、对象中 “成员变量”,”成员方法”.</h2><ul><li><h4 id="类中的方法叫做成员方法，类中方法外的变量叫做成员变量。类中方法内的变量，是局部变量。"><a href="#类中的方法叫做成员方法，类中方法外的变量叫做成员变量。类中方法内的变量，是局部变量。" class="headerlink" title="类中的方法叫做成员方法，类中方法外的变量叫做成员变量。类中方法内的变量，是局部变量。"></a>类中的方法叫做成员方法，类中方法外的变量叫做成员变量。类中方法内的变量，是局部变量。</h4></li><li><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406112158815.png" alt="image-20240611215829618"></h4></li><li><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><ul><li><h4 id="作用：就是用来区分成员变量，与局部变量重名的。"><a href="#作用：就是用来区分成员变量，与局部变量重名的。" class="headerlink" title="作用：就是用来区分成员变量，与局部变量重名的。"></a>作用：就是用来区分成员变量，与局部变量重名的。</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406112221516.png" alt="image-20240611222112958"></p></li></ul></li></ul><h3 id="三、构造方法，构造器"><a href="#三、构造方法，构造器" class="headerlink" title="三、构造方法，构造器"></a>三、构造方法，构造器</h3><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406112203236.png" alt="image-20240611220326158"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406112204501.png" alt="image-20240611220419054"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406112207364.png" alt="image-20240611220755591"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;对象的封装&lt;/center&gt;&lt;/h1&gt;



&lt;h2 id=&quot;一、对象封装&quot;&gt;&lt;a href=&quot;#一、对象封装&quot; class=&quot;headerlink&quot; title=&quot;一、对象封装&quot;&gt;&lt;/a&gt;一、对象封装&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://g</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>6.面向对象</title>
    <link href="https://protonlml.github.io/2019/09/22/6.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://protonlml.github.io/2019/09/22/6.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2019-09-22T06:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.971Z</updated>
    
    <content type="html"><![CDATA[<h1><center>面向对象</center></h1><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290515646.png" alt="image-20240129051459191"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290517923.png" alt="image-20240129051733556"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406112057448.png" alt="image-20240611205756140"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;面向对象&lt;/center&gt;&lt;/h1&gt;



&lt;h2 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一、&quot; class=&quot;headerlink&quot; title=&quot;一、&quot;&gt;&lt;/a&gt;一、&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/lmlpla/b</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>经验3</title>
    <link href="https://protonlml.github.io/2019/09/22/%E7%BB%8F%E9%AA%8C3/"/>
    <id>https://protonlml.github.io/2019/09/22/%E7%BB%8F%E9%AA%8C3/</id>
    <published>2019-09-22T06:00:00.000Z</published>
    <updated>2024-06-15T06:14:53.348Z</updated>
    
    <content type="html"><![CDATA[<h1><center>模板</center></h1><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;模板&lt;/center&gt;&lt;/h1&gt;





























&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;© 版权声明&lt;/p&gt;
&lt;escape&gt;

&lt;div&gt;
    &lt;h3 align=&quot;center&quot;  style=&quot;color: brow</summary>
      
    
    
    
    <category term="经验" scheme="https://protonlml.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="经验" scheme="https://protonlml.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>2.获取随机数的几种方法</title>
    <link href="https://protonlml.github.io/2019/09/22/2.%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://protonlml.github.io/2019/09/22/2.%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2019-09-22T05:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.891Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2000c99e61cb81d43563c31e0f5fe35a3bf159363e48ba6f842c6bb138915bc4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="经验" scheme="https://protonlml.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="经验" scheme="https://protonlml.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>4.二位数组</title>
    <link href="https://protonlml.github.io/2019/09/22/4.%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>https://protonlml.github.io/2019/09/22/4.%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</id>
    <published>2019-09-22T05:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.950Z</updated>
    
    <content type="html"><![CDATA[<h1><center>二维数组</center></h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290507392.png" alt="image-20240129050713855"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290508360.png" alt="image-20240129050759176"></p><h2 id="一、二维数组的静态初始化"><a href="#一、二维数组的静态初始化" class="headerlink" title="一、二维数组的静态初始化"></a>一、二维数组的静态初始化</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290455377.png" alt="image-20240129045506558"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290456682.png" alt="image-20240129045647503"></li></ul><h2 id="二、获取二维数组中的某个值"><a href="#二、获取二维数组中的某个值" class="headerlink" title="二、获取二维数组中的某个值"></a>二、获取二维数组中的某个值</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290457948.png" alt="image-20240129045743484"></li></ul><h2 id="三、二维数组遍历"><a href="#三、二维数组遍历" class="headerlink" title="三、二维数组遍历"></a>三、二维数组遍历</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290459147.png" alt="image-20240129045908411"></li></ul><h2 id="四、二维数组动态初始化"><a href="#四、二维数组动态初始化" class="headerlink" title="四、二维数组动态初始化"></a>四、二维数组动态初始化</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290459311.png" alt="image-20240129045951076"></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;二维数组&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290507392.png&quot; alt=&quot;image-20240129050</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>5.方法与数据类型</title>
    <link href="https://protonlml.github.io/2019/09/22/5.%E6%96%B9%E6%B3%95/"/>
    <id>https://protonlml.github.io/2019/09/22/5.%E6%96%B9%E6%B3%95/</id>
    <published>2019-09-22T05:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.963Z</updated>
    
    <content type="html"><![CDATA[<h1><center>方法与数据类型</center></h1><h2 id="一、方法"><a href="#一、方法" class="headerlink" title="一、方法"></a>一、方法</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090618218.png" alt="image-20240609061811862"></h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090618267.png" alt="image-20240609061744902"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090625201.png" alt="image-20240609062508678"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090625401.png" alt="image-20240609062545007"></p><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="1-基本数据类型（变量中存储的是真实的数据）在栈中"><a href="#1-基本数据类型（变量中存储的是真实的数据）在栈中" class="headerlink" title="1.基本数据类型（变量中存储的是真实的数据）在栈中"></a>1.基本数据类型（变量中存储的是真实的数据）在栈中</h3><ul><li><h4 id="四类八种"><a href="#四类八种" class="headerlink" title="四类八种"></a>四类八种</h4><ul><li><h5 id="整数数据类型-（bat-short-int-long-）"><a href="#整数数据类型-（bat-short-int-long-）" class="headerlink" title="整数数据类型  （bat , short , int , long ）"></a>整数数据类型  （bat , short , int , long ）</h5></li><li><h5 id="浮点数据类型-float-double"><a href="#浮点数据类型-float-double" class="headerlink" title="浮点数据类型(float , double)"></a>浮点数据类型(float , double)</h5></li><li><h5 id="布尔数据类型（char-）"><a href="#布尔数据类型（char-）" class="headerlink" title="布尔数据类型（char ）"></a>布尔数据类型（char ）</h5></li><li><h5 id="字符数据类型-boolean"><a href="#字符数据类型-boolean" class="headerlink" title="字符数据类型( boolean)"></a>字符数据类型( boolean)</h5></li></ul></li></ul><h3 id="2-引用数据类型（只要是new出来的都是引用数据类型）在堆中"><a href="#2-引用数据类型（只要是new出来的都是引用数据类型）在堆中" class="headerlink" title="2.引用数据类型（只要是new出来的都是引用数据类型）在堆中"></a>2.引用数据类型（只要是new出来的都是引用数据类型）在堆中</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406102324569.png" alt="image-20240610232428342"></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;方法与数据类型&lt;/center&gt;&lt;/h1&gt;



&lt;h2 id=&quot;一、方法&quot;&gt;&lt;a href=&quot;#一、方法&quot; class=&quot;headerlink&quot; title=&quot;一、方法&quot;&gt;&lt;/a&gt;一、方法&lt;/h2&gt;&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>1.获取数字的个位 十位 百位 千位</title>
    <link href="https://protonlml.github.io/2019/09/22/1.%E8%8E%B7%E5%8F%96%E6%95%B0%E5%AD%97%E7%9A%84%E4%B8%AA%E4%BD%8D%20%E5%8D%81%E4%BD%8D%20%E7%99%BE%E4%BD%8D%20%E5%8D%83%E4%BD%8D/"/>
    <id>https://protonlml.github.io/2019/09/22/1.%E8%8E%B7%E5%8F%96%E6%95%B0%E5%AD%97%E7%9A%84%E4%B8%AA%E4%BD%8D%20%E5%8D%81%E4%BD%8D%20%E7%99%BE%E4%BD%8D%20%E5%8D%83%E4%BD%8D/</id>
    <published>2019-09-22T04:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.782Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c14ef5a4bb57e4e743d369174110dcaba5ffb1453571617b2d7f3b4be7905793">5e0f427b1806d2606f470abb7dec961a75866f782e3f708ed03c36aa6758f4ca9c6790d5efd0713ffa07ef9707ff620a572afa01919f9613d1ca222daa9256aacc82d6065c8fee2138918bba319c22ba3019e07c0361129560612433ad928baf320209d66f2ad0ec86a0458e9909d2c648de5c2ab02ada4868c863eb080afb2cfc6ca5aaf979bb4273662775cc9456bb36158b1c6dbf4fec632e8cc1ea01cc9d1f392724c331f2cb91b1597e567171bc6e8d7f7de7bd9a49958157ea92fd97b54c15bcde87ee725047d2335a7e48e029a6718a50f28334c59acb8a2b3e636617ec3d5f2b1bd8d35524bf0db3d5f74cadc4003bd8523627fb41823fd84a044fa700edaee7c81f8070b100a1e8966a4017d0667916e152c833fce874c4d5496ddb46ed3c4d4daa6869c728a4abe8c9f97599237a058fa8c6f2a22462f6737a5ed5420fbe5f728e2ebd9409793832ffaa95fc2c2f626e765375e39fff89a9ef0505f17f4f80186ce5c3af8c2f677b8ad091e294903dad10feda9bbfbb4a942c4b5bc9a32d451634bade2efa9558b14b12729190ef88551af9a65b9c579f2fb50c02273dba4da851fe2efbff57a32ddb20edd83a665b03255ecdb7d75c3876cb6f970b3f71286ab127ec41845d63aaa86fce78b2560906a3149cd230fcd7490be67ec78d8bb5354bd313350ae8464a64f0f403daed43d3f33386d292152cbaf5a88f1c3b20813b55a47c617e27bfdbca9bf645c9cb77faed31daebed537b046e1798f5942912368c2a851c3973523248eab279f9c0babfb2f6739fd8295a223851bbe0f62747efb87f01e505b160dd24b9da7b36c68e901ef0ee4c8721cf73f516d1305ab97ee257b393fc3b2df965c1c5ab0082ea901c85bdad29b8d847f59f2e945e79bc95f60f4dc801634f8b78b34d1438d2660f12823de38de003e5fdd7876623662fafb7937f3f785d717fab656e53c696be3008aba2c1acd2fb392de3956a37bdea80b479e68dacef1ede3361334ca337a082dcd8f307c5535ee28e24eceb000d8912ed141f4cf4c5b2e28f804bc8e1ae97413213c0850bfe129c38215fadea9f27f778844251d694d6aa30e8f629800651ccff57a2efc77e254db1fcbb369604258722c5806c02f442032a4141c7472379222d6bc14010d60ace50e210ba99efab98ba6eb98591b8fbc853edad42e6a0631a2494883e92967f951b9759296a1bd1b39997d7569d3522e84cdb7a2d304988006b98116125eec574a6d9e153de9632a843b2aab214252ed867d352ef7305f03ec2ee570943b69b9edeca309c79f00a4240499add5b05ff178d89da8a7e80829744c19fe217d15f0bd9e9afc5b99e9b2544f5c90d001cad6de1e6df881ddb8fdde0e5e8cdd37cc3b0efbbcf741954d93ef6cbda3e37147df401eee6695190a55e3c0d878855e0d1de0bd71973efb6af4527aa9bbcffb1cdd59e62c636553156777170a9ff92f0da67c2d8803eea5601c29288b539ea057000c546d232910d6caca90e157fdebe60df03d8befe6f7e110ca9f97bd49544d6879bc86054a1da2cd536785a463b96abc5beaadb468c942e8576dc75668ef2f59d3c314215c57b102f67fe48e7cc95d10cb3f2f6bac3cb2aecea6f8aaafc394cac2b277232657f1a4d1a8c4666c6d29386c1c05185bea5df553693bc3009d3431e0eb478ac8e53e404bb3cb045a616aa737299c2c01c0f55524998a3a50ddd57035bf8fce6ed7c6424df12905d26248a7109cb13f55effc9195c57e8b26f226f35f1c0221a3bfa2d18b2ac126a14aed418ba0b3806a0f0803fd1c6a372c135b494eb67e6688bec0d0ec59121d4e08a1fa3b4243d58aef70242c42526b9eec07b596110f0527db4182ae75cb64b608902a3b083667db56485edec1992bdbf2c19881b666733f5d23d3099e23b8fc2d403c3235e62a1d0a8ffa6a10221b248e4439ff7e0de0b65a6a201696a7326c495784816c9042f350d36277e85ed98519ddbd75527743a0aba7d15ce3c3ee05416ace2863df089f7651f6865e78f50bb299a3d683c3b3c969e015f997464136e4c3f33c365681a91522a65b806ee11d335d316adbf93b3a606c38ba3425883fdd303578255b1eed7e07dd4d141f5ebac3c76b3a689af7f157582af2de6ab63f2de617eec15f49840d221f05dbd787a30ba54ed22daa4c819a92b60d12e55e4f357373c9b32d6be8b7ae467bae629c59b4901243b68530c2a13d9e388c0cff6ad424378b3f4c49cfb1849776ec62574591889ab116e6f347de673043b83fd4760d46222964d929f41ffd45d04f677cffcfe5b44d61d3ddeaa313301495f9bb15da9d0cc69c40649614ce5bb634dda12e4dbff2894ed75782c5dff2def72c22bfdc38432f8dcda1e1e343c1b1aed5d0477d4388e486ce99802d6eb3895ffb59c96c575e52b3e17292adc11825e9e40ede91d5c38a49beb79e92c4f34cb9447d58dfd0e1e78339320b002f86591beb9149a586fe563e589a97287f42a3667633f9afa7722d8478b09063c5bbd029960be48b2f6c8631d38a1a6bf325e748d06ee90c33f96f1981b8adf8d526b760ec12b95d925c120a4b7a5b389a2fbf0ffab76fb961035eff208cb66ee8459ce0d2a2a914e0088fc377848a5e1bc7b28406861f135f2a8d4da3c8c32f785c3d9ea71eb64c297c7e0d018cd49cc5a187f8b245fbcb3065df59874e1b1d3ff932cdce37ffe0f5b63baf7f6a58a9af105b224af2c2ff636e7e7cef7d698b0bb6adf873f07a2023e810faa4a27d6a1457750297f12c2c0e1d36a380f9a1b44c5cd42aeb6f4849f2f4c48181536aac75e117a0c7b12401e7230113400d67706bc9b54c1958c8c2d81ad0da5de8bcb112aa01aaae516ed4a3a81d3058d174d7ec140fc4c8efa4e00608925b224e82284f9dbb16ff43e27378164ee5df046e80984f43a5b57710b75e85b90d6941863a4eb5816e7f3c85fb894edf0d2cdfea0da56ad4452f6fd8e5a1d047bc47a11764931bbcc9ca45ea0d11191e66d364fa29fff7671ee0f26a5eac23a44f5c10aae2e94b5f268fae6828969dfe53f4541c65f7d8626ca5c50f99df12ee39748e11607467ef9c1a0c6e0ff70a92a80d61da62a1b4f6000e11581e9db374874b4fd54960cb90fbf6a3fa5a9f45db9b5e0db54b07c171758f8badea327c69e311d9c6d0ed7097c05f7e6d0591e263623729c001b46792d5628acf095545554d0def8e96c0d2aa3f9e142c9190cd3f32d10902487fedafc783facc6a2d08c0f878e190180b3b22c8c1a9edf4e5411aa92307d80a422294614e73752652fcf5984598c39e03f8f8e52310473f2d5e04196bfec0a17d1563738a27685fa2af96a55e7bed887b8a6229366267005505cbfaef5e1c8f6e5740d0e9a30251c6b7b9fb481310302b6aef5e008f8ea374c741a886b90dcac5ae6e69185d6cde55c6cee75aaf5de2fc42ccfbeab11b75a43fb05d9e445d6342efeee85888b8973a010a43a29847ec6f8ad0bfe4db671a9b7f786581beea5d41dafadaf2bbb2dc9ca409c159469a2894ac00bee98c5186800e257c20e6a31c559fc9a71e98c31360eaaf8bfa62c10ea883521a3c593f0533ab5f2d1967755a42bcb0847f19dc08c1ca2e9b3944ec6e8c9c2a6b4afd543c697bb7523284244200f523d1f996ea03697da09a33bc3c7b504073fd4105ed3e3437ff61cf15cbabb8a8216951dadfb2a5c439fa1081479b39d7a7f7a8762f69845ac677a31cf220e00c42c4a0ff4733f3472f43ac5a1c6123a8802f13b41707d0b6a8fb75528076775e64af89128d653366573ea52c2a80e98a983a27962da140ebc0abd96fab872bb6a8843cbc0d306ad85cf0f3f6b15cde3e57c6581f3deb25ff8e59b99b832c1411c1fc1496871954f0f939a93b7fc5d077e955fdd1f9d91ce9c1ae12983b8fe2623feaa0cfd6d618e675aa7453eec417150234c6112b12564d4bd857bd7d8af970a5d6b9f9e094001cacf3e97be631a39d1f639eea5cd8a7ad7750989a4672ec76df517c02cafc01c15b02c4425ade5afdc2931c195b13a583ccd04559ada706f8b95fcf4318c7a5c906313806d939956f4ccd476d8b0396cccf618b4c06027e50a668a9db3c18b99846eb51559ac9c4d82776b6f271e14cabd474d1b3a06dbb91848228a3ef2ba6c9241a3794dfa85db9b313a2de1f17fa3e294f674981fde32c005bec487547df8ec9b54d60d8c5be3fbd023c4157b7993159edb758229faf49a5a889f62409797d4b216b124335ab68a9aebb468ce6d9b901c8f1535080d37ef16d571f24eb08fd359869f3ce48159bc5deac90707aa4bbfd080ef0c97889f422cf99221e6de93997039f9660cb0536c710f04d74dd4c4724c262b127b7949f363acb54872598f39f477a32b0a93dcd72161f6e4a279751a1852caee35af8aa7fe98e007d7e6f3fc785ce9f060b5c38129bb105e4a638e4787f0eebccf6083e9508070f1c1cd1c8369da562a199df3d78257c5c9fe28a18b19ebc0cd2ae926cf7dd1a3ffbeb9efe7e5f9231b41b1a21f8a72b4420193fbdbae5ac15a0a03b880bcb2e5f1220c67cfa233b6a6a4ad16204ce867b603506d3376d7dbe87fd4dab8dbe6de11b4af0fc8ae1d237d5cc37f07fcb6bf61ad1f749195069c05b120a50a14610b67abb827378bdaeeb5379904464313b85668134b6f21a23e5cd5b507ccc89f76187efab4c04993dd912d4ccb0f57446a64de3207aea6ed66d72cfcff3783d767c34c96d9a216dcb7bd8910cec9161b811ec1345e18e2cfe0f8dda6174b29d4f3e924290f848a70191938282b4c03274a8e89fc1d49b414e3f379ef4116f73708f261fcdeabf1c6b076ab83f02afc64fb29bd4aef32bbc3cc2c8b54d060e0f53c624fd81ed98ef3f415758b100a724fe55a4ea5d734e99ec1d571c25ff4e963dac2de19c933faf82f4689be5cbfce07f4b323a35c3434401cbfee36b086c3d843c72721f9f172f3c782</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="经验" scheme="https://protonlml.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="经验" scheme="https://protonlml.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>3.数组</title>
    <link href="https://protonlml.github.io/2019/09/22/3.%E6%95%B0%E7%BB%84/"/>
    <id>https://protonlml.github.io/2019/09/22/3.%E6%95%B0%E7%BB%84/</id>
    <published>2019-09-22T04:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.930Z</updated>
    
    <content type="html"><![CDATA[<h1><center>数组</center></h1><h2 id="一、什么是数组"><a href="#一、什么是数组" class="headerlink" title="一、什么是数组"></a>一、什么是数组</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401280941927.png" alt="image-20240128094102825"></li></ul><h2 id="二、数组的静态初始化"><a href="#二、数组的静态初始化" class="headerlink" title="二、数组的静态初始化"></a>二、数组的静态初始化</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401280943686.png" alt="image-20240128094344455"></li></ul><h2 id="三、数组的动态初始化"><a href="#三、数组的动态初始化" class="headerlink" title="三、数组的动态初始化"></a>三、数组的动态初始化</h2><ul><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401280945269.png" alt="image-20240128094543316"></p><blockquote><ul><li>数组默认初始化值的规律</li><li>整数类型:默认初始化值  0</li><li>小数类型:默认初始化值  0.0</li><li>字符类型:默认初始化值      ‘\u0000’  空格</li><li>布尔类型:默认初始化值  false</li><li>引用数据类型: 默认初始化值   null  (<em>引⽤数据类型包括：类、接⼝类型、数组类型、枚举类型、注解类型，字符串型</em>)</li></ul></blockquote></li></ul><h2 id="四、数组的静态初始化和动态初始化的区别"><a href="#四、数组的静态初始化和动态初始化的区别" class="headerlink" title="四、数组的静态初始化和动态初始化的区别"></a>四、数组的静态初始化和动态初始化的区别</h2><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401280947703.png" alt="image-20240128094701163"></li></ul><h2 id="五、索引"><a href="#五、索引" class="headerlink" title="五、索引"></a>五、索引</h2><ul><li><h3 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h3></li><li><h4 id="数组元素访问的格式为：数组名-索引-；"><a href="#数组元素访问的格式为：数组名-索引-；" class="headerlink" title="数组元素访问的格式为：数组名[ 索引]；"></a>数组元素访问的格式为：数组名[ 索引]；</h4></li><li><h4 id="索引：也叫做下标，角标；"><a href="#索引：也叫做下标，角标；" class="headerlink" title="索引：也叫做下标，角标；"></a>索引：也叫做下标，角标；</h4></li><li><h4 id="索引特点：从0开始，逐个-1增长，连续不间断"><a href="#索引特点：从0开始，逐个-1增长，连续不间断" class="headerlink" title="索引特点：从0开始，逐个+1增长，连续不间断"></a>索引特点：从0开始，逐个+1增长，连续不间断</h4></li><li><h4 id="（我们可以通过索引把数组中的元素拿出来用，也可以把元素添加到数组当中去）"><a href="#（我们可以通过索引把数组中的元素拿出来用，也可以把元素添加到数组当中去）" class="headerlink" title="（我们可以通过索引把数组中的元素拿出来用，也可以把元素添加到数组当中去）"></a>（我们可以通过索引把数组中的元素拿出来用，也可以把元素添加到数组当中去）</h4></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290331989.png" alt="image-20240129033156725"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401290332899.png" alt="image-20240129033218337"></p><h2 id="六、数组角标越界异常"><a href="#六、数组角标越界异常" class="headerlink" title="六、数组角标越界异常"></a>六、数组角标越界异常</h2><ul><li><h5 id="访问了数组不存在索引，就会引发数组角标越界异常"><a href="#访问了数组不存在索引，就会引发数组角标越界异常" class="headerlink" title="访问了数组不存在索引，就会引发数组角标越界异常"></a>访问了数组不存在索引，就会引发数组角标越界异常</h5></li><li><h5 id="避免：知道索引的范围"><a href="#避免：知道索引的范围" class="headerlink" title="避免：知道索引的范围"></a>避免：知道索引的范围</h5></li></ul><hr><hr><h2 id="七、数组常见操作"><a href="#七、数组常见操作" class="headerlink" title="七、数组常见操作"></a>七、数组常见操作</h2><ul><li><h4 id="1-求最值"><a href="#1-求最值" class="headerlink" title="1.求最值"></a>1.求最值</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/image-608054530693.png" alt="image-20240608054530693"></li></ul></li><li><h4 id="2-求和"><a href="#2-求和" class="headerlink" title="2.求和"></a>2.求和</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090446743.png" alt="image-20240609044601853"></li></ul></li><li><h4 id="3-交换数据"><a href="#3-交换数据" class="headerlink" title="3.交换数据"></a>3.交换数据</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090444331.png" alt="image-20240609044433785"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090442591.png" alt="image-20240609044207984"></li></ul></li><li><h4 id="4-打乱数据"><a href="#4-打乱数据" class="headerlink" title="4.打乱数据"></a>4.打乱数据</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090520000.png" alt="image-20240609052051995"></li></ul></li><li><h4 id="5-冒泡排序"><a href="#5-冒泡排序" class="headerlink" title="5.冒泡排序"></a>5.冒泡排序</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406090602136.png" alt="image-20240609060245319"></li></ul></li><li><h4 id="6-数组拷贝"><a href="#6-数组拷贝" class="headerlink" title="6.数组拷贝"></a>6.数组拷贝</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406092151343.png" alt="image-20240609215148164"></li></ul></li></ul><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;数组&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、什么是数组&quot;&gt;&lt;a href=&quot;#一、什么是数组&quot; class=&quot;headerlink&quot; title=&quot;一、什么是数组&quot;&gt;&lt;/a&gt;一、什么是数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;http</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>2.判断和循环</title>
    <link href="https://protonlml.github.io/2019/09/21/2.%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>https://protonlml.github.io/2019/09/21/2.%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/</id>
    <published>2019-09-21T04:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、判断"><a href="#一、判断" class="headerlink" title="一、判断"></a>一、判断</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401220014395.png" alt="image-20240122001415392"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401220014729.png" alt="image-20240122001431650"></p><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 如果说，要对一个范围进行判断，则需要使用if</span><br><span class="line"> * 如果对，有限个结果，一一列举出来，任选其一，则需要使用switch</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401220029334.png" alt="image-20240122002923533"></p><ul><li><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><h3 id="1-switch正常执行流程"><a href="#1-switch正常执行流程" class="headerlink" title="1.switch正常执行流程"></a>1.switch正常执行流程</h3><ul><li><p>执行流程</p></li><li><p>首先还是会拿着小括号中表达式的值跟下面每一个case进行匹配.如果匹配上了,就会执行对应的语句体,如果此时发现了break,那么结束整个switch语句:<br>如果没有发现break,那么程序会继续执行下一个case的语句体,一直遇到break.或者右大括号为止.<br>使用场景:<br><strong>如果多个case的语句体重复了,那么我们考虑利用case穿透去简化代码</strong></p></li><li></li></ul></li><li><h3 id="2-switch新特性（JDK12）"><a href="#2-switch新特性（JDK12）" class="headerlink" title="2.switch新特性（JDK12）"></a>2.switch新特性（JDK12）</h3></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401220837990.png" alt="image-20240122083715659"></p></li><li><h3 id="3-case穿透"><a href="#3-case穿透" class="headerlink" title="3.case穿透"></a>3.case穿透</h3><ul><li><h4 id="就是语句体中没有写break导致的"><a href="#就是语句体中没有写break导致的" class="headerlink" title="就是语句体中没有写break导致的:"></a>就是语句体中没有写break导致的:</h4></li><li><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401220842546.png" alt="image-20240122084200241"></p></li></ul></li><li><h3 id="4-default的位置和省略"><a href="#4-default的位置和省略" class="headerlink" title="4. default的位置和省略"></a>4. default的位置和省略</h3><ul><li><h5 id="位置-default-不一定是写在最下面的-我们可以写在任意位置-只不过习惯会写在最下面"><a href="#位置-default-不一定是写在最下面的-我们可以写在任意位置-只不过习惯会写在最下面" class="headerlink" title="位置:default 不一定是写在最下面的 ,我们可以写在任意位置.只不过习惯会写在最下面"></a>位置:default <code>不一定是写在最下面的</code> ,我们可以写在任意位置.只不过习惯会写在最下面</h5></li><li><h5 id="省略-default可以省略-语法不会有问题-但是不建议省略"><a href="#省略-default可以省略-语法不会有问题-但是不建议省略" class="headerlink" title="省略:default可以省略,语法不会有问题,但是不建议省略."></a>省略:default可以省略,语法不会有问题,但是不建议省略.</h5></li></ul></li></ul></li></ul><hr><hr><h1 id="二、循环"><a href="#二、循环" class="headerlink" title="二、循环"></a>二、循环</h1><ul><li><h4 id="在实际开发中，我们需要重复的执行某段代码，会选择循环来实现"><a href="#在实际开发中，我们需要重复的执行某段代码，会选择循环来实现" class="headerlink" title="在实际开发中，我们需要重复的执行某段代码，会选择循环来实现"></a>在实际开发中，我们需要重复的执行某段代码，会选择循环来实现</h4></li></ul><h2 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401221441814.png" alt="image-20240122144030395"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401221500184.png" alt="image-20240122150000698"></p><h2 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2.while循环"></a>2.while循环</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401221744076.png" alt="image-20240122174442497"></p><h2 id="3-for-和while的区别"><a href="#3-for-和while的区别" class="headerlink" title="3.for 和while的区别"></a>3.for 和while的区别</h2><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401221802008.png" alt="image-20240122180223448"></p><h2 id="4-无限循环"><a href="#4-无限循环" class="headerlink" title="4.无限循环"></a>4.无限循环</h2><ul><li><h5 id="循环一直停不下来"><a href="#循环一直停不下来" class="headerlink" title="循环一直停不下来"></a>循环一直停不下来</h5></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401280844140.png" alt="image-20240128084420698"></p></li><li><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><h5 id="在无限循环的下面，不能再写其他代码了，因为循环永远停不下来，那么下面的代码永远执行不到"><a href="#在无限循环的下面，不能再写其他代码了，因为循环永远停不下来，那么下面的代码永远执行不到" class="headerlink" title="在无限循环的下面，不能再写其他代码了，因为循环永远停不下来，那么下面的代码永远执行不到"></a>在无限循环的下面，不能再写其他代码了，因为循环永远停不下来，那么下面的代码永远执行不到</h5></li></ul></li></ul><h2 id="5-跳转控制语句"><a href="#5-跳转控制语句" class="headerlink" title="5.跳转控制语句"></a>5.跳转控制语句</h2><ul><li><h4 id="1-continue-跳过本次循环-继续执行下次循环"><a href="#1-continue-跳过本次循环-继续执行下次循环" class="headerlink" title="1.continue:跳过本次循环,继续执行下次循环."></a>1.continue:跳过本次循环,继续执行下次循环.</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401280847565.png" alt="image-20240128084735154"></li></ul></li><li><h4 id="2-break-结束整个循环"><a href="#2-break-结束整个循环" class="headerlink" title="2. break:结束整个循环."></a>2. break:结束整个循环.</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401280848825.png" alt="image-20240128084810777"></li></ul></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、判断&quot;&gt;&lt;a href=&quot;#一、判断&quot; class=&quot;headerlink&quot; title=&quot;一、判断&quot;&gt;&lt;/a&gt;一、判断&lt;/h1&gt;&lt;h2 id=&quot;if语句&quot;&gt;&lt;a href=&quot;#if语句&quot; class=&quot;headerlink&quot; title=&quot;if语句&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>1.运算符以及类型转换</title>
    <link href="https://protonlml.github.io/2019/09/21/1.%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://protonlml.github.io/2019/09/21/1.%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2019-09-21T03:00:00.000Z</published>
    <updated>2024-06-15T06:14:52.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符"></a>一、算数运算符</h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211056825.png" alt="image-20240121012746097"></p><h1 id="二、类型转换"><a href="#二、类型转换" class="headerlink" title="二、类型转换"></a>二、类型转换</h1><h2 id="1-隐式转换"><a href="#1-隐式转换" class="headerlink" title="1.隐式转换"></a>1.隐式转换</h2><ul><li><h4 id="隐式转换的两种提升规则"><a href="#隐式转换的两种提升规则" class="headerlink" title="隐式转换的两种提升规则"></a>隐式转换的两种提升规则</h4><ul><li><h4 id="取值范围小的-和取值范围大的进行运算-小的会先提升为大的-再进行运算"><a href="#取值范围小的-和取值范围大的进行运算-小的会先提升为大的-再进行运算" class="headerlink" title="取值范围小的,和取值范围大的进行运算,小的会先提升为大的,再进行运算"></a>取值范围小的,和取值范围大的进行运算,小的会先提升为大的,再进行运算</h4></li></ul></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211056671.png" alt="image-20240120204114413"></p><ul><li><h4 id="byte-short-char三种类型的数据在运算的时候-都会直接先提升为int-然后再进行运算"><a href="#byte-short-char三种类型的数据在运算的时候-都会直接先提升为int-然后再进行运算" class="headerlink" title="byte short char三种类型的数据在运算的时候,都会直接先提升为int,然后再进行运算"></a>byte short char三种类型的数据在运算的时候,都会直接先提升为int,然后再进行运算</h4></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211056480.png" alt="image-20240120204141715"></p><h2 id="2-隐式转换小结"><a href="#2-隐式转换小结" class="headerlink" title="2.隐式转换小结"></a>2.隐式转换小结</h2><ul><li><h4 id="取值范围"><a href="#取值范围" class="headerlink" title="取值范围"></a>取值范围</h4><ul><li><h3 id="byte-short-int-long-float-double"><a href="#byte-short-int-long-float-double" class="headerlink" title="byte&gt;short&gt;int&gt;long&gt;float&gt;double"></a>byte&gt;short&gt;int&gt;long&gt;float&gt;double</h3></li></ul></li><li><h4 id="什么时候转换"><a href="#什么时候转换" class="headerlink" title="什么时候转换"></a>什么时候转换</h4><ul><li><h5 id="数据类型不一样，不能进行计算，需要转换成一样的才可以计算"><a href="#数据类型不一样，不能进行计算，需要转换成一样的才可以计算" class="headerlink" title="数据类型不一样，不能进行计算，需要转换成一样的才可以计算"></a>数据类型不一样，不能进行计算，需要转换成一样的才可以计算</h5></li></ul></li><li><h4 id="转换规则1："><a href="#转换规则1：" class="headerlink" title="转换规则1："></a>转换规则1：</h4><ul><li><h5 id="取值范围小的，和取值范围大的进行运算，小的会先提升为大的在进行计算"><a href="#取值范围小的，和取值范围大的进行运算，小的会先提升为大的在进行计算" class="headerlink" title="取值范围小的，和取值范围大的进行运算，小的会先提升为大的在进行计算"></a>取值范围小的，和取值范围大的进行运算，小的会先提升为大的在进行计算</h5></li></ul></li><li><h4 id="转换规则2"><a href="#转换规则2" class="headerlink" title="转换规则2"></a>转换规则2</h4><ul><li><h5 id="byte-short-char-三种类型的数据在运算的时候，都会直接提升为int-，然后再进行运算"><a href="#byte-short-char-三种类型的数据在运算的时候，都会直接提升为int-，然后再进行运算" class="headerlink" title="byte short char 三种类型的数据在运算的时候，都会直接提升为int ，然后再进行运算"></a>byte short char 三种类型的数据在运算的时候，都会直接提升为int ，然后再进行运算</h5></li></ul></li></ul><h1 id="三、强制转换"><a href="#三、强制转换" class="headerlink" title="三、强制转换"></a>三、强制转换</h1><ul><li><h4 id="如果把一个取值范围大的数值，赋值给取值范围小的变量。是不允许直接赋值的。如果一定要这么做就需要加入强制转换"><a href="#如果把一个取值范围大的数值，赋值给取值范围小的变量。是不允许直接赋值的。如果一定要这么做就需要加入强制转换" class="headerlink" title="如果把一个取值范围大的数值，赋值给取值范围小的变量。是不允许直接赋值的。如果一定要这么做就需要加入强制转换"></a>如果把一个取值范围大的数值，赋值给取值范围小的变量。是不允许直接赋值的。如果一定要这么做就需要加入强制转换</h4></li><li><h4 id="格式：目标数据类型-变量名-目标数据类型-被强转的数据"><a href="#格式：目标数据类型-变量名-目标数据类型-被强转的数据" class="headerlink" title="格式：目标数据类型  变量名&#x3D;(目标数据类型)被强转的数据"></a>格式：目标数据类型  变量名&#x3D;(目标数据类型)被强转的数据</h4><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057028.png" alt="image-20240120230848007"></li></ul></li></ul><h1 id="四、-加号运算符"><a href="#四、-加号运算符" class="headerlink" title="四、+ 加号运算符"></a>四、+ 加号运算符</h1><ul><li><h4 id="“字符-字符”当”-”操作中出现字符串时-这个”-”是字符串连接符-而不是算术运算符了-会将前后的数据进行拼接-并产生一个新的字符串"><a href="#“字符-字符”当”-”操作中出现字符串时-这个”-”是字符串连接符-而不是算术运算符了-会将前后的数据进行拼接-并产生一个新的字符串" class="headerlink" title="“字符+字符”当”+”操作中出现字符串时,这个”+”是字符串连接符,而不是算术运算符了.会将前后的数据进行拼接,并产生一个新的字符串."></a>“字符+字符”当”+”操作中出现字符串时,这个”+”是字符串连接符,而不是算术运算符了.会将前后的数据进行拼接,并产生一个新的字符串.</h4></li><li><h4 id="“字符-数字”时-会把字符通过ASC川码表查询到对应的数字再进行计算"><a href="#“字符-数字”时-会把字符通过ASC川码表查询到对应的数字再进行计算" class="headerlink" title="“字符+数字”时,会把字符通过ASC川码表查询到对应的数字再进行计算."></a>“字符+数字”时,会把字符通过ASC川码表查询到对应的数字再进行计算.</h4></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057440.png" alt="image-20240121013535929"></p><h1 id="五、自增自减运算符"><a href="#五、自增自减运算符" class="headerlink" title="五、自增自减运算符"></a>五、自增自减运算符</h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057825.png" alt="image-20240121065852600"></p><h1 id="六、赋值运算符"><a href="#六、赋值运算符" class="headerlink" title="六、赋值运算符"></a>六、赋值运算符</h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057368.png" alt="image-20240121065157935"></p><h1 id="七、关系运算符"><a href="#七、关系运算符" class="headerlink" title="七、关系运算符"></a>七、关系运算符</h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057248.png" alt="image-20240121070118200"></p><h1 id="八、逻辑运算符"><a href="#八、逻辑运算符" class="headerlink" title="八、逻辑运算符"></a>八、逻辑运算符</h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057213.png" alt="image-20240121070705195"></p><h1 id="九、短路逻辑运算符"><a href="#九、短路逻辑运算符" class="headerlink" title="九、短路逻辑运算符"></a>九、短路逻辑运算符</h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057140.png" alt="image-20240121071311449"></p><h1 id="十、三元运算符"><a href="#十、三元运算符" class="headerlink" title="十、三元运算符"></a>十、三元运算符</h1><ul><li><h5 id="条件（三元）运算符是-Java-唯一使用三个操作数的运算符：一个条件后跟一个问号（-），如果条件为-真值-，则执行冒号（-）前的表达式；若条件为-假值-，则执行最后的表达式。该运算符经常当作-if-else-语句的简捷形式来使用。"><a href="#条件（三元）运算符是-Java-唯一使用三个操作数的运算符：一个条件后跟一个问号（-），如果条件为-真值-，则执行冒号（-）前的表达式；若条件为-假值-，则执行最后的表达式。该运算符经常当作-if-else-语句的简捷形式来使用。" class="headerlink" title="条件（三元）运算符是 Java 唯一使用三个操作数的运算符：一个条件后跟一个问号（?），如果条件为[真值]，则执行冒号（:）前的表达式；若条件为[假值]，则执行最后的表达式。该运算符经常当作 [if...else]语句的简捷形式来使用。"></a><strong>条件（三元）运算符</strong>是 Java 唯一使用三个操作数的运算符：一个条件后跟一个问号（<code>?</code>），如果条件为[真值]，则执行冒号（<code>:</code>）前的表达式；若条件为[假值]，则执行最后的表达式。该运算符经常当作 [<code>if...else</code>]语句的简捷形式来使用。</h5></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057255.png" alt="image-20240121104511921"></p><h1 id="十一、运算符的优先级"><a href="#十一、运算符的优先级" class="headerlink" title="十一、运算符的优先级"></a>十一、运算符的优先级</h1><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401211057876.png" alt="image-20240121105137799"></p><ul><li><h4 id="只用记住一点“小括号-”优先于所有，想要先算谁，就用小括号将其括上"><a href="#只用记住一点“小括号-”优先于所有，想要先算谁，就用小括号将其括上" class="headerlink" title="只用记住一点“小括号( )”优先于所有，想要先算谁，就用小括号将其括上"></a>只用记住一点“小括号( )”优先于所有，想要先算谁，就用小括号将其括上</h4></li></ul><h1 id="十二、原码，反码，补码"><a href="#十二、原码，反码，补码" class="headerlink" title="十二、原码，反码，补码"></a>十二、原码，反码，补码</h1><ul><li><h3 id="计算机中，最小的存储单元是“一个字节”-它占8个bit位。范围从1000-0000-0111-1111-（-128-127）"><a href="#计算机中，最小的存储单元是“一个字节”-它占8个bit位。范围从1000-0000-0111-1111-（-128-127）" class="headerlink" title="计算机中，最小的存储单元是“一个字节” 它占8个bit位。范围从1000 0000 ~ 0111 1111 （-128~127）"></a>计算机中，最小的存储单元是“一个字节” 它占8个bit位。范围从1000 0000 ~ 0111 1111 （-128~127）</h3></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020428184.png" alt="image-20240602042820939"></p></li></ul><hr><hr><ul><li><h3 id="计算机中，数字的存储，以及运算都是以补码的形式来操作的。"><a href="#计算机中，数字的存储，以及运算都是以补码的形式来操作的。" class="headerlink" title="&#x3D;&#x3D;计算机中，数字的存储，以及运算都是以补码的形式来操作的。&#x3D;&#x3D;"></a>&#x3D;&#x3D;计算机中，数字的存储，以及运算都是以补码的形式来操作的。&#x3D;&#x3D;</h3></li></ul><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020435961.png" alt="image-20240602043525180"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020436514.png" alt="image-20240602043600718"></p><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020401711.png" alt="image-20240602040100232"></p><hr><hr><h2 id="理解了原码，反码，补码，的基本概念，就可以深入了解以下的内容了。"><a href="#理解了原码，反码，补码，的基本概念，就可以深入了解以下的内容了。" class="headerlink" title="理解了原码，反码，补码，的基本概念，就可以深入了解以下的内容了。"></a>理解了原码，反码，补码，的基本概念，就可以深入了解以下的内容了。</h2><ul><li><h3 id="1-理解同一个数字在不同数据类型下到底有什么区别呢？bit位"><a href="#1-理解同一个数字在不同数据类型下到底有什么区别呢？bit位" class="headerlink" title="1.理解同一个数字在不同数据类型下到底有什么区别呢？bit位"></a>1.理解同一个数字在不同数据类型下到底有什么区别呢？<code>bit位</code></h3><ul><li><h3 id="就是在前面的位置“补0”"><a href="#就是在前面的位置“补0”" class="headerlink" title="&#x3D;&#x3D;就是在前面的位置“补0”&#x3D;&#x3D;"></a>&#x3D;&#x3D;就是在前面的位置“补0”&#x3D;&#x3D;</h3></li><li><p><img src="C:\working\blog\source_posts\1.运算符以及类型转换.assets\image-20240602041043730.png" alt="image-20240602041043730"></p></li></ul></li><li><h3 id="2-理解隐式转换"><a href="#2-理解隐式转换" class="headerlink" title="2.理解隐式转换"></a>2.理解隐式转换</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020444498.png" alt="image-20240602044434274"></li></ul></li><li><h3 id="3-理解强制转换"><a href="#3-理解强制转换" class="headerlink" title="3.理解强制转换"></a>3.理解强制转换</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020446114.png" alt="image-20240602044628663"></li></ul></li><li><h3 id="4-理解数字之间使用“运算符”"><a href="#4-理解数字之间使用“运算符”" class="headerlink" title="4.理解数字之间使用“运算符”"></a>4.理解数字之间使用“运算符”</h3><ul><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020449610.png" alt="image-20240602044939604"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020451752.png" alt="image-20240602045155833"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020452021.png" alt="image-20240602045233086"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020501554.png" alt="image-20240602050127832"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020504900.png" alt="image-20240602050435241"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202406020508744.png" alt="image-20240602050812934"></li></ul></li></ul><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、算数运算符&quot;&gt;&lt;a href=&quot;#一、算数运算符&quot; class=&quot;headerlink&quot; title=&quot;一、算数运算符&quot;&gt;&lt;/a&gt;一、算数运算符&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/lmlpla/blogimages/raw/</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="运算符" scheme="https://protonlml.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexo博文加密密码是hello</title>
    <link href="https://protonlml.github.io/2019/09/20/hexo%E5%8D%9A%E6%96%87%E5%8A%A0%E5%AF%86/"/>
    <id>https://protonlml.github.io/2019/09/20/hexo%E5%8D%9A%E6%96%87%E5%8A%A0%E5%AF%86/</id>
    <published>2019-09-20T03:46:00.000Z</published>
    <updated>2024-06-15T06:14:53.106Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="352dd88a57e2f79ea0a6cf21ea464307fa4ff2aa6f1034fdd3fef2936714a6ac"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="博客相关" scheme="https://protonlml.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://protonlml.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
