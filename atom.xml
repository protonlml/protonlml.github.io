<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://protonlml.github.io/atom.xml" rel="self"/>
  
  <link href="https://protonlml.github.io/"/>
  <updated>2024-07-23T14:06:32.241Z</updated>
  <id>https://protonlml.github.io/</id>
  
  <author>
    <name>𝚲𝚳𝚲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>悬挂年兽 喜增龙年</title>
    <link href="https://protonlml.github.io/2024/01/01/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%8C%82%E5%B9%B4%E5%85%BD/"/>
    <id>https://protonlml.github.io/2024/01/01/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%8C%82%E5%B9%B4%E5%85%BD/</id>
    <published>2024-01-01T03:00:00.000Z</published>
    <updated>2024-07-23T14:06:32.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码"><a href="#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码" class="headerlink" title="换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码"></a>换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码</h1><ul><li><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>这篇文章介绍了一个在博客网站右上角添加悬挂年兽的方法。通过在CSS代码中插入相应的素材链接，可以实现在网站右上角挂上一个龙的效果。对于自定义主题的网站，可以将相关的CSS和HTML代码添加到自定义头部中。对于全屏网站，建议在CSS代码的16行左右插入一行代码以实现相应效果。</li></ul></li></ul><h1 id="一、简介-教程"><a href="#一、简介-教程" class="headerlink" title="一、简介-教程"></a>一、简介-教程</h1><blockquote><p>换新颜新气象，给网站右上角挂一个龙，吸吸龙气</p><p>css第6行放入下面素材链接（本站开了防盗所以给你也无用就放下面了）</p><p>如果你的主题是自定义，那就是主题设置自定义里面</p><p>自定义css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">850px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.NewYear</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://img.ly522.com/LY/uploads/2023/12/longgyaj.gif</span>) no-repeat <span class="number">50%</span>/<span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">85.8%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">50</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">animation</span>: new-year <span class="number">1.2s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">        <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@keyframes</span> new-year&#123;</span><br><span class="line">      <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="number">100%</span>&#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">10deg</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="html放到你的自定义头部html即可！！"><a href="#html放到你的自定义头部html即可！！" class="headerlink" title="html放到你的自定义头部html即可！！"></a>html放到你的自定义头部html即可！！</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;NewYear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：如果你的是全屏网站建议在pointer-events: none;下面加一行。即css代码16行左右哪里加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">999</span>;</span><br></pre></td></tr></table></figure><blockquote><h3 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h3></blockquote><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160941751.png" alt="image-20240118020305488"></p><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div><p>​     </p></escape>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot;&gt;&lt;a href=&quot;#换新颜给博客网站右上角添加悬挂年兽-喜增龙年喜气源码&quot; class=&quot;headerlink&quot; title=&quot;换新颜给博客网站右上角添加悬挂年兽 喜增龙年喜气源码&quot;&gt;&lt;/a&gt;换新颜给博客网站</summary>
      
    
    
    
    <category term="博客相关" scheme="https://protonlml.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://protonlml.github.io/tags/Hexo/"/>
    
    <category term="Pure主题" scheme="https://protonlml.github.io/tags/Pure%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>matery主题的使用</title>
    <link href="https://protonlml.github.io/2020/03/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://protonlml.github.io/2020/03/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-17T03:00:00.000Z</published>
    <updated>2024-06-16T02:11:38.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matery主题的使用"><a href="#matery主题的使用" class="headerlink" title="matery主题的使用"></a>matery主题的使用</h1><h1 id="一、下载matery主题"><a href="#一、下载matery主题" class="headerlink" title="一、下载matery主题"></a>一、下载matery主题</h1><ul><li><h3 id="1-GitHub源项目"><a href="#1-GitHub源项目" class="headerlink" title="1.GitHub源项目"></a>1.GitHub源项目</h3></li><li><p><a href="https://github.com/blinkfox/hexo-theme-matery">GitHub - blinkfox&#x2F;hexo-theme-matery: 一个基于材料设计和响应式设计而成的全面、美观的Hexo主题。</a></p></li><li><h3 id="2-在本地clone下来"><a href="#2-在本地clone下来" class="headerlink" title="2.在本地clone下来"></a>2.在本地clone下来</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/blinkfox/hexo-theme-matery.git</span></span><br></pre></td></tr></table></figure><h1 id="二、配置hexo根yml文件"><a href="#二、配置hexo根yml文件" class="headerlink" title="二、配置hexo根yml文件"></a>二、配置hexo根yml文件</h1><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011622.png" alt="image-20240112005024106"></li></ul><h1 id="三、自定义主题"><a href="#三、自定义主题" class="headerlink" title="三、自定义主题"></a>三、自定义主题</h1><ul><li><h3 id="1-修改导航名称和路径图标"><a href="#1-修改导航名称和路径图标" class="headerlink" title="1.修改导航名称和路径图标"></a>1.修改导航名称和路径图标</h3><ul><li><h5 id="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"><a href="#添加导航二级菜单的写法（如下是“关于”一级菜单修改）" class="headerlink" title="添加导航二级菜单的写法（如下是“关于”一级菜单修改）"></a>添加导航二级菜单的写法（如下是“关于”一级菜单修改）</h5></li><li><p>注意：1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) </p></li><li><p>​             2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找  ,线上的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">About:</span><br><span class="line">   url: /about</span><br><span class="line">   # icon: fas fa-user-circle 注释掉原来的，加上下面这一段</span><br><span class="line">   icon: fas fa-list</span><br><span class="line">   children:</span><br><span class="line">     - name: 爱的颜色</span><br><span class="line">       url: /love</span><br><span class="line">       icon: fas fa-heart</span><br><span class="line">     - name: 生日快乐</span><br><span class="line">       url: /birthday</span><br><span class="line">       icon: fas fa-cake</span><br></pre></td></tr></table></figure></li><li><h3 id="2-手机二级菜单配置"><a href="#2-手机二级菜单配置" class="headerlink" title="2.手机二级菜单配置"></a>2.手机二级菜单配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navMenu:</span></span><br><span class="line">  <span class="attr">mleft:</span> <span class="literal">true</span>    <span class="comment">#  二级侧栏子菜单是否对齐左边</span></span><br><span class="line">  <span class="attr">bgColor:</span> <span class="string">&quot; &quot;</span>   <span class="comment">#  二级侧栏子菜单背景颜色,留空即为全局背景色</span></span><br></pre></td></tr></table></figure></li><li><h3 id="3-首页中间右侧-banner"><a href="#3-首页中间右侧-banner" class="headerlink" title="3.首页中间右侧 banner"></a>3.首页中间右侧 banner</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubLink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>                                   <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/sitoi/sitoi.github.io</span>  <span class="comment"># GitHub 仓库地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Fork</span> <span class="string">Me</span>                                 <span class="comment"># 显示文字</span></span><br></pre></td></tr></table></figure></li><li><h3 id="4-首页轮播图相关配置"><a href="#4-首页轮播图相关配置" class="headerlink" title="4.首页轮播图相关配置"></a>4.首页轮播图相关配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">showPrevNext:</span> <span class="literal">false</span>     <span class="comment"># 是否显示左右切换按钮</span></span><br><span class="line">  <span class="attr">showIndicators:</span> <span class="literal">false</span>   <span class="comment"># 是否显示指示器</span></span><br><span class="line">  <span class="attr">autoLoop:</span> <span class="literal">false</span>         <span class="comment"># 是否自动轮播</span></span><br><span class="line">  <span class="attr">duration:</span> <span class="number">120</span>           <span class="comment"># 切换延迟时间，默认单位 秒</span></span><br><span class="line">  <span class="attr">intervalTime:</span> <span class="number">5000</span>      <span class="comment"># 自动切换下一张的间隔时间</span></span><br></pre></td></tr></table></figure></li></ul><p>参考：</p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 (blinkfox.github.io)</a></p><p><a href="https://sitoi.cn/posts/63466.html">基于 Hexo GitHub 从零开始搭建个人博客（三）：Matery 主题（DIY 版）详细配置教程，附博客源码 | Sitoi</a></p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-23">(๑•̀ㅂ•́) ✧被发现了～ (sunhwee.com)</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;matery主题的使用&quot;&gt;&lt;a href=&quot;#matery主题的使用&quot; class=&quot;headerlink&quot; title=&quot;matery主题的使用&quot;&gt;&lt;/a&gt;matery主题的使用&lt;/h1&gt;&lt;h1 id=&quot;一、下载matery主题&quot;&gt;&lt;a href=&quot;#一、下载m</summary>
      
    
    
    
    <category term="博客相关" scheme="https://protonlml.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Hexo" scheme="https://protonlml.github.io/tags/Hexo/"/>
    
    <category term="matery主题" scheme="https://protonlml.github.io/tags/matery%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>3.git初始化仓库的两种方式</title>
    <link href="https://protonlml.github.io/2019/10/10/%E7%BB%8F%E9%AA%8C/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://protonlml.github.io/2019/10/10/%E7%BB%8F%E9%AA%8C/3.git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2019-10-10T06:00:00.000Z</published>
    <updated>2024-06-16T15:09:12.803Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="18efc1a31e720ab02598fb6a932f2a08adbdb62be9a37ca7977b429a9cc4024a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="经验" scheme="https://protonlml.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="经验" scheme="https://protonlml.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://protonlml.github.io/2019/10/10/java%E5%9F%BA%E7%A1%80/Maven/"/>
    <id>https://protonlml.github.io/2019/10/10/java%E5%9F%BA%E7%A1%80/Maven/</id>
    <published>2019-10-10T03:00:00.000Z</published>
    <updated>2024-06-16T02:15:54.402Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Maven</center></h1><h2 id="一、Maven的一些理解"><a href="#一、Maven的一些理解" class="headerlink" title="一、Maven的一些理解"></a>一、Maven的一些理解</h2><ul><li>1.项目的构建，是指项目的“打包”，“编译”，“部署”，“运行”等一系列操作。 </li><li>2.用Maven就可以使我们的项目，能够自动化构建。 </li><li>3.maven是java项目的自动化构建工具。   </li><li>4.Maven可以，将一个大型的项目的不同功能，拆分成多个模块，分别进行开发管理。 </li><li>5.Maven可以，通过配置poom文件，来导入某个技术的jar包，同时会自动的导入这个jar包的相关依赖jar包。</li></ul><h2 id="二、Maven程序的执行原理"><a href="#二、Maven程序的执行原理" class="headerlink" title="二、Maven程序的执行原理"></a>二、Maven程序的执行原理</h2><ol><li><p>maven核心程序指的是，解压后的maven程序目录。也是maven软件的目录里面的内容。</p></li><li><p>Maven在自动构建项目的时候，使用插件会在本地仓库中找，使用依赖jar包也在本地仓库中找。本地找不到就到中央仓库中下载。 </p></li><li><p>怎么使用maven？（不用开发工具）</p><ol><li>创建一个maven规定的项目目录结构，在有poom.xml文件的目录下面，执行maven命令</li><li>当我们执行的Maven命令需要用到某些插件的时候，Maven核心程序会首先到本地仓库中查找</li><li>本地仓库的默认位置：[系统当前用户的家目录].m2\repository(Maven找插件的时候，自动创建)</li><li>Maven核心程序如果在本地仓库中找不到需要的插件的时候，那么它会自动联网，到中央仓库中下载。</li></ol></li><li><p>Maven的生命周期就是指的是“项目的构建过程”，项目的构建是有顺序的，执行的任何一个Maven命令都是从生命周期的头开始。</p></li><li><p>Maven构建项目完成之后，生成的“产品”就放在“项目src所在目录”中的“target”目录中。</p></li><li><p>Pom</p><ol><li>【1】含义：project Object Model 项目对象模型。</li><li>pom.xml对于Maven工程师核心配置文件，与构建过程相关的一切设置都在这个文件中进行</li></ol></li><li><p>Maven坐标类比一下：</p><ol><li><p>数学中可以用（x,yz）三个项量来确定一个空间的点。</p></li><li><p>Maven的pom文件中，也是使用三个项量，来在仓库中唯一定位一个Maven工程</p><ul><li>[1]：<strong>g</strong>roupid：公司或组织域名倒序+项目名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;cn.itcast&lt;/groupId&gt;</span><br></pre></td></tr></table></figure><ul><li>[2]：<strong>a</strong>rtifactid：模块名 </li><li>[3]：<strong>v</strong>ersion：版本<ul><li>只要讲“<strong>gav</strong>”就讲的是Maven的坐标。</li></ul></li><li>[4] :Maven工程的坐标与仓库中的路径对应关系。<ul><li>在Maven仓库里面。每一个Maven工程，他的坐标一定是不重复的，即标识了这个Maven工程信息，同时也决定了他在仓库中存放的目录是什么。</li></ul></li></ul></li></ol></li><li><p>仓库中保存的内容：宽泛的说就是（Maven工程项目）  </p><ul><li>主要有3大块：<ul><li>-[1]：Maven核心软件，自身所需要的一些插件</li><li>[2]：第三方框架或工具的jar包(其实就是第三方项目，打成了jar包)</li><li>[3]：我们自己开发的工程。Maven将“插件”、“框架jar包”、“我们自己的项目”都用统一的目录结构，放在了仓库中，这样就方便Maven核心程序的管理和使用。</li></ul></li></ul></li><li><p>pom.xml文件解析。</p><ul><li>创建的Maven项目中有pom.xml文件，他是Maven项目的核心配置文件。<ul><li>【1】.除了上面三个坐标用来，定位当前项目用Maven核心程序安装在仓库中的位置。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011049.png" alt="Image"></li><li>2】.中间部分是“依赖部分”，就是指当前项目，所使用的到的“其他模块项目和jar包”，在Maven仓库中的坐标。如果仓库中没有指定的依赖jar包，就会自动从私服上面下载，私服上面没有就会到中央仓库中下载。<ul><li>但是如果当前项目，用到我们自己写的模块，这时候就需要将，要使用的模块项目给“安装”到仓库中，用“ mvn install”命令进行安装。是不可能从网上下载的，因为这是我们自己写的，不是第三方jar包项目。这样我们就可以将一个大的项目，进行拆分成很多小的模块，然后各个模块之间用“依赖坐标”，来互相关联。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011083.png" alt="Image"></li></ul></li><li>【3】最下面是“插件”部分。<ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011313.png" alt="Image"></li></ul></li></ul></li></ul></li><li><p>依赖</p><ol><li>①Maven解析依赖信息时会到本地仓库中查找被依赖的jar包。<ul><li>对于我们自己开发的Maven工程，使用mvn install命令安装后就可以进入仓库。</li></ul></li><li>②依赖的范围<ul><li>【1】在pom.xml文件中<scope>依赖的范围</scope></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012747.png" alt="Image"></li><li>依赖的范围一般常用的有三个：compile，test、provided三个。</li><li>依赖范围：意思就是，当前项目所依赖的这个“依赖”，在编译，测试，打包。过程当中时候有效。<ul><li>[1]compile范围的“依赖”（编译范围）</li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：参与</li><li>是否 参与部署：参与</li><li>[2]test范围的“依赖”（测试范围）</li><li>对主程序是否有效：无效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：“junit依赖”它就是测试依赖，这个jar包，不参与打包，在主程序中没有。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012081.png" alt="Image"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012133.png" alt="Image"></li><li>[3]provided范围的“依赖”，通常是为web工程来添加的（不参与部署的范围）。<ul><li>说明只要加了provided范围的“依赖”，web容器中都有。比如：servlet的这个依赖，部署的时候就不需要，因为Tomcat服务器本身就有servlet的jar包。</li></ul></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012653.png" alt="Image"></li><li>对主程序是否有效：有效</li><li>对测试程序是否有效：有效</li><li>是否参与打包：不参与</li><li>是否参与部署：不参与</li><li>典型例子：servlet-api.jar</li></ul></li></ul></li></ol></li><li><p>maven命令是什么？</p><ul><li>maven这个程序，用来构建项目所使用的命令。（这些命令的顺序，就是生命周期的顺序）</li><li>比如【1】清理：mvn clean</li><li>【2】：编译主程序：mvn compile</li><li>【3】：编译测试程序：mvn test-compile</li><li>【4】：执行测试：mvn test</li><li>【5】：打包：mvn package</li><li>【6】：安装：mvn install</li><li>【7】：生成站点：mvn site这些命令，构成了Maven构建项目时的，不同生命周期，</li></ul></li><li><p>12.Maven的生命周期</p><ul><li>【1】意思：就是Maven构建项目的的，各个构建环节执行的顺序。：不能打乱顺序，必须按照既定的正确顺序来执行，是生命周期的各个阶段的命令来实现的。</li><li>【2】生命周期是在Maven的核心程序中定义了，抽象的生命周期。 生命周期中各个阶段的具体任务是由插件来完成的。</li><li>【3】有三套独立的生命周期：<ul><li>①Clean Lifecycle（清理生命周期）在进行，在真正的构建一个项目之前，必须先进行一些清理工作。</li><li>②Default lifecycle（默认的生命周期）构建的核心部分，编译，测试，打包，安装，部署等等。</li><li>③Site Lifecycle（生成站点生命周期）生成项目报告，站点，发布站点。</li></ul></li><li>【4】每个生命周期的具体实现<ul><li>比如：只执行“mvn clean 清理命令”就会进行清理生命周期。</li><li>执行“mvn install 安装命令”就会进行Maven构建项目的默认生命周期，此时Maven核心程序，会从头开始执行“clean清理”,“compile 编译”，“test-compile 编译测试”，“test 执行测试”，“package 打包”，“install 安装”这一系列的过程。</li><li>执行“site 生成站点”，也会从头开始，将所有过程进行一边。这是生成站点生命周期</li><li>Maven核心程序为了更好的实现自动化构建，按照这一的特点执行生命周期中的各个阶段：不论现在要执行生命周期中的哪一个阶段，都是从这个生命周期最初的位置开始执行。</li></ul></li><li>【5】生命周期的各个阶段仅仅定义了要执行的任务是什么（命令）完成这个命令，是由特定的Maven插件来完成的。<ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012162.png" alt="Image"></li></ul></li></ul></li><li><p>创建Maven工程之前，需要将IDEA编辑器，和本地下载的Maven程序，进行关联配置。具体操作，见文末。</p></li></ol><hr><hr><h2 id="三、使用IDEA创建普通的javaMaven工程"><a href="#三、使用IDEA创建普通的javaMaven工程" class="headerlink" title="三、使用IDEA创建普通的javaMaven工程"></a>三、使用IDEA创建普通的javaMaven工程</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012762.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012115.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161012201.png" alt="Image"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013282.png" alt="Image"></p><h2 id="四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）"><a href="#四、-使用IDEA创建webMaven工程（Maven要聚合模块的做法）" class="headerlink" title="四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）"></a>四、.使用IDEA创建webMaven工程（Maven要聚合模块的做法）</h2><ul><li><p>【1】必须先创建一个空的工程。在空的工程中添加模块。（每次添加模块都要使用快捷键“ctrl+alt+shift+s”来调出<strong>Project Structure窗口，在这个窗口中添加模块，不能直接在模块上面右键添加模块。（在模块上右键模块会添加到“模块里面”）</strong>）</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013762.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013442.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013622.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013162.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161013194.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014349.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014424.png" alt="Image"></p></li><li><h3 id="【标准的Maven工程，分模块的大型web项目，目录结构】"><a href="#【标准的Maven工程，分模块的大型web项目，目录结构】" class="headerlink" title="【标准的Maven工程，分模块的大型web项目，目录结构】"></a>【标准的Maven工程，分模块的大型web项目，目录结构】</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014593.png" alt="Image"></p></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><h5 id="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"><a href="#我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。" class="headerlink" title="我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。"></a>我们在用Maven程序，在开发web项目的时候，可以将一个大型的web项目拆分成多个“模块项目”，然后如果模块之间要相互使用的话，就要在pom文件中，添加一个指定“模块依赖坐标”就可以使用了，但是此时模块项目并没有安装到“仓库当中”，开发过程相互调用没有问题。但是如果部署运行的话就要在Maven仓库中安装。不过这个安装步骤不用我们做了，在我们开发完程序后，进行部署运行的时候，Maven程序会自动将所需要的“模块依赖”安装到仓库中。</h5></li></ul><h2 id="五、依赖"><a href="#五、依赖" class="headerlink" title="五、依赖"></a>五、依赖</h2><ul><li><h3 id="依赖的传递性："><a href="#依赖的传递性：" class="headerlink" title="依赖的传递性："></a>依赖的传递性：</h3><ul><li>【1】依赖的传递性是指，如果在一个大型的项目当中，各个模块相互依赖，那么在“最下面的模块（依赖关系最下面，这个模块只是被依赖，不去依赖别的模块）”中，pom.xml文件里面，配置的<strong>compile</strong>”范围的依赖jar包，其他模块的pom.xml文件虽然没有声明一样的<strong>compile</strong>”范围的依赖jar包，但是也可以使用这个依赖。</li><li>【2】前提是“<strong>compile</strong>”范围的依赖才能传递，“<strong>test</strong>”“<strong>provided</strong>”范围的依赖不能传递。所以在各个工程模块中，能够传递的依赖，只在“最下面”模块中声明一次就可以了，不能够传递的“<strong>test</strong>”“<strong>provided</strong>”范围的依赖就得各个模块中重复声明依赖。比如：servlet的依赖，他就是“provided范围的模块”，需要在每一个项目模块pom.xml文件中，都要重复声明。</li><li>【3】我们在开发项目的时候，会有一个专门的模块来负责维护这些框架jar包的依赖信息的。在这个模块中，全部都写“<strong>compile</strong>”范围的依赖”，让其他功能模块，来依赖这个“专门模块”，就可以实现“<strong>compile</strong>”范围的依赖”通用。</li><li>【4】子类继承了父类模块，也可以实现依赖传递，默认就是依赖的，不需要再在子类中，重新声明依赖父类，只在子类中声明父类就可以了。</li></ul></li><li><h3 id="依赖的排除："><a href="#依赖的排除：" class="headerlink" title="依赖的排除："></a>依赖的排除：</h3><ul><li>依赖的排除，在哪个工程里面排除的，就在哪个工程里面生效。</li><li>【1】当我们导入某些依赖jar包的时候，Maven会自动将这个jar的其他依赖jar包也一起导入到工程当中，这个时候，如果不需要这个额外的jar包，就可以用“排除依赖”来进行排除。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014762.png" alt="Image"></li><li>【2】找到要排除的依赖的ID（假如spring-jcl依赖要被排除）</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014723.png" alt="Image"></li><li>3】添加<exclusions> </exclusions>标签</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161014062.png" alt="Image"></li></ul></li><li><h3 id="依赖原则："><a href="#依赖原则：" class="headerlink" title="依赖原则："></a>依赖原则：</h3><ul><li><h4 id="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"><a href="#解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）" class="headerlink" title="解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）"></a>解决的是依赖“jar包”冲突的问题。（Maven中内置的一个原则，我们也改变不了，发生jar包冲突的时候，Maven会自动的将冲突解决）</h4></li><li><p>前提是因为“依赖的传递性”导致的jar包冲突问题。</p></li><li><p>冲突情景：</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015782.png" alt="Image"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401281057892.png" alt="Image"></p></li><li><p><strong>properties标签</strong>配合自定义标签声明数据的配置并。(可以利用这个标签，实现在一个页面上，同种类型的框架jar包，版本号相同，)在父模块中就更简便了</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015754.png" alt="Image"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015765.png" alt="Image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span> <span class="comment">&lt;!--不是只能用于声明依赖的版本号。凡是需要统一声明后再引用的场合都可以使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-core依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="六、Mavne继承（pom文件的继承）"><a href="#六、Mavne继承（pom文件的继承）" class="headerlink" title="六、Mavne继承（pom文件的继承）"></a>六、Mavne继承（pom文件的继承）</h2><ul><li><p>存在的问题：我们都知道在一个“模块项目1”中配置了“<strong>compile</strong>”范围的依赖jar包”，“其他模块项目”来依赖这个“模块项目1”的时候，“其他模块项目”中会自动的存在了“项目模块1的”“<strong>compile</strong>”范围的依赖jar包”。这是依赖的传递性。只用在“模块项目1”中声明一份就可以了。</p></li><li><p>但是：如果是““<strong>test</strong>”“<strong>provided</strong>”范围的依赖是不能传递的”，需要在每一个模块中都要，重复的手动添加““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”，比如“junit依赖”，他就是“test范围的依赖”。（不能够传递的依赖，他就是零散的分散在各个模块当中，就很容易造成各个模块工程之间的版本不一致）。</p></li><li><p>这就存在一个问题，开发一个大型项目的时候，各个模块是不同开发组来开发的，使用“junit这种依赖”的时候，可能版本号就会不相同，导致各个模块之间不统一。</p></li><li><p>解决办法：使用Maven的继承，统一成同一个版本。（以junit依赖为例）</p></li><li><p>【1】专门创建一个模块是所有模块的“父模块”，可以用作““<strong>compile</strong>”范围的依赖jar包”传递依赖。也可以用作““<strong>test</strong>”“<strong>provided</strong>”范围的依赖”的版本管理。</p></li><li><p>【2】解决思路：将junit依赖统一提取到“父”工程中，在子工程中声明junit依赖时不指定版本，以父工程中统一设定的为准。同时也便于修改。</p></li><li><p>【3】操作步骤  [1]创建一个Maven工程作为父工程。注意：打包的方式pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015851.png" alt="Image"></p></li><li><p>[2]在子工程中声明对父工程的引用（认干爹的一个仪式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子工程中声明父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlml.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--以当前pom文件为基准的,找父工程pom.xml文件的相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[3]在父工程中统一管理junit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理，这里专门用来管理，不能够传递的依赖，进行版本号控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- junit是“test”范围的依赖，不能够传递，在这里面统一管理版本号--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[4]在子工程中删除junit依赖的版本号部分 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;version&gt;4.11&lt;/version&gt;--&gt;</span> 删除掉</span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>[5]实现效果</p><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015552.png" alt="Image"></li></ul></li><li><p>[6]：父模块的Pom.xml文件的配置。</p><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161015722.png" alt="Image"></li></ul></li></ul><h2 id="七、Maven的聚合："><a href="#七、Maven的聚合：" class="headerlink" title="七、Maven的聚合："></a>七、Maven的聚合：</h2><ul><li><p>（聚合就是Maven中，各个模块的一键安装。）</p></li><li><p>注意：配置了继承的模块，在执行安装命令（ install）的时候，要先安装 “父模块”再安装其他模块才能成功。</p></li><li><p>Maven中的一件安装，就可以自动的按顺序，将每个模块都按依赖顺序进行安装。</p></li><li><p>实现一件安装步骤：</p><ul><li><p>【1】创建一个“总的聚合工程”，（一般把“父模块”作为“总的聚合工程”，大的情况下也是将，聚合的配置，也配在父模块内）</p></li><li><p>【2】在一个”总的聚合工程”的pom.xml文件中，配置各个參与聚合的模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置聚合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--指定各个子工程的相对路径--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hellow<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">module</span>&gt;</span>../HellowFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="八、Maven仓库地址"><a href="#八、Maven仓库地址" class="headerlink" title="八、Maven仓库地址"></a>八、Maven仓库地址</h2><ul><li><a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a></li><li><a href="https://developer.aliyun.com/mvn/search">仓库服务 (aliyun.com)</a></li></ul><h2 id="九、IDEA中Maven配置"><a href="#九、IDEA中Maven配置" class="headerlink" title="九、IDEA中Maven配置"></a>九、IDEA中Maven配置</h2><p><a href="https://www.jb51.net/article/259780.htm">IDEA配置Maven的超详细步骤_java_脚本之家 (jb51.net)</a></p><p><a href="https://blog.csdn.net/qq_42057154/article/details/106114515">IDEA配置Maven（详细版）_idea maven-CSDN博客</a></p><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Maven&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、Maven的一些理解&quot;&gt;&lt;a href=&quot;#一、Maven的一些理解&quot; class=&quot;headerlink&quot; title=&quot;一、Maven的一些理解&quot;&gt;&lt;/a&gt;一、Maven的一些理解&lt;/h2&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    <category term="maven" scheme="https://protonlml.github.io/categories/java/maven/"/>
    
    
    <category term="maven" scheme="https://protonlml.github.io/tags/maven/"/>
    
    <category term="项目自动化构建工具" scheme="https://protonlml.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>6.mysql第09章子查询</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/6.mysql%E7%AC%AC09%E7%AB%A0%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/6.mysql%E7%AC%AC09%E7%AB%A0%E5%AD%90%E6%9F%A5%E8%AF%A2/</id>
    <published>2019-10-03T06:00:00.000Z</published>
    <updated>2024-10-23T17:42:24.019Z</updated>
    
    <content type="html"><![CDATA[<h1><center>子查询</center></h1><h3 id="一、子查询"><a href="#一、子查询" class="headerlink" title="一、子查询"></a>一、子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  子查询:</span><br><span class="line"> */</span><br><span class="line"># 需求：员工表中，比Abel的工资高的都有那些</span><br><span class="line"></span><br><span class="line">select last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;(select salary</span><br><span class="line">              from employees</span><br><span class="line">              where last_name=&#x27;Abel&#x27;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  子查询的分类</span><br><span class="line">  我们按内查询的结果返回一条还是多条记录,将子查询分为 单行子查询 、 多行子查询 。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    单行子查询：</span><br><span class="line">  因为，单行子查询的返回结果，只有一行，就一个值，所以可使用 = &gt; &gt;= &lt; &lt;= &lt;&gt; 进行比较操作</span><br><span class="line">  例如：</span><br><span class="line">  题目:查询工资大于149号员工工资的员工的信息</span><br><span class="line"> */</span><br><span class="line">select last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;(</span><br><span class="line">    select salary from employees where employee_id=&#x27;149&#x27; #10500</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"># 题目:返回job_id与141号员工相同,salary比143号员工多的员工姓名,job_id和工资</span><br><span class="line"></span><br><span class="line">select  last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where job_id=(select job_id from employees where employee_id=&#x27;141&#x27;)</span><br><span class="line">and salary&gt;(select salary from employees where employee_id=&#x27;141&#x27;);</span><br><span class="line"></span><br><span class="line"># 题目:返回公司工资最少的员工的last_name,job_id和salary</span><br><span class="line">select last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary=(</span><br><span class="line">    select min(salary) from employees</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"># 题目:查询与141号或174号员工的manager_id和department_id相同的其他员工的employee_id, manager_id,department_id</span><br><span class="line">select employee_id,manager_id,department_id</span><br><span class="line">from employees</span><br><span class="line">where manager_id in (select  manager_id from employees where employee_id in(141,174))</span><br><span class="line">and department_id in (select  department_id from employees where employee_id in(141,174))</span><br><span class="line">and employee_id not in (141,174);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   HAVING 中的子查询</span><br><span class="line">    首先执行子查询。</span><br><span class="line">    向主查询中的HAVING 子句返回结果。</span><br><span class="line"> */</span><br><span class="line"># 题目:查询最低工资</span><br><span class="line"># 大于 50号部门最低工资</span><br><span class="line"># 的部门 id和其最低工资</span><br><span class="line">select  department_id,min(salary)</span><br><span class="line">from employees e</span><br><span class="line">group by department_id</span><br><span class="line">having min(salary) &gt; (</span><br><span class="line">                select min(salary)</span><br><span class="line">                from employees</span><br><span class="line">                where department_id=50</span><br><span class="line">                group by department_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   CASE中的子查询</span><br><span class="line">    在CASE表达式中使用单列子查询:</span><br><span class="line"> */</span><br><span class="line">#</span><br><span class="line"># 题目:显式员工的 employee_id,last_name和location。</span><br><span class="line"># 其中,若员工department_id</span><br><span class="line"># 与   location_id为1800 的department_id相同,20</span><br><span class="line"># 则location为’Canada’,其余则为’USA’。</span><br><span class="line"></span><br><span class="line">select employee_id,last_name, (case department_id</span><br><span class="line">                                when (</span><br><span class="line">                                    select department_id from departments</span><br><span class="line">                                    where location_id=1800</span><br><span class="line">                                    ) then &#x27;Canada&#x27;</span><br><span class="line">                                else &#x27;USA&#x27; end ) location</span><br><span class="line"></span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*-------------------------------------------------------------------------------------------------------*/</span><br><span class="line">/**</span><br><span class="line">  多行子查询</span><br><span class="line">   子查询的结果，是多行的，所以使用多行比较操作符</span><br><span class="line">多行比较操作符</span><br><span class="line">    in 等于列表中的任意一个</span><br><span class="line">    ANY 需要和单行比较操作符一起使用,和子查询返回的某一个值比较</span><br><span class="line">    ALL 需要和单行比较操作符一起使用,和子查询返回的所有值比较</span><br><span class="line">    SOME 实际上是ANY的别名,作用相同,一般常使用ANY</span><br><span class="line"> */</span><br><span class="line"># 题目:返回</span><br><span class="line"># 其它job_id中比   job_id为‘IT_PROG’部门 任一工资低</span><br><span class="line"># 的 员工的员工号、姓名、job_id 以及salary</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># select d.department_id,e.salary</span><br><span class="line"># from employees e join departments d</span><br><span class="line">#     on e.department_id=d.department_id</span><br><span class="line"># where e.job_id=&#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select employee_id,last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&lt; any(</span><br><span class="line">    select salary from employees where job_id=&#x27;IT_PROG&#x27;</span><br><span class="line">    )</span><br><span class="line">and job_id &lt;&gt; &#x27;IT_PROG&#x27;;</span><br><span class="line"></span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 题目:查询平均工资最低的部门id</span><br><span class="line"># 将 虚拟表。作为 from后面的表进行查询</span><br><span class="line"># 查询了员工所在的所有部门的 平均工资</span><br><span class="line">select department_id,avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 平均工资最低是多少</span><br><span class="line">select  min(t_dep_gr_avgsalary)</span><br><span class="line">from (select avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id) dept_avg_sal ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select department_id,avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary) = (select  min(t_dep_gr_avgsalary)</span><br><span class="line">from (select avg(salary) t_dep_gr_avgsalary</span><br><span class="line">from employees</span><br><span class="line">group by department_id) dept_avg_sal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  相关子查询：外部的表，存在于内部子查询当中</span><br><span class="line"></span><br><span class="line">    如果子查询的执行依赖于外部查询,通常情况下都是因为子查询中的表用到了外部的表,并进行了条件</span><br><span class="line">    关联,因此每执行一次外部查询,子查询都要重新计算一次,这样的子查询就称之为 关联子查询 。</span><br><span class="line"></span><br><span class="line">        步骤是： 1.外查询，先查询到了107条记录。</span><br><span class="line">                2.将第一条记录取出来，送进子查询中，送进来的这条记录，使用外表的这条记录，获取到employee_id。查出子查询的结果</span><br><span class="line">                3.将子查询的结果，返回到外查询，继续外查询语句的过滤条件，得到最终结果</span><br><span class="line"></span><br><span class="line">  题目:查询员工中工资 大于 本部门平均工资的员工的last_name,salary和其department_id</span><br><span class="line">   :这里的相关子查询，子查询中使用主查询中的列</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select last_name, e.employee_id ,salary</span><br><span class="line">from employees e</span><br><span class="line">where salary &gt; (select avg(salary)</span><br><span class="line">                from employees em</span><br><span class="line">                where em.department_id=e.employee_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  相关子查询， 子查询在 from 后面</span><br><span class="line">  from型的子查询:子查询是作为from的一部分,子查询要用()引起来,并且要给这个子查询取别</span><br><span class="line">    名, 把它当成一张“临时的虚拟的表”来使用。</span><br><span class="line"> */</span><br><span class="line"> #:查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</span><br><span class="line">SELECT last_name,salary,e1.department_id</span><br><span class="line">FROM employees e1,(</span><br><span class="line">                    SELECT department_id,AVG(salary) dept_avg_sal</span><br><span class="line">                    FROM employees</span><br><span class="line">                    GROUP BY department_id) e2</span><br><span class="line">WHERE e1.`department_id` = e2.department_id</span><br><span class="line">AND e2.dept_avg_sal &lt; e1.`salary`;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  在ORDER BY 中使用 相关子查询:</span><br><span class="line">  题目:查询员工的id,salary,按照department_name 排序</span><br><span class="line"> */</span><br><span class="line">select  distinct department_name</span><br><span class="line">from employees e2  left join departments d</span><br><span class="line">on e2.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"># select e1.last_name, e1.employee_id,e1.salary</span><br><span class="line"># from employees e1</span><br><span class="line"># order by (select  distinct department_name</span><br><span class="line"># from employees e2  left join departments d</span><br><span class="line"># on e2.department_id = d.department_id</span><br><span class="line">#     where e1.employee_id=e2.employee_id) asc;</span><br><span class="line"></span><br><span class="line">SELECT employee_id, salary</span><br><span class="line">FROM employees e</span><br><span class="line">ORDER BY (</span><br><span class="line">             SELECT department_name</span><br><span class="line">             FROM departments d</span><br><span class="line">             WHERE e.`department_id` = d.`department_id`</span><br><span class="line">         );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  EXISTS 与 NOT EXISTS关键字</span><br><span class="line">  关联子查询通常也会和 EXISTS操作符一起来使用,用来检查在子查询中是否存在满足条件的行。</span><br><span class="line">        如果在子查询中不存在满足条件的行:</span><br><span class="line">        条件返回 FALSE</span><br><span class="line">        继续在子查询中查找</span><br><span class="line">        如果在子查询中存在满足条件的行:</span><br><span class="line">        不在子查询中继续查找</span><br><span class="line">        条件返回 TRUE</span><br><span class="line">        NOT EXISTS关键字表示如果不存在某种条件,则返回TRUE,否则返回FALSE。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#  题目:查询公司 管理者的 employee_id, last_name, job_id,department_id 信息</span><br><span class="line"># 方法一：表自连接</span><br><span class="line">SELECT DISTINCT e1.employee_id, e1.last_name, e1.job_id, e1.department_id</span><br><span class="line">FROM</span><br><span class="line"> employees e1 JOIN employees e2</span><br><span class="line">WHERE e1.employee_id = e2.manager_id;</span><br><span class="line"># 方法二、</span><br><span class="line">SELECT employee_id, last_name, job_id, department_id</span><br><span class="line">FROM employees e1</span><br><span class="line">WHERE EXISTS(SELECT *</span><br><span class="line">             FROM employees e2</span><br><span class="line">             WHERE e2.manager_id =</span><br><span class="line">                   e1.employee_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询    departments表 中 不存在于 employees表中的部门     的department_id和department_name</span><br><span class="line">SELECT department_id, department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE NOT EXISTS (SELECT &#x27;X&#x27;</span><br><span class="line">FROM</span><br><span class="line"> employees</span><br><span class="line">WHERE</span><br><span class="line"> department_id = d.department_id);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  ------------------------------------------------------------------------</span><br><span class="line">  子查询练习</span><br><span class="line"> */</span><br><span class="line">#1.查询和Zlotkey相同部门的员工姓名和工资</span><br><span class="line"></span><br><span class="line">select e1.department_id ,e1.last_name,e1.salary from employees e1</span><br><span class="line">where  e1.department_id =(select department_id from employees e2 where e2.last_name=&#x27;Zlotkey&#x27;);</span><br><span class="line"></span><br><span class="line">#2.查询  工资比公司平均工资高的  员工的员工号,姓名和工资。</span><br><span class="line">select employee_id,last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;(select avg(salary) from employees);</span><br><span class="line">#公司的平均工资</span><br><span class="line">select avg(salary) from employees;</span><br><span class="line"></span><br><span class="line">#3.选择工资大于 所有JOB_ID = &#x27;SA_MAN&#x27;的员工的工资 的员工的last_name, job_id, salary</span><br><span class="line"></span><br><span class="line">select last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt; all(select salary from employees</span><br><span class="line">where job_id=&#x27;SA_MAN&#x27;);</span><br><span class="line">#所有JOB_ID = &#x27;SA_MAN&#x27;的员工的工资</span><br><span class="line">select salary from employees</span><br><span class="line">where job_id=&#x27;SA_MAN&#x27;</span><br><span class="line"></span><br><span class="line">#4.查询   和姓名中包含字母u的员工 在 相同部门 的员工   的员工号和姓名</span><br><span class="line">select employee_id,last_name</span><br><span class="line">from employees</span><br><span class="line">where department_id in (select distinct department_id  from employees</span><br><span class="line">where last_name like &#x27;%U%&#x27;);</span><br><span class="line"># 查询和   姓名中包含字母u的员工 在相同部门的员工</span><br><span class="line"># 查询姓名中包含字母u的员工 的部门id</span><br><span class="line">select distinct department_id  from employees</span><br><span class="line">where last_name like &#x27;%U%&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#5.查询在 部门的location_id为1700的部门工作的 员工的员工号</span><br><span class="line"></span><br><span class="line">select employee_id ,last_name</span><br><span class="line">from employees</span><br><span class="line">where department_id in(</span><br><span class="line">                        select department_id</span><br><span class="line">                        from departments</span><br><span class="line">                        where location_id=&#x27;1700&#x27;</span><br><span class="line">                      );</span><br><span class="line"></span><br><span class="line"># 查询 location_id为1700的部门id号</span><br><span class="line">select department_id</span><br><span class="line">from departments</span><br><span class="line">where location_id=&#x27;1700&#x27;;</span><br><span class="line"></span><br><span class="line">#6.查询管理者是King的员工姓名和工资</span><br><span class="line"></span><br><span class="line">select last_name, salary,manager_id</span><br><span class="line">from employees</span><br><span class="line">where manager_id=(select employee_id</span><br><span class="line">from employees</span><br><span class="line">where last_name=&#x27;King&#x27; and manager_id is null);</span><br><span class="line"># 查询King 管理者的 employee_id</span><br><span class="line">select employee_id</span><br><span class="line">from employees</span><br><span class="line">where last_name=&#x27;King&#x27; and manager_id is null ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#7.查询工资最低的员工信息: last_name, salary</span><br><span class="line">select last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary=(select min(salary) from employees);</span><br><span class="line"></span><br><span class="line">#查询员工表的最低工资是多少</span><br><span class="line">select min(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">#8.查询平均工资 最低的部门信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查找各个部门的平均工资</span><br><span class="line">select  avg(salary) avg_salary</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"># 查找部门的最低工资</span><br><span class="line">select min(avg_salary)</span><br><span class="line">from (select  avg(salary) avg_salary</span><br><span class="line">from employees</span><br><span class="line">group by department_id) t_avg_em;</span><br><span class="line"># 查找最低工资的部门</span><br><span class="line">select *</span><br><span class="line">from departments</span><br><span class="line">where department_id=(</span><br><span class="line">        select department_id from employees</span><br><span class="line">        group by department_id</span><br><span class="line">        having avg(salary)=(</span><br><span class="line">                            select min(avg_salary)</span><br><span class="line">                            from (</span><br><span class="line">                            select  avg(salary) avg_salary</span><br><span class="line">                            from employees</span><br><span class="line">                            group by department_id) t_avg_em</span><br><span class="line">                            )</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#9.查询平均工资 最低的部门 信息  和  该部门的平均工资(相关子查询)</span><br><span class="line">select  department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary)&lt;=ALL (</span><br><span class="line">    #求出每个部门的平均工资</span><br><span class="line">                select avg(salary)</span><br><span class="line">                from employees</span><br><span class="line">                group by department_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 记住一点：这种子查询，就抓住，子查询后出来的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#10.查询平均工资最高的 job 信息</span><br><span class="line"># 注意：看题目，题目要查job信息，肯定是 from jobs表,然后再去凑条件</span><br><span class="line">select * from jobs;</span><br><span class="line"></span><br><span class="line"># 查询每个工种的 平均工资</span><br><span class="line">select job_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by job_id;</span><br><span class="line"></span><br><span class="line"># 查询  平均工资最高的 工种 job_id</span><br><span class="line">select job_id</span><br><span class="line">from employees</span><br><span class="line">group by job_id</span><br><span class="line">having avg(salary)&gt;=ALL (</span><br><span class="line">        select avg(salary)</span><br><span class="line">        from employees</span><br><span class="line">        group by job_id</span><br><span class="line">);</span><br><span class="line">#最终</span><br><span class="line">select * from jobs</span><br><span class="line">where job_id=(select job_id</span><br><span class="line">from employees</span><br><span class="line">group by job_id</span><br><span class="line">having avg(salary)&gt;=ALL (</span><br><span class="line">        select avg(salary)</span><br><span class="line">        from employees</span><br><span class="line">        group by job_id</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">#11.查询 平均工资  高于 公司平均工资 的部门有哪些?</span><br><span class="line">select * from</span><br><span class="line">departments;</span><br><span class="line"></span><br><span class="line">#查询公司的平均工资</span><br><span class="line">select avg(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"># 查询部门的平均工资</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 查询 平均工资  高于 公司平均工资 的部门有哪些?</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">where department_id is not null</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary) &gt;(</span><br><span class="line">    select avg(salary)</span><br><span class="line">    from employees</span><br><span class="line">    ) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#12.查询出公司中所有 manager(管理者) 的详细信息</span><br><span class="line"># manager也是员工</span><br><span class="line"># 这题只要是，将employees表，想象成两张表，一张是员工表，一张是 管理者表。</span><br><span class="line"># 只要 员工表的 员工id=管理者表中的 管理id ,那么这个人这条记录就是管理者</span><br><span class="line"># 自连接查询</span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">select DISTINCT em.employee_id, em.last_name, em.salary</span><br><span class="line">from employees em join employees ma</span><br><span class="line">on em.employee_id=ma.manager_id;</span><br><span class="line">#方法2</span><br><span class="line">SELECT employee_id, last_name, salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id IN (</span><br><span class="line">    SELECT DISTINCT manager_id</span><br><span class="line">    FROM employees</span><br><span class="line">);</span><br><span class="line">#相关子查询   查询第一行时， 外查询的条件，进入到内查询，内查询执行使用外查询条件。完毕。 跳出内查询，到外查询继续执行</span><br><span class="line">#方式3:  where 后面判断 存在 EXISTS 存在返回true</span><br><span class="line">SELECT employee_id, last_name, salary</span><br><span class="line">FROM employees e1</span><br><span class="line">WHERE EXISTS(SELECT *</span><br><span class="line">             FROM employees e2</span><br><span class="line">             WHERE e2.manager_id = e1.employee_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#13.各个部门中 最高工资中 最低的那个部门的 最低工资是多少?</span><br><span class="line"># 求各个部门的最高工资</span><br><span class="line"># 将各个部门的最高工资进行比较，最低的那个部门的工资是多少</span><br><span class="line"></span><br><span class="line">#从最高工资中找到最低工资</span><br><span class="line">select min(mx_salary)</span><br><span class="line">from (</span><br><span class="line">    # 求各个部门的最高工资</span><br><span class="line">    select  max(salary) mx_salary</span><br><span class="line">    from employees</span><br><span class="line">    group by department_id ) a;</span><br><span class="line"></span><br><span class="line"># 抓住核心思想，求什么就先把字段写好，后面再往上面凑</span><br><span class="line">select department_id, salary</span><br><span class="line">from employees</span><br><span class="line">where department_id =</span><br><span class="line">(select department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having max(salary) =</span><br><span class="line">       (select max(salary) m_sa</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id</span><br><span class="line">        order by m_sa</span><br><span class="line">        limit 0,1</span><br><span class="line">       ));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#14.查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salary</span><br><span class="line"># 求平均工资最高的部门id</span><br><span class="line">select department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having avg(salary)&gt;=ALL (</span><br><span class="line">    select avg(salary)</span><br><span class="line">    from employees</span><br><span class="line">    group by department_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#求这个平均工资最高的部门中，多个管理者的 id</span><br><span class="line">select distinct manager_id</span><br><span class="line">from employees</span><br><span class="line">where department_id  =(</span><br><span class="line">    #查询平均工资最高的部门</span><br><span class="line">    select department_id</span><br><span class="line">    from employees</span><br><span class="line">    group by department_id</span><br><span class="line">    having avg(salary) &gt;= ALL (</span><br><span class="line">        #每个部门的平均工资</span><br><span class="line">        select avg(salary)</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"># 查询员工表</span><br><span class="line">select employee_id, last_name, department_id, email, salary</span><br><span class="line">from employees</span><br><span class="line">where employee_id in (</span><br><span class="line">    select distinct manager_id</span><br><span class="line">    from employees</span><br><span class="line">    where department_id = (</span><br><span class="line">        #查询平均工资最高的部门</span><br><span class="line">        select department_id</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id</span><br><span class="line">        having avg(salary) &gt;= ALL (</span><br><span class="line">            #每个部门的平均工资</span><br><span class="line">            select avg(salary)</span><br><span class="line">            from employees</span><br><span class="line">            group by department_id</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#15. 查询部门的部门号,其中不包括job_id是&quot;ST_CLERK&quot;的部门号</span><br><span class="line"></span><br><span class="line"># 查询所有部门，然后排除 Job_id是&quot;ST_CLERK&quot;的部门</span><br><span class="line"></span><br><span class="line"># 查询 Job_id是&quot;ST_CLERK&quot;的 所有部门id</span><br><span class="line">select department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id</span><br><span class="line">having job_id=&#x27;ST_CLERK&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select department_id</span><br><span class="line">from departments</span><br><span class="line">where department_id not in(</span><br><span class="line">        select department_id</span><br><span class="line">        from employees</span><br><span class="line">        group by department_id,job_id</span><br><span class="line">        having job_id=&#x27;ST_CLERK&#x27;</span><br><span class="line">    );</span><br><span class="line">#相关子查询，将部门表作为主体，条件来判断是不是为真。满足就输出，不满足就继续下一行</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE NOT EXISTS(</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM employees e</span><br><span class="line">        WHERE d.`department_id` = e.`department_id`</span><br><span class="line">          AND job_id = &#x27;ST_CLERK&#x27;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#16. 选择所有 没有管理者的员工的last_name</span><br><span class="line"></span><br><span class="line"># 查询 管理者的id为null的 员工信息</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where manager_id is null ;</span><br><span class="line"></span><br><span class="line"># 查询所有管理者的id</span><br><span class="line"># 员工的管理者，与其匹配，不在里面的 记录一行</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees e1 # e1看作员工表</span><br><span class="line">where not exists(</span><br><span class="line">        select * from employees e2 #e2看作管理员表</span><br><span class="line">        where e1.manager_id=e2.employee_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">#17.查询员工号、姓名、雇用时间、工资, 其中员工的 管理者为 &#x27;De Haan&#x27;</span><br><span class="line"></span><br><span class="line"># 查询 last_name=&#x27;De Haan&#x27;的员工号</span><br><span class="line">select * from employees where last_name=&#x27;De Haan&#x27;;# employee_id =102</span><br><span class="line"></span><br><span class="line">select employee_id,last_name,hire_date,salary</span><br><span class="line">from employees</span><br><span class="line">where manager_id=(</span><br><span class="line">    select employee_id from employees where last_name=&#x27;De Haan&#x27;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#18.查询   各部门中工资 比本部门平均工资高    的员工的员工号, 姓名和工资(相关子查询)</span><br><span class="line"></span><br><span class="line">#查询各个部门中的工资(所有人的工资)</span><br><span class="line"># 必须以部门和人分组，不能以部门和工资分组，工资有可能 两个人一样的。也被合并了。错误的</span><br><span class="line">select employee_id, last_name, salary</span><br><span class="line">from employees e1</span><br><span class="line">group by department_id, employee_id</span><br><span class="line">having salary&gt;(</span><br><span class="line">    select  AVG(salary)</span><br><span class="line">    from employees e2</span><br><span class="line">    where e1.department_id=e2.department_id</span><br><span class="line">    group by department_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 错误的分组</span><br><span class="line">select department_id,salary</span><br><span class="line">from employees</span><br><span class="line">group by department_id, salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询各个部门的 平均工资</span><br><span class="line">select department_id,AVG(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#19.查询每个部门下的部门人数大于 5 的部门名称(相关子查询)</span><br><span class="line"></span><br><span class="line"># 查询每个部门，部门下的 人数</span><br><span class="line"># 思考，部门表，和 员工表 相关查询</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from departments d</span><br><span class="line">where 5&lt;(</span><br><span class="line">    select count(1)</span><br><span class="line">    from employees e</span><br><span class="line">    where d.department_id=e.department_id</span><br><span class="line">    ) ;</span><br><span class="line"></span><br><span class="line"># 某个部门下的人数</span><br><span class="line">select count(1)</span><br><span class="line">from employees</span><br><span class="line">where department_id=&#x27;90&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#20.查询每个国家下的部门个数大于 2 的国家编号(相关子查询)</span><br><span class="line"></span><br><span class="line">select * from countries;</span><br><span class="line"></span><br><span class="line"># 查看部门在哪国家</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from departments;</span><br><span class="line">select *</span><br><span class="line">from locations;</span><br><span class="line"></span><br><span class="line"># 查询国家countries表</span><br><span class="line"></span><br><span class="line">select * from countries  c</span><br><span class="line">where 2&lt;(</span><br><span class="line">        select count(1)</span><br><span class="line">        from departments d  join locations l</span><br><span class="line">        on d.location_id=l.location_id</span><br><span class="line">        where  c.country_id=l.country_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 所有部门所在的城市</span><br><span class="line">select d.department_id,l.country_id</span><br><span class="line">from departments d  join locations l</span><br><span class="line">on d.location_id=l.location_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT country_id</span><br><span class="line">FROM locations l</span><br><span class="line">WHERE 2 &lt; (</span><br><span class="line">    SELECT COUNT(*)</span><br><span class="line">    FROM departments d</span><br><span class="line">    WHERE l.`location_id` = d.`location_id`</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;子查询&lt;/center&gt;&lt;/h1&gt;



&lt;h3 id=&quot;一、子查询&quot;&gt;&lt;a href=&quot;#一、子查询&quot; class=&quot;headerlink&quot; title=&quot;一、子查询&quot;&gt;&lt;/a&gt;一、子查询&lt;/h3&gt;&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>5.mysql第8章聚合函数</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/5.mysql%E7%AC%AC8%E7%AB%A0%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/5.mysql%E7%AC%AC8%E7%AB%A0%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</id>
    <published>2019-10-03T05:00:00.000Z</published>
    <updated>2024-10-15T15:08:43.855Z</updated>
    
    <content type="html"><![CDATA[<h1><center>聚合函数</center></h1><h3 id="1-聚合函数类型（记住聚合函数就这5种）"><a href="#1-聚合函数类型（记住聚合函数就这5种）" class="headerlink" title="1.聚合函数类型（记住聚合函数就这5种）"></a>1.聚合函数类型（记住聚合函数就这5种）</h3><blockquote><p>AVG(字段) 求平均值<br> SUM(字段) 求和<br> MAX(字段) 求最大值<br> MIN(字段) 求最小值<br> COUNT(某字段) 求字段有多少个<br> 注意1：聚合函数一般是配合 group by 分组 来使用的<br>   select  MAX(salary) from employees;<br> 注意2：where 后面不能跟 聚合函数<br> 注意3：聚合函数不能嵌套使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  五、聚合函数类型（记住聚合函数就这5种）</span><br><span class="line">  AVG(字段) 求平均值</span><br><span class="line">  SUM(字段) 求和</span><br><span class="line">  MAX(字段) 求最大值</span><br><span class="line">  MIN(字段) 求最小值</span><br><span class="line">  COUNT(某字段) 求字段有多少个</span><br><span class="line">  注意1：聚合函数一般是配合 group by 分组 来使用的</span><br><span class="line">    select  MAX(salary) from employees;</span><br><span class="line">  注意2：where 后面不能跟 聚合函数</span><br><span class="line">  注意3：聚合函数不能嵌套使用</span><br><span class="line"></span><br><span class="line"># 练习： 求 所有人中，最高工资的那个人</span><br><span class="line">  错误的写法：</span><br><span class="line"> 有矛盾之处，查这张员工表，求出 最大工资的那个，应该是1个结果，而字段中还有last_name字段是表示显示表employees中所有人的姓名，有冲突</span><br><span class="line"> select last_name, MAX(salary) from employees;</span><br><span class="line"> # 正确写法：求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">  select employee_id, last_name, salary from employees</span><br><span class="line">    where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line">select  MAX(salary) from employees;</span><br><span class="line"></span><br><span class="line"># 求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">select employee_id, last_name, salary from employees</span><br><span class="line">where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line">#聚合函数，配合group by 使用：按照部门分组，求出每个部门中最高工资</span><br><span class="line">select department_id,MAX(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  统计个数的字段</span><br><span class="line">  COUNT()</span><br><span class="line">  # 字段commission_pct有35行有值，null不统计</span><br><span class="line"> */</span><br><span class="line">select COUNT(commission_pct) from employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-group—by"><a href="#2-group—by" class="headerlink" title="2.group—by"></a>2.group—by</h3><h4 id="可以使用GROUP-BY子句将表中的数据分成若干组"><a href="#可以使用GROUP-BY子句将表中的数据分成若干组" class="headerlink" title="可以使用GROUP BY子句将表中的数据分成若干组"></a>可以使用GROUP BY子句将表中的数据分成若干组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT column, group_function(column)</span><br><span class="line">FROM table</span><br><span class="line">[WHERE</span><br><span class="line"> condition]</span><br><span class="line">[GROUP BY</span><br><span class="line"> group_by_expression]</span><br><span class="line">[ORDER BY</span><br><span class="line"> column];</span><br></pre></td></tr></table></figure><blockquote><p>明确:WHERE一定放在FROM后面</p></blockquote><h2 id="☆☆☆group…-by…-的sql语句理解☆☆☆"><a href="#☆☆☆group…-by…-的sql语句理解☆☆☆" class="headerlink" title="☆☆☆group….by… 的sql语句理解☆☆☆"></a>☆☆☆group….by… 的sql语句理解☆☆☆</h2><h3 id="这里也要思考表与表之间的对应关系"><a href="#这里也要思考表与表之间的对应关系" class="headerlink" title="这里也要思考表与表之间的对应关系"></a>这里也要思考表与表之间的对应关系</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select department_id ,avg(salary)  # select 读作 这一个部门中 工资的平均值</span><br><span class="line">from employees</span><br><span class="line">group by department_id; </span><br><span class="line"># 通过select 后面的 语句，就可以看出分组后的 表张什么样子了</span><br><span class="line"># 这里 肯定是 每一个部门 在第一列， 第二列是 每个部门的 平均工资</span><br><span class="line">#如下图</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410140055769.png" alt="image-20241014005523571"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select department_id,job_id ,avg(salary)  </span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line"># 每个部门分组后， 部门里面再按照 工种id(job_id) 进行分组.</span><br><span class="line"># 可以预见查出来的表 ,一个部门，要分多行了，因为一个部门里面有多个工种，每个工种在进行算工资平均值</span><br><span class="line"># 如下图</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410140054911.png" alt="image-20241014005425668"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  --------------------------------------group---by----字段分组的使用-------------------------------------------------</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  分组：</span><br><span class="line">对于 group by 分组的理解</span><br><span class="line"></span><br><span class="line"># 结论1：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"># 反正就是，只要出现了分组， 在select 后面声明的字段 ，在 group by 后面要全部都给写上，并且select 后面一定要有一个聚合函数，来计算组意图结果。</span><br><span class="line"></span><br><span class="line"># 结论2：group by 声明在from后面、where后面,      order by 排序前面、limit 分页前面。 （可以理解，结果集群都都处理完毕，在进行排序，和分页）</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line"># 求所有员工的 工资平均值  AVG = SUM / COUNT(1)</span><br><span class="line">select SUM(salary) / count(1) from employees;</span><br><span class="line"># 求所有员工的 工资平均值</span><br><span class="line">select avg(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 查询   每个部门 有多少人</span><br><span class="line"># 先找到employees表</span><br><span class="line"># 然后group by 按照department_id 部门分组，有null,10，20，30，40，50，60，70，80，90，100这12个部门,此时结果集已经形成12条数据，12个部门</span><br><span class="line"># 随后 count(1)  再次限定结果集，将每个部门多少人求出来</span><br><span class="line">select department_id ,count(1)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 每个部门中 的 平均工资是多少</span><br><span class="line"># 求每个部门的 平均工资</span><br><span class="line">select department_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 先找到employees表</span><br><span class="line">#  然后group by 按照department_id 部门分组，在按照 工种job_id 进行 分组。</span><br><span class="line"># 比如90号部门的AD_PRES 在一行，90号部门的AD_VP工种 在一行，求平均工资值。</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line">#错误写法 这种错误就是 按照 department_id分组后的结果集，</span><br><span class="line"># 在select 后面的语句，并没有进行操作，只要显示last_name</span><br><span class="line"># 这里 按照 department_id分组后，展示字段last_name ，不可能的事情，是错误的写法</span><br><span class="line">select department_id ,last_name</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 错误写法</span><br><span class="line"># 只按照 department_id 进行分组，不能查到job_id 字段</span><br><span class="line">select department_id,job_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 结论：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 结论3.</span><br><span class="line"></span><br><span class="line">只要看见sql语句中有group by 就要想，结果集是 进行分组的结果， select 后面的字段，就是分组的字段，聚合函数就是对这分组后的操作。</span><br><span class="line">        如果分组后的结果继续筛选，就要使用having 进行筛选， 后面跟的是聚合函数。</span><br><span class="line">         这里不能使用where ,where  可以直接使用表中的字段作为筛选条件,但不能使用分组中的 聚合函数 作为筛选条件;</span><br><span class="line">  HAVING 必须要与 GROUP BY 配合使用,可以把分组计算的聚合函数和分组字段作为筛选条件。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按照部门分组，部门有 null,10,20,30,40,50,60,70,80,90,100,110</span><br><span class="line">select department_id  from employees</span><br><span class="line">group by department_id;</span><br><span class="line">#按照 部门和工资分组</span><br><span class="line"># 一个部门中有很多人工资不一样，一样的分为一组 如：90号部门工资有两种24000，17000</span><br><span class="line">select department_id ,salary from employees</span><br><span class="line">group by department_id,salary;</span><br><span class="line">#求 每个部门中 工资最高是多少</span><br><span class="line">select department_id , max(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 每个部门中最高工资 ，且最高工资超过10000的部门。</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 50，90，110 部门中，最高工资超过10000的部门是那几个。</span><br><span class="line"># 这里 where 后面的条件 是先筛选 符合条件的部门，提高了查询速度</span><br><span class="line">#     having 后面的筛选条件，记住就跟聚合函数</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">where department_id in(50,90,110)</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># ----------------牢记sql语句的执行过程----------------------</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;聚合函数&lt;/center&gt;&lt;/h1&gt;



&lt;h3 id=&quot;1-聚合函数类型（记住聚合函数就这5种）&quot;&gt;&lt;a href=&quot;#1-聚合函数类型（记住聚合函数就这5种）&quot; class=&quot;headerlink&quot; title=&quot;1.聚合函数类型（记住聚合函数就这5</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>4.mysql第7章单行函数.md</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/4.mysql%E7%AC%AC7%E7%AB%A0%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/4.mysql%E7%AC%AC7%E7%AB%A0%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/</id>
    <published>2019-10-03T03:00:00.000Z</published>
    <updated>2024-10-13T16:34:27.467Z</updated>
    
    <content type="html"><![CDATA[<h1><center>单行函数</center></h1><h2 id="MySQL中的函数"><a href="#MySQL中的函数" class="headerlink" title="MySQL中的函数"></a>MySQL中的函数</h2><h2 id="这里我将这些丰富的内置函数再分为两类：单行函数-、-聚合函数-或分组函数"><a href="#这里我将这些丰富的内置函数再分为两类：单行函数-、-聚合函数-或分组函数" class="headerlink" title="这里我将这些丰富的内置函数再分为两类：单行函数 、 聚合函数(或分组函数)"></a>这里我将这些丰富的内置函数再分为两类：单行函数 、 聚合函数(或分组函数)</h2><blockquote><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li>只对一行进行变换</li><li>每行返回一个结果</li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul></blockquote><h2 id="一、单行函数有哪些？"><a href="#一、单行函数有哪些？" class="headerlink" title="一、单行函数有哪些？"></a>一、单行函数有哪些？</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410132347590.png" alt="image-20241013234750343"></p><h3 id="1-常用数值函数"><a href="#1-常用数值函数" class="headerlink" title="1.常用数值函数"></a>1.常用数值函数</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  一、数值函数</span><br><span class="line"> */</span><br><span class="line">#1.返回绝对值</span><br><span class="line">select ABS(-12) from dual; # 12</span><br><span class="line"></span><br><span class="line"># 2.返回数字的符号</span><br><span class="line">select SIGN(-9) from dual; # -1</span><br><span class="line"></span><br><span class="line"># 3.返回圆周率的值</span><br><span class="line">select PI() from dual; # 3.141593</span><br><span class="line"></span><br><span class="line">#4.返回大于或等于某个值的最小整数</span><br><span class="line">select CEIL(12) from dual; #12</span><br><span class="line">select CEIL(0.1) from dual; # 1</span><br><span class="line">select CEILING(-0.1) from dual;#0</span><br><span class="line"></span><br><span class="line">#5.返回列表中的最小值、</span><br><span class="line">select least(11,12,3,0) from dual;</span><br><span class="line"></span><br><span class="line">#6.返回列表中的最大值</span><br><span class="line">select greatest(12,23,55) from dual;</span><br><span class="line"></span><br><span class="line">#7.求余数，取模(工资与3取模) MOD()</span><br><span class="line">select  last_name,salary, MOD(salary,3) from employees;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  ROUND(x)</span><br><span class="line"> 返回一个对x的值进行四舍五入后,最接近于X的整数</span><br><span class="line"> */</span><br><span class="line">select  ROUND(15.6)from dual;</span><br><span class="line">/**</span><br><span class="line">  ROUND(x,y)</span><br><span class="line"> 返回一个对x的值进行四舍五入后最接近X的值,并保留到小数点后面Y位</span><br><span class="line"> */</span><br><span class="line">select ROUND(12.346,2) from dual;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 8.返回数字x截断为y位小数的结果</span><br><span class="line">select TRUNCATE(12.5334,2) from dual;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-常用字符串的操作"><a href="#2-常用字符串的操作" class="headerlink" title="2.常用字符串的操作"></a>2.常用字符串的操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  ------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 二、字符串的操作</span><br><span class="line">注意:MySQL中,字符串的位置是从1开始的。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"># 1.CONCAT(s1,s2,......,sn) 连接s1,s2,......,sn为一个字符串</span><br><span class="line">select concat(&#x27;abc&#x27;,&#x27;def&#x27;) from dual; # abcdef</span><br><span class="line"></span><br><span class="line">#   2.CONCAT_WS(x,s1,s2,......,sn) 同CONCAT(s1,s2,...)函数,但是每个字符串s1,s2,s3...之间要加上x连接</span><br><span class="line">select concat_ws(&#x27;a&#x27;,&#x27;123&#x27;,&#x27;456&#x27;) from dual; # 123a456</span><br><span class="line"></span><br><span class="line">#   3.INSERT(str, idx, len,replacestr) 将字符串str从第idx位置开始,len个字符长的子串替换为字符串replacestr</span><br><span class="line">select insert(&#x27;hello&#x27;,2,3,&#x27;www&#x27;)from dual; # hwwwo</span><br><span class="line"></span><br><span class="line">#   4.UPPER(s) 或 UCASE(s) 将字符串s的所有字母转成大写字母</span><br><span class="line">select UPPER(&#x27;abc&#x27;)from dual;#ABC</span><br><span class="line"></span><br><span class="line">#   5.LOWER(s) 或LCASE(s) 将字符串s的所有字母转成小写字母</span><br><span class="line">select LOWER(&#x27;ABC&#x27;)from dual;</span><br><span class="line"></span><br><span class="line">#   6.LEFT(str,n) 返回字符串str最左边的n个字符</span><br><span class="line">select LEFT(&#x27;hello&#x27;,4) from dual; # hell</span><br><span class="line"></span><br><span class="line">#   7.RIGHT(str,n) 返回字符串str最右边的n个字符</span><br><span class="line">select RIGHT(&#x27;world&#x27;,3)from dual; # rld</span><br><span class="line"></span><br><span class="line">#   8.LTRIM(s)去掉字符串s左侧的空格</span><br><span class="line">select LTRIM(&#x27; hello&#x27;)from dual; #hello</span><br><span class="line"></span><br><span class="line">#   9.FIELD(s,s1,s2,...,sn) 返回字符串s在字符串列表中第一次出现的位置</span><br><span class="line">select FIELD(&#x27;a&#x27;,&#x27;vcf&#x27;,&#x27;asc&#x27;,&#x27;baf&#x27;,&#x27;a&#x27;)from dual; # 4</span><br><span class="line"></span><br><span class="line"># 10.REVERSE(s) 返回s 反转后的字符串</span><br><span class="line">select  reverse(&#x27;lmn&#x27;) from dual; #nml</span><br><span class="line"># 11. NULLIF(value1,value2)  比较两个字符串,如果value1与value2相等,则返回NULL,否则返回value1</span><br><span class="line">select NULLIF(&#x27;a&#x27;,&#x27;a&#x27;) from dual;</span><br><span class="line"></span><br><span class="line"># 注意:MySQL中,字符串的位置是从1开始的。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-时间日期函数"><a href="#3-时间日期函数" class="headerlink" title="3.时间日期函数"></a>3.时间日期函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  三、时间日期函数</span><br><span class="line">1. CURDATE() ,CURRENT_DATE() 返回当前日期,只包含年、月、日</span><br><span class="line">#  CURDATE 获取当前时间， 年-月-日</span><br><span class="line">2. CURTIME() , CURRENT_TIME() 返回当前时间,只包含时、分、秒</span><br><span class="line">3. NOW()  / SYSDATE() / CURRENT_TIMESTAMP() / LOCALTIME() / LOCALTIMESTAMP() 返回当前系统日期和时间</span><br><span class="line">4. UTC_DATE() 返回UTC(世界标准时间)日期</span><br><span class="line">5. UTC_TIME() 返回UTC(世界标准时间)时间</span><br><span class="line"></span><br><span class="line">#  DATEDIFF(当前时间,已知时间) 时间间隔多少天</span><br><span class="line">#  DATEDIFF(CURDATE(),&#x27;1997-01-01&#x27;) 时间间隔多少天</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  练习</span><br><span class="line"> */</span><br><span class="line"># 1.显示系统时间(注:日期+时间)</span><br><span class="line">  select now() from dual;</span><br><span class="line"></span><br><span class="line"># 2.查询员工号,姓名,工资,以及工资提高百分之20%后的结果(new salary)</span><br><span class="line">select employee_id &quot;工号&quot; , last_name &quot;姓名&quot; , salary &quot;工资&quot; ,  salary *(1+0.2)  &quot;new salary&quot;</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"># 3.将员工的姓名按首字母排序,并写出姓名的长度(length)</span><br><span class="line">select e.last_name, length(e.last_name)</span><br><span class="line">from employees e</span><br><span class="line">order by e.last_name asc;</span><br><span class="line"></span><br><span class="line"># 4.查询员工id,last_name,salary,并作为一个列输出,别名为OUT_PUT</span><br><span class="line"># CONCAT(s1,s2,......,sn) 连接s1,s2,......,sn为一个字符串  将几个字段连接起来，CONCAT(,,)</span><br><span class="line">select CONCAT(employee_id ,&#x27;,&#x27;,last_name ,&#x27;,&#x27;, salary ) as OUT_PUT  from employees;</span><br><span class="line"></span><br><span class="line"># 5.查询公司各员工工作的年数、工作的天数,并按工作年数的降序排序</span><br><span class="line"># ROUND() 保留整数，四舍五入，</span><br><span class="line"># DATEDIFF(date1,date2) 返回date1 - date2的日期间隔天数</span><br><span class="line">select now()from dual;</span><br><span class="line"># now()  返回当前日期,只包含年、月、日 时、分、秒;</span><br><span class="line">select CURDATE() from dual;</span><br><span class="line"># CURDATE() 返回当前日期,只包含年、月、日 2024-10-13</span><br><span class="line"></span><br><span class="line">select  employee_id,last_name, ROUND(DATEDIFF(CURDATE(),hire_date)/365)  &quot;worked_year&quot;,DATEDIFF(CURDATE(),hire_date) &quot;worked_days&quot;</span><br><span class="line">from employees</span><br><span class="line">order by worked_year desc;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6.查询员工姓名,hire_date , department_id,满足以下条件:</span><br><span class="line"># 雇用时间在1997年之后,department_id 为80 或 90 或110, commission_pct不为空</span><br><span class="line"># STR_TO_DATE(str, fmt)  按照字符串fmt格式&#x27;%Y-%m-%d&#x27; 对str进行解析,解析为一个日期</span><br><span class="line"># hire_date&gt;=STR_TO_DATE(&#x27;1997-01-01&#x27;,&#x27;%Y-%m-%d&#x27;);</span><br><span class="line">select last_name,hire_date,department_id from employees</span><br><span class="line">where  department_id in(80,90,110)</span><br><span class="line">  and commission_pct IS NOT NULL</span><br><span class="line">#   and hire_date &gt;=&#x27;1997-01-01&#x27;; # 直接也可以写，隐式转换</span><br><span class="line">and hire_date&gt;=STR_TO_DATE(&#x27;1997-01-01&#x27;,&#x27;%Y-%m-%d&#x27;);</span><br><span class="line"></span><br><span class="line"># 7.查询公司中入职超过10000天的员工姓名、入职时间</span><br><span class="line"></span><br><span class="line">select last_name,hire_date</span><br><span class="line">from employees</span><br><span class="line">where DATEDIFF(CURDATE(),hire_date) &gt;= 10000;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 连接字符串</span><br><span class="line">  # 8.做一个查询,产生下面的结果</span><br><span class="line">-- 字符串-&lt;last_name&gt; earns `&lt;salary&gt;` monthly but wants &lt;salary*3&gt;</span><br><span class="line">--        Dream Salary</span><br><span class="line">-- King earns 24000 monthly but wants 72000</span><br><span class="line"> */</span><br><span class="line"> select CONCAT(last_name,&#x27; earns &#x27;,salary,&#x27; monthly but wants &#x27;,salary*3) as &quot;Dream salary&quot; from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#  DATEDIFF(当前时间,已知时间) 时间间隔多少天</span><br><span class="line">#  DATEDIFF(CURDATE(),&#x27;1997-01-01&#x27;) 时间间隔多少天</span><br><span class="line">#  CURDATE 获取当前时间， 年-月-日</span><br><span class="line">#  CONCAT(s1,s2,s3) 连接字符串s1s2s3</span><br><span class="line">#  ROUND(12.5) #13 四舍五入不保留小数</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-流程控制函数"><a href="#4-流程控制函数" class="headerlink" title="4.流程控制函数"></a>4.流程控制函数</h3><p>流程处理函数可以根据不同的条件,执行不同的处理流程,可以在SQL语句中实现不同的条件选择。<br>MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><ul><li><h3 id="CASE-WHEN-…判断逻辑…-THEN-…-结果"><a href="#CASE-WHEN-…判断逻辑…-THEN-…-结果" class="headerlink" title="CASE WHEN …判断逻辑… THEN ….结果"></a>CASE WHEN …判断逻辑… THEN ….结果</h3></li></ul><blockquote><p>CASE WHEN …… THEN ….<br> 相当于Java的if…else if…else…</p></blockquote><ul><li><h3 id="CASE-字段-WHEN-‘要匹配的值’-THEN-操作逻辑"><a href="#CASE-字段-WHEN-‘要匹配的值’-THEN-操作逻辑" class="headerlink" title="CASE 字段  WHEN  ‘要匹配的值’  THEN 操作逻辑"></a>CASE 字段  WHEN  ‘要匹配的值’  THEN 操作逻辑</h3></li></ul><blockquote><p> 修订工资<br> 要求：工作名称为  IT_PROG  工资   1.10*salary</p><p> CASE 字段 WHEN ‘要匹配的值’ THEN 操作逻辑</p><p> 相当于 Java 的 switch…case…</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  四、流程处理函数可以根据不同的条件,执行不同的处理流程</span><br><span class="line">  练习 CASE ... WHEN ... THEN ...</span><br><span class="line">  相当于Java的switch...case...</span><br><span class="line"></span><br><span class="line">  9.使用CASE-WHEN,按照下面的条件:</span><br><span class="line">--job      grade</span><br><span class="line">--AD_PRES    A</span><br><span class="line">--ST_MAN     B</span><br><span class="line">--IT_PROG    C</span><br><span class="line">--SA_REP     D</span><br><span class="line">--ST_CLERK   E</span><br><span class="line"></span><br><span class="line">-- 产生下面的结果</span><br><span class="line">-- Last_name    Job_id    Grade</span><br><span class="line">-- king         AD_PRES    A</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">SELECT last_name Last_name, job_id Job_id,</span><br><span class="line">       CASE job_id WHEN &#x27;AD_PRES&#x27; THEN &#x27;A&#x27;</span><br><span class="line">WHEN &#x27;ST_MAN&#x27; THEN &#x27;B&#x27;</span><br><span class="line">WHEN &#x27;IT_PROG&#x27; THEN &#x27;C&#x27;</span><br><span class="line">WHEN &#x27;SA_REP&#x27; THEN &#x27;D&#x27;</span><br><span class="line">WHEN &#x27;ST_CLERK&#x27; THEN &#x27;E&#x27;</span><br><span class="line">ELSE &#x27;F&#x27;</span><br><span class="line">END &quot;grade&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   CASE WHEN ...... THEN ....</span><br><span class="line">  相当于Java的if...else if...else...</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> SELECT employee_id,salary, CASE WHEN salary&gt;=15000 THEN &#x27;高薪&#x27;</span><br><span class="line">WHEN salary&gt;=10000 THEN &#x27;潜力股&#x27;</span><br><span class="line">WHEN salary&gt;=8000 THEN &#x27;屌丝&#x27;</span><br><span class="line">ELSE &#x27;草根&#x27; END</span><br><span class="line"> &quot;描述&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  修订工资</span><br><span class="line">  要求：工作名称为 IT_PROG 工资 1.10*salary</span><br><span class="line">        ........</span><br><span class="line">        </span><br><span class="line">  CASE 字段 WHEN &#x27;要匹配的值&#x27; THEN 操作逻辑</span><br><span class="line">  </span><br><span class="line">  相当于Java的switch...case...</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">SELECT last_name, job_id, salary,</span><br><span class="line">CASE job_id WHEN &#x27;IT_PROG&#x27; THEN 1.10*salary</span><br><span class="line">WHEN &#x27;ST_CLERK&#x27; THEN 1.15*salary</span><br><span class="line">WHEN &#x27;SA_REP&#x27; THEN 1.20*salary</span><br><span class="line">ELSE salary</span><br><span class="line">END &quot;REVISED_SALARY&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-聚合函数类型（记住聚合函数就这5种）"><a href="#5-聚合函数类型（记住聚合函数就这5种）" class="headerlink" title="5.聚合函数类型（记住聚合函数就这5种）"></a>5.聚合函数类型（记住聚合函数就这5种）</h3><blockquote><p>AVG(字段) 求平均值<br> SUM(字段) 求和<br> MAX(字段) 求最大值<br> MIN(字段) 求最小值<br> COUNT(某字段) 求字段有多少个<br> 注意1：聚合函数一般是配合 group by 分组 来使用的<br>   select  MAX(salary) from employees;<br> 注意2：where 后面不能跟 聚合函数<br> 注意3：聚合函数不能嵌套使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  五、聚合函数类型（记住聚合函数就这5种）</span><br><span class="line">  AVG(字段) 求平均值</span><br><span class="line">  SUM(字段) 求和</span><br><span class="line">  MAX(字段) 求最大值</span><br><span class="line">  MIN(字段) 求最小值</span><br><span class="line">  COUNT(某字段) 求字段有多少个</span><br><span class="line">  注意1：聚合函数一般是配合 group by 分组 来使用的</span><br><span class="line">    select  MAX(salary) from employees;</span><br><span class="line">  注意2：where 后面不能跟 聚合函数</span><br><span class="line">  注意3：聚合函数不能嵌套使用</span><br><span class="line"></span><br><span class="line"># 练习： 求 所有人中，最高工资的那个人</span><br><span class="line">  错误的写法：</span><br><span class="line"> 有矛盾之处，查这张员工表，求出 最大工资的那个，应该是1个结果，而字段中还有last_name字段是表示显示表employees中所有人的姓名，有冲突</span><br><span class="line"> select last_name, MAX(salary) from employees;</span><br><span class="line"> # 正确写法：求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">  select employee_id, last_name, salary from employees</span><br><span class="line">    where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line">select  MAX(salary) from employees;</span><br><span class="line"></span><br><span class="line"># 求 所有人中，最高工资的那个人( 用到子查询)</span><br><span class="line">select employee_id, last_name, salary from employees</span><br><span class="line">where salary=(select max(salary)from employees);</span><br><span class="line"></span><br><span class="line">#聚合函数，配合group by 使用：按照部门分组，求出每个部门中最高工资</span><br><span class="line">select department_id,MAX(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  统计个数的字段</span><br><span class="line">  COUNT()</span><br><span class="line">  # 字段commission_pct有35行有值，null不统计</span><br><span class="line"> */</span><br><span class="line">select COUNT(commission_pct) from employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select e.last_name,</span><br><span class="line">       CASE d.department_id</span><br><span class="line">           WHEN 10 THEN e.salary * 1.1</span><br><span class="line">           when 20 then e.salary * 1.2</span><br><span class="line">           ELSE e.salary END</span><br><span class="line">from employees e</span><br><span class="line">         join departments d on e.department_id = d.department_id</span><br><span class="line">where d.department_id in (10, 20, 30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  --------------------------------------group---by----字段分组的使用-------------------------------------------------</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  分组：</span><br><span class="line">对于 group by 分组的理解</span><br><span class="line"></span><br><span class="line"># 结论1：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"># 反正就是，只要出现了分组， 在select 后面声明的字段 ，在 group by 后面要全部都给写上，并且select 后面一定要有一个聚合函数，来计算组意图结果。</span><br><span class="line"></span><br><span class="line"># 结论2：group by 声明在from后面、where后面,      order by 排序前面、limit 分页前面。 （可以理解，结果集群都都处理完毕，在进行排序，和分页）</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select * from employees;</span><br><span class="line"># 求所有员工的 工资平均值  AVG = SUM / COUNT(1)</span><br><span class="line">select SUM(salary) / count(1) from employees;</span><br><span class="line"># 求所有员工的 工资平均值</span><br><span class="line">select avg(salary)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># 查询   每个部门 有多少人</span><br><span class="line"># 先找到employees表</span><br><span class="line"># 然后group by 按照department_id 部门分组，有null,10，20，30，40，50，60，70，80，90，100这12个部门,此时结果集已经形成12条数据，12个部门</span><br><span class="line"># 随后 count(1)  再次限定结果集，将每个部门多少人求出来</span><br><span class="line">select department_id ,count(1)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 每个部门中 的 平均工资是多少</span><br><span class="line"># 求每个部门的 平均工资</span><br><span class="line">select department_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 先找到employees表</span><br><span class="line">#  然后group by 按照department_id 部门分组，在按照 工种job_id 进行 分组。</span><br><span class="line"># 比如90号部门的AD_PRES 在一行，90号部门的AD_VP工种 在一行，求平均工资值。</span><br><span class="line">select department_id,job_id ,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br><span class="line"></span><br><span class="line">#错误写法 这种错误就是 按照 department_id分组后的结果集，</span><br><span class="line"># 在select 后面的语句，并没有进行操作，只要显示last_name</span><br><span class="line"># 这里 按照 department_id分组后，展示字段last_name ，不可能的事情，是错误的写法</span><br><span class="line">select department_id ,last_name</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 错误写法</span><br><span class="line"># 只按照 department_id 进行分组，不能查到job_id 字段</span><br><span class="line">select department_id,job_id,avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 结论：在select 后面声明的 字段，除了组函数之外的字段，一定要出现在 group by 后面;</span><br><span class="line"># 反之group by 后面声明的 字段，不一定要出现在 select  后面</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 结论3.</span><br><span class="line"></span><br><span class="line">只要看见sql语句中有group by 就要想，结果集是 进行分组的结果， select 后面的字段，就是分组的字段，聚合函数就是对这分组后的操作。</span><br><span class="line">        如果分组后的结果继续筛选，就要使用having 进行筛选， 后面跟的是聚合函数。</span><br><span class="line">         这里不能使用where ,where  可以直接使用表中的字段作为筛选条件,但不能使用分组中的 聚合函数 作为筛选条件;</span><br><span class="line">  HAVING 必须要与 GROUP BY 配合使用,可以把分组计算的聚合函数和分组字段作为筛选条件。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按照部门分组，部门有 null,10,20,30,40,50,60,70,80,90,100,110</span><br><span class="line">select department_id  from employees</span><br><span class="line">group by department_id;</span><br><span class="line">#按照 部门和工资分组</span><br><span class="line"># 一个部门中有很多人工资不一样，一样的分为一组 如：90号部门工资有两种24000，17000</span><br><span class="line">select department_id ,salary from employees</span><br><span class="line">group by department_id,salary;</span><br><span class="line">#求 每个部门中 工资最高是多少</span><br><span class="line">select department_id , max(salary) from employees</span><br><span class="line">group by department_id;</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 每个部门中最高工资 ，且最高工资超过10000的部门。</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># 需求： 查询出 50，90，110 部门中，最高工资超过10000的部门是那几个。</span><br><span class="line"># 这里 where 后面的条件 是先筛选 符合条件的部门，提高了查询速度</span><br><span class="line">#     having 后面的筛选条件，记住就跟聚合函数</span><br><span class="line">select  department_id, MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">where department_id in(50,90,110)</span><br><span class="line">GROUP BY department_id</span><br><span class="line">having MAX(salary)&gt;10000 ; # 对分组再进行筛选</span><br><span class="line"></span><br><span class="line"># ----------------牢记sql语句的执行过程----------------------</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;单行函数&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;MySQL中的函数&quot;&gt;&lt;a href=&quot;#MySQL中的函数&quot; class=&quot;headerlink&quot; title=&quot;MySQL中的函数&quot;&gt;&lt;/a&gt;MySQL中的函数&lt;/h2&gt;&lt;h2 id=&quot;这里我将这</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>3.mysql第6章多表联合查询</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/3.mysql%E7%AC%AC6%E7%AB%A0%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/3.mysql%E7%AC%AC6%E7%AB%A0%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</id>
    <published>2019-10-03T02:00:00.000Z</published>
    <updated>2024-10-15T15:07:20.009Z</updated>
    
    <content type="html"><![CDATA[<h1><center>多表联合查询.md</center></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  第六章：多表联查</span><br><span class="line">        在现实情况中，查询字段不在同一张表中，就需要多张表进行联合查询</span><br><span class="line">        多表联查，需要有 连接条件</span><br><span class="line">  注意：在多表联查的时候，多张表请务必取别名，使用别名，指定字段是哪个表中的，这样提高查询的速度</span><br><span class="line"></span><br><span class="line">  sql 的执行顺序是：</span><br><span class="line">        1.先执行from 挑出表</span><br><span class="line">            from 表1，表2.(挑出这两个表来)</span><br><span class="line">        2.执行where 筛选条件，以及后面的语句</span><br><span class="line">            where 筛选条件</span><br><span class="line">            order by</span><br><span class="line">            limit 0,10;</span><br><span class="line">        3.最后挑选出需要的字段</span><br><span class="line">            select 指定字段</span><br><span class="line">  所以在from 后面给表起了别名，就会覆盖原表名，在后续的order by ...等等的语句中，必须使用表的别名来指定</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 查询员工表</span><br><span class="line">select *</span><br><span class="line">from employees;</span><br><span class="line">## 查询部门表</span><br><span class="line">select *</span><br><span class="line">from departments;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   sql  99版本的写法</span><br><span class="line">        多表联查</span><br><span class="line">        两个 交表，又叫两个表联查</span><br><span class="line">    多表查询的分类</span><br><span class="line">        角度1： 等值连接 vs 非等值连接</span><br><span class="line">        角度2： 自连接 vs 非自连接</span><br><span class="line">        角度3： 内连接 VS 外连接</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 将 员工表和部门表进行联合查询</span><br><span class="line">## 这种92写法 不用</span><br><span class="line">## 等值连接</span><br><span class="line">select *</span><br><span class="line">from employees e,</span><br><span class="line">     departments d</span><br><span class="line">where e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line">## 非等值连接</span><br><span class="line">select *</span><br><span class="line">from employees e,</span><br><span class="line">     job_grades jg</span><br><span class="line">where e.salary between jg.lowest_sal and jg.highest_sal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  自连接 VS 非自连接</span><br><span class="line">    表：表，自己连接自己</span><br><span class="line"> */</span><br><span class="line"># 自连接，练习：查询员工id 员工姓名 及其管理者id以及姓名</span><br><span class="line"># 思路：管理者也是员工，员工表自己连接自己，将一张表看作是 员工表，另一张表看作是 管理者表</span><br><span class="line"># 内连接：使用 join  on  (取两个表交集的结果，满足on 条件的所有结果)</span><br><span class="line"># 得到的结果是 满足on 后面的 条件的</span><br><span class="line">select e.employee_id, e.last_name, e.manager_id, gl.employee_id, gl.last_name, gl.manager_id</span><br><span class="line">from employees e</span><br><span class="line">         join employees gl</span><br><span class="line">              on e.employee_id = gl.manager_id</span><br><span class="line">order by e.salary desc;</span><br></pre></td></tr></table></figure><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><ul><li>表1 join 表2</li></ul><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><ul><li>左外连接 left …join…on..</li><li>右外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  内连接vs外连接</span><br><span class="line"></span><br><span class="line">  内连接：合并具有同一列的两个以上的表的行，结果集中 不包含一个表与另一个表不匹配的行</span><br><span class="line">  外连接：合并具有同一列的两个以上的表的行,结果集中除了包含一个表与另一个表匹配的行之外,还查询到了左表或右表中不匹配的行。</span><br><span class="line">            左外连接：查询的结果集中，包含左表的所有值(左表中不匹配的行,也会存在)，以及on后面条件，两个表之间匹配的行</span><br><span class="line">            右外连接：查询的结果集中，包含右表的所有值(右表中不匹配的行,也会存在)，以及on后面条件，两个表之间匹配的行</span><br><span class="line">            满外连接：左表，右表所有的匹配的行取出来，也包括有 左表不匹配的行，以及右表不匹配的行。</span><br><span class="line">    左外连接:两个表在连接过程中除了返回满足连接条件的行以外，还返回左表中不满足条件的行。</span><br><span class="line">    右外连接:两个表在连接过程中除了返回满足连接条件的行以外，还返回右表中不满足条件的行。</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line">  内连接</span><br><span class="line">   employees员工表107行数据。 departments是 部门表</span><br><span class="line">  # 下面语句结果集有106行，因为employees员工表中有一个人的 department_id为null 它没有部门，所以结果中没有它</span><br><span class="line">    # 其他所有人都有 department_id ，所有人都有部门。所以结果 106条（取两表匹配的行组成结果集，取交集）</span><br><span class="line">  练习：查询员工 last name 姓名 ,department_name部门姓名 信息（这里面是查询员工的，部门信息，有的员工没有存在任何一个部门那么结果就不返回，这里是内连接取交集）</span><br><span class="line"> */</span><br><span class="line">select *</span><br><span class="line">from employees e</span><br><span class="line">         join departments d on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 左外连接</span><br><span class="line">  employees员工表107行数据。 departments是 部门表</span><br><span class="line">   练习：查询所有的员工 last name 姓名 ,department_name部门姓名 信息</span><br><span class="line">  （这里面是查询所有员工的，部门信息，即使员工不存在部门，员工信息也要返回，所以是 左外连接 查询，查询结果是 所有员工匹配所有部门的行，以及包括不存在部门的员工信息行也在结果集中）</span><br><span class="line"># 结果是 左表所有值，以及 满足条件的交集值</span><br><span class="line"># 结果107行，虽然employees员工表中King的 department_id为null 它没有部门，但是这个left join 左表所有员工都展示出来，交表部分没有值就null 着</span><br><span class="line">#                                                                               department_id</span><br><span class="line"># 178,Kimberely,Grant,KGRANT,011.44.1644.429263,1999-05-24,SA_REP,7000,0.15,149,    null,       null,null,null,</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">select *</span><br><span class="line">from employees e</span><br><span class="line">         left join departments d on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  满外连接</span><br><span class="line">   mysql 不支持满外连接 FULL JOIN ON</span><br><span class="line">   可以通过其他方式实现满外链接</span><br><span class="line"></span><br><span class="line">  一般在使用满外链接，使用到合并多个结果集的操作</span><br><span class="line"></span><br><span class="line">  使用 UNION 操作符 合并查询结果</span><br><span class="line">  UNION操作符返回两个查询的结果集的并集,去除重复记录.（多一步去重操作）</span><br><span class="line">  开发中一般使用</span><br><span class="line">    UNION ALL  进行 两个查询结果集求并集，不去重，效率高</span><br><span class="line">结论:如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据，则尽量使用UMION ALL语句,以提高数据查询的效率</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一"><a href="#注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一" class="headerlink" title="注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一"></a>注意点：在思考外连接还是内连接的时候，左外还是右外的时候，一定要先思考两个表之间的关系，是一对多，还是多对多，还是多对一</h3><h2 id="二、七种JOIN的实现"><a href="#二、七种JOIN的实现" class="headerlink" title="二、七种JOIN的实现"></a>二、七种JOIN的实现</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410082319686.jpg" alt="Snipaste_2024-10-08_23-15-32"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># 中图：内连接（只要两表之间的共同满足条件的部分）</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e join departments d</span><br><span class="line">on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"># 左上图：左外连接</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e left join departments d</span><br><span class="line">                   on e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line"># 右上图：右外连接</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e right join departments d</span><br><span class="line">                    on d.department_id = e.department_id;</span><br><span class="line"></span><br><span class="line"># 左中图</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e left join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line">where d.department_id is NULL;</span><br><span class="line"></span><br><span class="line">#右中图</span><br><span class="line">select e.employee_id,d.department_name from</span><br><span class="line">employees e right join departments d</span><br><span class="line">on e.department_id = d.department_id</span><br><span class="line">where e.department_id is null;</span><br><span class="line"></span><br><span class="line"># 左下图：满外链接</span><br><span class="line"># 实现满外链接查询</span><br><span class="line">#  方法一： 使用 左上图和右中图，进行UNIN ALL 合并结果集，并给这两个图没有重复部分，所以可以使用UNIN ALL 不用去重操作，效率还快</span><br><span class="line">select e.employee_id,d.department_name from</span><br><span class="line">employees e</span><br><span class="line">left join departments d</span><br><span class="line">on e.department_id=d.department_id # (左外连接)</span><br><span class="line">UNION ALL</span><br><span class="line">select e.employee_id,d.department_name</span><br><span class="line">from employees e right join departments d</span><br><span class="line">    on d.department_id = e.department_id</span><br><span class="line">where e.department_id is null ;</span><br><span class="line"></span><br><span class="line"># 方法二：</span><br><span class="line"># 左中图和右上图 合并</span><br><span class="line">select e.last_name, e.manager_id, e.department_id, d.department_name, d.department_id</span><br><span class="line">from employees e</span><br><span class="line">         left join departments d</span><br><span class="line">                   on e.employee_id = d.manager_id # 左外连接 去除结果中匹配的行，只剩下一个不匹配的</span><br><span class="line">where e.department_id is null</span><br><span class="line">UNION ALL# 合并结果集</span><br><span class="line">select e.last_name, e.manager_id, e.department_id, d.department_name, d.department_id</span><br><span class="line">from employees e</span><br><span class="line">         right join departments d</span><br><span class="line">                    on e.department_id = d.department_id;# 右外连接，得到满足条件的所有行，以及右表的所有数据</span><br><span class="line"></span><br><span class="line"># 上面两个结果及合并，正好是满外链接。上面两个结果集，不存在重复的数据，直接使用UNION ALL 就可以还提升效率</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 右下图：满外链接，去除 满足条件的中间公共部分</span><br><span class="line"># 使用左中图和右中图进行合并 UNION ALL</span><br><span class="line">select e.employee_id,d.department_name from employees e</span><br><span class="line">left join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line">where e.department_id is null</span><br><span class="line">UNION ALL</span><br><span class="line">select e.employee_id,d.department_name from employees e</span><br><span class="line">right join departments d</span><br><span class="line">on d.department_id=e.department_id</span><br><span class="line">where e.department_id is null ;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><p>我们要 控制连接表的数量 。多表连接就相当于嵌套 for 循环一样,非常消耗资源,会让 SQL 查询性能下<br>降得很严重,因此不要连接不必要的表。在许多 DBMS 中,也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段,数据类型保持绝对一致;多表关联查询时, 保<br>证被关联的字段需要有索引。<br>说明:即使双表 join 也要注意表索引、SQL 性能。<br>来源:阿里巴巴《Java开发手册》</p></blockquote><h2 id="多表查询的理解"><a href="#多表查询的理解" class="headerlink" title="多表查询的理解"></a>多表查询的理解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 8. 查询哪个城市没有部门</span><br><span class="line">desc locations;</span><br><span class="line">desc departments;</span><br><span class="line"></span><br><span class="line">select l.city,d.location_id</span><br><span class="line">from departments d right join locations l on d.location_id = l.location_id</span><br><span class="line">where d.location_id is  null;</span><br><span class="line"></span><br><span class="line"># 从from 后面 开始读,departments 部门表和 locations 地址表 连接</span><br><span class="line"># (on 后面的条件 可先想两个表之间是 多对多 还是 1对多,如上 部门可以存在 多个 城市中,on后面是取部门在这个城市的行, 部门也可以不在这个城市 部门的locationid也可以是null 如果是left join 表示 部门不存在城市中的值也要 )</span><br><span class="line"># on 后面的意思是</span><br><span class="line"># 部门表中 有 location_id 地址id 的数据全部取出来.</span><br><span class="line"># 如果 部门表中的某一行中的 地址id 是null 这个部门没有对应的城市</span><br><span class="line"></span><br><span class="line"># 反之: join  表示 location 表中的 部门存在的数据 全部取出来</span><br><span class="line">#      right join  表示地址表 location 表 的所有数据取出来,包括有城市,不存在部门,部门id为null的数据也取出来.</span><br><span class="line"># where d.location_id is  null; 表示交表后结果集取出,部门是null的数据,就是城市没有部门的数据</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多表查询练习"><a href="#多表查询练习" class="headerlink" title="多表查询练习"></a>多表查询练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">  # 练习:</span><br><span class="line"># 1.显示所有员工的姓名,部门号和部门名称。</span><br><span class="line"># 2.查询90号部门员工的job_id和90号部门的location_id</span><br><span class="line"># 3.选择所有有奖金的员工的 last_name , department_name , location_id , city</span><br><span class="line"># 4.选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name</span><br><span class="line"># 5.查询员工所在的部门名称、部门地址、姓名、工作、工资,其中员工所在部门的部门名称为’Executive’</span><br><span class="line"># 6.选择指定员工的姓名,员工号,以及他的管理者的姓名和员工号,结果类似于下面的格式</span><br><span class="line"># 7.查询哪些部门没有员工</span><br><span class="line"># 8. 查询哪个城市没有部门</span><br><span class="line"># 9. 查询部门名为 Sales 或 IT 的员工信息</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> # 1.显示所有员工的姓名,部门号和部门名称。</span><br><span class="line"># 注意这里是所有员工,就要求 员工表的所有数据都显示出来</span><br><span class="line"></span><br><span class="line">select * from employees;</span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line">select e.last_name,e.department_id,d.department_name</span><br><span class="line">from employees e left join departments d</span><br><span class="line">on e.department_id=d.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 工作职位等级,最低最高工资</span><br><span class="line">select * from job_grades;</span><br><span class="line"># 工作时间记录 入职时间,离职时间</span><br><span class="line">select * from job_history;</span><br><span class="line"># 工作表 工作名称 最高工资,最低工资</span><br><span class="line">select * from jobs;</span><br><span class="line">#实际住址表</span><br><span class="line">select * from locations;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2.查询 90号部门  员工的job_id和90号部门的location_id</span><br><span class="line"># 思路  内连接 员工表和部门表,找到所有员工存在部门的数据集</span><br><span class="line"># 员工表中有 部门id, 部门表 departments 中 有 location_id 地址id</span><br><span class="line"></span><br><span class="line">select e.job_id,d.location_id</span><br><span class="line">from departments d join employees e</span><br><span class="line">on d.department_id=e.department_id</span><br><span class="line">where d.department_id=90;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3.查询所有 有奖金的员工的 last_name , department_name , location_id , city</span><br><span class="line"># 这里面 有个人,有奖金,但是没有部门,也要显示出来,对应也没有城市,也要显示出来</span><br><span class="line"># 所以都是左外连接</span><br><span class="line">select e.last_name,d.department_name,l.location_id,l.city</span><br><span class="line">from employees e</span><br><span class="line">left join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line">left join locations l</span><br><span class="line">on d.location_id=l.location_id</span><br><span class="line">where e.commission_pct is not null ;</span><br><span class="line"></span><br><span class="line">#4.选择city在Toronto 工作的员工的 last_name , job_id , department_id , department_name</span><br><span class="line"></span><br><span class="line">select e.last_name,e.job_id,e.department_id,d.department_name</span><br><span class="line">from employees e  join departments d</span><br><span class="line">on e.department_id=d.department_id</span><br><span class="line"> join locations l</span><br><span class="line">    on d.location_id = l.location_id</span><br><span class="line">where l.city=&#x27;Toronto&#x27;;</span><br><span class="line"></span><br><span class="line"># 总结: 写多表联查的时候,先看字段来自于哪些表,再看表与表之间用什么字段连接, 先直接写join on 连接,写完后再考虑是外连接还是内连接;</span><br><span class="line"></span><br><span class="line"># 5.查询员工所在的 部门名称、部门地址、姓名、工作、工资, 其中员工所在部门的部门名称为’Executive’</span><br><span class="line"></span><br><span class="line">select d.department_name,l.street_address,e.last_name,e.job_id,e.salary</span><br><span class="line">from departments d join employees e</span><br><span class="line"> on d.department_id = e.department_id</span><br><span class="line">join locations l on d.location_id = l.location_id</span><br><span class="line">where d.department_name=&#x27;Executive&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6.选择 指定员工 的姓名,员工号,以及他的管理者的姓名和员工号,结果类似于下面的格式</span><br><span class="line"># employees  Emp # manager Mgr#</span><br><span class="line"># kochhar  101  king  100</span><br><span class="line">select * from employees;</span><br><span class="line"># 员工表的自连接</span><br><span class="line">select Emp.last_name,Emp.employee_id,Mgr.last_name,Mgr.employee_id</span><br><span class="line">from employees Emp left join  employees Mgr</span><br><span class="line">on Emp.manager_id=Mgr.employee_id;</span><br><span class="line"></span><br><span class="line"># 7.查询哪些部门没有员工</span><br><span class="line">select * from employees e right join departments d on e.department_id = d.department_id</span><br><span class="line">where e.employee_id is null;</span><br><span class="line"># 8. 查询哪个城市没有部门</span><br><span class="line">desc locations;</span><br><span class="line">desc departments;</span><br><span class="line"></span><br><span class="line">select l.city,d.location_id</span><br><span class="line">from departments d right join locations l on d.location_id = l.location_id</span><br><span class="line">where d.location_id is  null;</span><br><span class="line"></span><br><span class="line"># 从from 后面 开始读,departments 部门表和 locations 地址表 连接</span><br><span class="line"># (on 后面的条件 可先想两个表之间是 多对多 还是 1对多,如上 部门可以存在 多个 城市中,on后面是取部门在这个城市的行, 部门也可以不在这个城市 部门的locationid也可以是null 如果是left join 表示 部门不存在城市中的值也要 )</span><br><span class="line"># on 后面的意思是</span><br><span class="line"># 部门表中 有 location_id 地址id 的数据全部取出来.</span><br><span class="line"># 如果 部门表中的某一行中的 地址id 是null 这个部门没有对应的城市</span><br><span class="line"></span><br><span class="line"># 反之: join  表示 location 表中的 部门存在的数据 全部取出来</span><br><span class="line">#      right join  表示地址表 location 表 的所有数据取出来,包括有城市,不存在部门,部门id为null的数据也取出来.</span><br><span class="line"># where d.location_id is  null; 表示交表后结果集取出,部门是null的数据,就是城市没有部门的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from locations;</span><br><span class="line"></span><br><span class="line"># 9. 查询  部门名为 Sales 或 IT 的 员工信息</span><br><span class="line">select e.last_name,d.department_name</span><br><span class="line">from employees e join departments d on e.department_id=d.department_id</span><br><span class="line">where d.department_name in (&#x27;Sales&#x27;,&#x27;IT&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习-二"><a href="#练习-二" class="headerlink" title="练习 二"></a>练习 二</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> #1.所有有门派的人员信息</span><br><span class="line">#     ( A、B两表共有)</span><br><span class="line">select * from t_dept;# 门派表</span><br><span class="line"></span><br><span class="line">select * from t_emp;# 人员表</span><br><span class="line"></span><br><span class="line">select * from</span><br><span class="line">t_dept d left join t_emp e</span><br><span class="line">on d.id=e.deptId;</span><br><span class="line"></span><br><span class="line"># on 后面 读作 门派中有 人 的数据 取出来.</span><br><span class="line"># 题目中要求所有门派,那么门派中也可能没有人,所以使用的是 left join 左外连接, 将所有门派给取出来.</span><br><span class="line"># 门派中有人,门派中没人都取出来</span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;多表联合查询.md&lt;/center&gt;&lt;/h1&gt;



&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>2.mysql第5章排序和分页</title>
    <link href="https://protonlml.github.io/2019/10/03/mysql/2.mysql%E7%AC%AC5%E7%AB%A0%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%A1%B5/"/>
    <id>https://protonlml.github.io/2019/10/03/mysql/2.mysql%E7%AC%AC5%E7%AB%A0%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%A1%B5/</id>
    <published>2019-10-03T01:00:00.000Z</published>
    <updated>2024-10-08T15:27:18.886Z</updated>
    
    <content type="html"><![CDATA[<h1><center>排序和分页</center></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  第五章：排序   order by  asc(升序默认) desc(降序)</span><br><span class="line">         与</span><br><span class="line">         分页 limit 偏移量，每页展示条数</span><br><span class="line">            pageNO 表示当前页码</span><br><span class="line">          limit (pageNO-1)*pageSize, pageSize;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 排序  order by  和 limit 0,10 一般都是在sql语句最后，sql结果集，进行排序，排完序进行分页</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 按照salary 降序排列</span><br><span class="line">select * from employees</span><br><span class="line">order by salary desc ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示第1页，每页显示10条</span><br><span class="line">select * from employees</span><br><span class="line">limit 0,10;</span><br><span class="line"></span><br><span class="line"># 显示员工表 第32条第33条的信息</span><br><span class="line">select *  from employees</span><br><span class="line">limit 31,2;</span><br><span class="line"></span><br><span class="line"># where ... order by ... limit</span><br><span class="line"># 使用顺序,limit 是最后的。</span><br><span class="line">#  下面的执行顺序是</span><br><span class="line">select employee_id,last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary&gt;6000</span><br><span class="line">order by salary desc</span><br><span class="line">limit 10,10;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序分页练习"><a href="#排序分页练习" class="headerlink" title="排序分页练习"></a>排序分页练习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  练习</span><br><span class="line">    #1. 查询员工的姓名和部门号和年薪,按年薪降序,按姓名升序显示</span><br><span class="line">    #2. 选择工资不在 8000 到 17000 的员工的姓名和工资,按工资降序,显示第21到40位置的数据</span><br><span class="line">    #3. 查询邮箱中包含 e 的员工信息,并先按邮箱的字节数降序,再按部门号升序</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #1. 查询员工的 姓名和 部门号和 年薪,  按年薪降序,  按姓名升序显示</span><br><span class="line"></span><br><span class="line">select last_name name ,department_id bm, salary*(1+IFNULL(commission_pct,0))*12  nx</span><br><span class="line">from employees</span><br><span class="line">order by nx desc,name asc;</span><br><span class="line"></span><br><span class="line">#2. 选择工资不在 8000 到 17000 的员工的姓名和工资,按工资降序,显示第21到40位置的数据</span><br><span class="line"></span><br><span class="line">select last_name,salary from employees</span><br><span class="line">where salary not between 8000 and 17000</span><br><span class="line">order by salary desc</span><br><span class="line">limit 20 ,20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3. 查询邮箱中包含 e 的员工信息,并先按邮箱的字节数降序,再按部门号升序</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where email like &#x27;%e%&#x27;</span><br><span class="line">order by length(email)  desc, department_id asc;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;排序和分页&lt;/center&gt;&lt;/h1&gt;

&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>1.mysql1~4章学习</title>
    <link href="https://protonlml.github.io/2019/10/02/mysql/1.mysql1~4%E7%AB%A0%E5%AD%A6%E4%B9%A0/"/>
    <id>https://protonlml.github.io/2019/10/02/mysql/1.mysql1~4%E7%AB%A0%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-10-02T01:00:00.000Z</published>
    <updated>2024-10-20T15:25:23.256Z</updated>
    
    <content type="html"><![CDATA[<h1><center>MySQL</center></h1><h3 id="一、SQL-语句的注意事项"><a href="#一、SQL-语句的注意事项" class="headerlink" title="一、SQL 语句的注意事项"></a>一、SQL 语句的注意事项</h3><blockquote><p>&#x2F;*<br> SQL 语句的注意事项<br>   MySQL 在 Windows 环境下是大小写不敏感的<br>   MySQL 在 Linux 环境下是大小写敏感的<br>   数据库名、表名、表的别名、变量名是严格区分大小写的<br>   关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。<br>   推荐采用统一的书写规范:<br>   数据库名、表名、表别名、字段名、字段别名等都小写<br>   SQL 关键字、函数名、绑定变量等都大写<br>   一句写完使用 ;  结尾</p><p> 关于标点符号<br>   必须保证所有的()、单引号、双引号是成对结束的<br>   必须使用英文状态下的半角输入方式<br>   字符串型和日期时间类型的数据可以使用单引号(‘ ‘)表示<br>   列的别名,尽量使用双引号(“ “),而且不建议省略as<br>   select id as “编号”, <code>name</code> as “姓名” from t_stu; #起别名时,as都可以省略<br>   select id as 编号, <code>name</code> as 姓名 from t_stu; #如果字段别名中没有空格,那么可以省略””<br>   select id as 编 号, <code>name</code> as 姓 名 from t_stu; #错误,如果字段别名中有空格,那么不能省略””</p><p>*&#x2F;</p></blockquote><h3 id="二、着重号’-‘"><a href="#二、着重号’-‘" class="headerlink" title="二、着重号’ ‘"></a>二、着重号’ ‘</h3><blockquote><p>由于 order by 是排序关键字，而数据库中又有order表，此时若想查询此表</p><p>查询的时候要加入 ‘’ 单引号，来告诉Mysql这是一个表</p><h4 id="select-from-‘order"><a href="#select-from-‘order" class="headerlink" title="select * from ‘order&#96;;"></a>select * from ‘order&#96;;</h4></blockquote><h3 id="三、desc-表名（查看表结构）"><a href="#三、desc-表名（查看表结构）" class="headerlink" title="三、desc 表名（查看表结构）"></a>三、desc 表名（查看表结构）</h3><blockquote><ol start="0"><li>查看表结构</li><li>desc 表名;</li></ol><h4 id="DESC-employees"><a href="#DESC-employees" class="headerlink" title="DESC  employees;"></a>DESC  employees;</h4></blockquote><h3 id="四、求最大值，最小值"><a href="#四、求最大值，最小值" class="headerlink" title="四、求最大值，最小值"></a>四、求最大值，最小值</h3><blockquote><p>  求最大，最小值<br>  least(字段1，字段2)<br>  greatest(字段1，字段2)</p><p>取字段的最大最小值</p><h4 id="select-least-salary-employee-id-from-employees"><a href="#select-least-salary-employee-id-from-employees" class="headerlink" title="select least(salary,employee_id) from employees;"></a>select least(salary,employee_id) from employees;</h4></blockquote><h3 id="五、范围查找"><a href="#五、范围查找" class="headerlink" title="五、范围查找"></a>五、范围查找</h3><blockquote><p> 范围查找<br> 求区间的值 100 -10000 之间的</p><h3 id="关键字：between-100-and-10000"><a href="#关键字：between-100-and-10000" class="headerlink" title="关键字：between 100 and 10000;"></a>关键字：between 100 and 10000;</h3><p> 相当于<br>   “&gt;&#x3D;  100 &amp;&amp; &lt;&#x3D;10000;”</p><h4 id="select-from-employees-where-salary-100-salary"><a href="#select-from-employees-where-salary-100-salary" class="headerlink" title="select * from employees where salary&gt;&#x3D;100 &amp;&amp; salary&lt;&#x3D;10000 ;"></a>select * from employees where salary&gt;&#x3D;100 &amp;&amp; salary&lt;&#x3D;10000 ;</h4><h4 id="select-from-employees-where-salary-between-100-and-10000"><a href="#select-from-employees-where-salary-between-100-and-10000" class="headerlink" title="select * from employees where salary between 100 and 10000;"></a>select * from employees where salary between 100 and 10000;</h4><h3 id="相当于-and"><a href="#相当于-and" class="headerlink" title="&amp;&amp; 相当于 and"></a>&amp;&amp; 相当于 and</h3><h4 id="select-from-employees-where-salary-1000-and-salary"><a href="#select-from-employees-where-salary-1000-and-salary" class="headerlink" title="select * from employees where salary &gt;&#x3D;1000 and salary&lt;&#x3D;10000;"></a>select * from employees where salary &gt;&#x3D;1000 and salary&lt;&#x3D;10000;</h4></blockquote><h3 id="六、-in-set-not-in-set-在-或-不在"><a href="#六、-in-set-not-in-set-在-或-不在" class="headerlink" title="六、  in (set) &#x2F; not in (set) 在       或 不在"></a>六、  in (set) &#x2F; not in (set) 在       或 不在</h3><blockquote><p>in (set) &#x2F; not in (set)<br>   在       或 不在<br>   离散值的查找<br>   某个值在不在这个集合中</p><p>练习1： 查找部门为 10，20，30的部门员工信息</p><h4 id="select-from-employees-where-department-id-in-10-20-30"><a href="#select-from-employees-where-department-id-in-10-20-30" class="headerlink" title="select * from employees where department_id in (10,20,30);"></a>select * from employees where department_id in (10,20,30);</h4><p>– where department_id&#x3D;10 or department_id&#x3D;20 or department_id&#x3D;30;</p></blockquote><h3 id="七、非符号类型的运算符"><a href="#七、非符号类型的运算符" class="headerlink" title="七、非符号类型的运算符"></a>七、非符号类型的运算符</h3><blockquote><h3 id="IS-NULL-IS-NOT-NULL-ISNULL-函数"><a href="#IS-NULL-IS-NOT-NULL-ISNULL-函数" class="headerlink" title="IS NULL  ; IS NOT NULL ; ISNULL() 函数"></a>IS NULL  ; IS NOT NULL ; ISNULL() 函数</h3><h4 id="select-from-employees-where-commission-pct-is-null"><a href="#select-from-employees-where-commission-pct-is-null" class="headerlink" title="select * from employees where commission_pct is null ;"></a>select * from employees where commission_pct is null ;</h4><h4 id="select-from-employees-where-ISNULL-commission-pct"><a href="#select-from-employees-where-ISNULL-commission-pct" class="headerlink" title="select * from employees where ISNULL(commission_pct);"></a>select * from employees where ISNULL(commission_pct);</h4><h3 id="select-from-employees-where-commission-pct-NULL"><a href="#select-from-employees-where-commission-pct-NULL" class="headerlink" title="select * from employees where commission_pct &lt;&#x3D;&gt; NULL;"></a>select * from employees where commission_pct &lt;&#x3D;&gt; NULL;</h3></blockquote><h3 id="八-、distinct-字段-去除重复的-字段。"><a href="#八-、distinct-字段-去除重复的-字段。" class="headerlink" title="八 、distinct 字段   去除重复的 字段。"></a>八 、distinct 字段   去除重复的 字段。</h3><blockquote><h3 id="在SELECT语句中使用关键字DISTINCT去除重复行"><a href="#在SELECT语句中使用关键字DISTINCT去除重复行" class="headerlink" title="在SELECT语句中使用关键字DISTINCT去除重复行"></a>在SELECT语句中使用关键字DISTINCT去除重复行</h3><p>&#x2F;<strong>SELECT DISTINCT department_id FROM employees;</strong>&#x2F;</p><p>针对于：</p><h4 id="SELECT-DISTINCT-department-id-salary-FROM-employees"><a href="#SELECT-DISTINCT-department-id-salary-FROM-employees" class="headerlink" title="SELECT DISTINCT department_id,salary FROM employees;"></a>SELECT DISTINCT department_id,salary FROM employees;</h4><p>这里有两点需要注意:</p><ol><li>DISTINCT 需要放到所有列名的前面,如果写成 SELECT salary, DISTINCT department_id<br>FROM employees 会报错。</li><li>DISTINCT 其实是对后面所有列名的组合进行去重,你能看到最后的结果是 74 条,因为这 74 个部<br>门id不同,都有 salary 这个属性值。如果你想要看都有哪些不同的部门(department_id),只需<br>要写 DISTINCT department_id 即可,后面不需要再加其他的列名了。</li></ol></blockquote><h3 id="九、-like-模糊查询"><a href="#九、-like-模糊查询" class="headerlink" title="九、  like  模糊查询"></a>九、  like  模糊查询</h3><blockquote><p>% 表示匹配 不确定个数的字符（0个，1个，或者多个）</p><h4 id="练习-查询last-name-中包含字符’a’-的员工信息"><a href="#练习-查询last-name-中包含字符’a’-的员工信息" class="headerlink" title="练习: 查询last_name 中包含字符’a’ 的员工信息"></a>练习: 查询last_name 中包含字符’a’ 的员工信息</h4><h4 id="select-from-employees-where-last-name-like-‘-a-’"><a href="#select-from-employees-where-last-name-like-‘-a-’" class="headerlink" title="select * from employees where last_name like ‘%a%’;"></a>select * from employees where last_name like ‘%a%’;</h4></blockquote><h3 id="十、-IFNULL-字段-0-解释：字段为null-则以0参与运算"><a href="#十、-IFNULL-字段-0-解释：字段为null-则以0参与运算" class="headerlink" title="十、  IFNULL(字段,0)        解释：字段为null 则以0参与运算"></a>十、  IFNULL(字段,0)        解释：字段为null 则以0参与运算</h3><blockquote><h3 id="查询基本薪资不在9000-12000之间的员工编号和基本薪资"><a href="#查询基本薪资不在9000-12000之间的员工编号和基本薪资" class="headerlink" title="查询基本薪资不在9000-12000之间的员工编号和基本薪资"></a>查询基本薪资不在9000-12000之间的员工编号和基本薪资</h3><h4 id="SELECT-employee-id-salary-FROM-employees-WHERE-NOT-salary-9000-AND-salary"><a href="#SELECT-employee-id-salary-FROM-employees-WHERE-NOT-salary-9000-AND-salary" class="headerlink" title="SELECT employee_id,salary FROM employees WHERE NOT (salary &gt;&#x3D; 9000 AND salary &lt;&#x3D; 12000);"></a>SELECT employee_id,salary FROM employees WHERE NOT (salary &gt;&#x3D; 9000 AND salary &lt;&#x3D; 12000);</h4><h4 id="查询员工一年的工资-（工资-奖金）-12-（有的员工的奖金是null-所以结果是-null-）"><a href="#查询员工一年的工资-（工资-奖金）-12-（有的员工的奖金是null-所以结果是-null-）" class="headerlink" title="查询员工一年的工资 （工资+奖金）*12 （有的员工的奖金是null 所以结果是 null ）"></a>查询员工一年的工资 （工资+奖金）*12 （有的员工的奖金是null 所以结果是 null ）</h4><h4 id="正确写法："><a href="#正确写法：" class="headerlink" title="正确写法："></a>正确写法：</h4><blockquote><h4 id="select-last-name-first-name-salary-salary-1-IFNULL-commission-pct-0-12-“一年工资-“from-employees"><a href="#select-last-name-first-name-salary-salary-1-IFNULL-commission-pct-0-12-“一年工资-“from-employees" class="headerlink" title="select last_name, first_name, salary,salary * (1 + IFNULL(commission_pct,0)) * 12 “一年工资 “from employees;"></a>select last_name, first_name, salary,salary * (1 + IFNULL(commission_pct,0)) * 12 “一年工资 “from employees;</h4></blockquote></blockquote><h3 id="十、字段中求最大值，最小值"><a href="#十、字段中求最大值，最小值" class="headerlink" title="十、字段中求最大值，最小值"></a>十、字段中求最大值，最小值</h3><blockquote><p> 求最大，最小值<br>       least(字段1，字段2)<br>       greatest(字段1，字段2)</p><p>最小值运算符 语法格式为:LEAST(值1,值2,…,值n)。其中,“值n”表示参数列表中有n个值。在有<br>两个或多个参数的情况下,返回最小值。</p><blockquote><p> SELECT    LEAST (1,0,2),  LEAST(‘b’,’a’,’c’),  LEAST(1,NULL,2);</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;+---------------+--------------------+-----------------+</span><br><span class="line">&gt;| LEAST (1,0,2) | LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | LEAST(1,NULL,2) |</span><br><span class="line">&gt;+---------------+--------------------+-----------------+</span><br><span class="line">&gt;|0|a|NULL   |</span><br><span class="line">&gt;+---------------+--------------------+-----------------+</span><br></pre></td></tr></table></figure><p>由结果可以看到,当参数是整数或者浮点数时,LEAST将返回其中最小的值;当参数为字符串时,返回字<br>母表中顺序最靠前的字符;当比较值列表中有NULL时,不能判断大小,返回值为NULL。</p></blockquote><blockquote><p>最大值运算符 语法格式为:GREATEST(值1,值2,…,值n)。其中,n表示参数列表中有n个值。当有<br>两个或多个参数时,返回值为最大值。假如任意一个自变量为NULL,则GREATEST()的返回值为NULL。</p><blockquote><p>SELECT GREATEST(1,0,2), GREATEST(‘b’,’a’,’c’), GREATEST(1,NULL,2);</p><p>结果：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;+-----------------+-----------------------+--------------------+</span><br><span class="line">&gt;| GREATEST(1,0,2) | GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | GREATEST(1,NULL,2) |</span><br><span class="line">&gt;+-----------------+-----------------------+--------------------+</span><br><span class="line">&gt;|2   | c   | NULL    |</span><br><span class="line">&gt;+-----------------+-----------------------+--------------------+</span><br></pre></td></tr></table></figure><p>由结果可以看到,当参数中是整数或者浮点数时,GREATEST将返回其中最大的值;当参数为字符串时,<br>返回字母表中顺序最靠后的字符;当比较值列表中有NULL时,不能判断大小,返回值为NULL。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  1.查询语句</span><br><span class="line">     select * from 表名</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select 1+12 from dual; # dual 是一个伪表的概念;</span><br><span class="line"></span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">select  employee_id,employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id  from employees;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  2.查询 字段 的别名(列的别名)</span><br><span class="line">        (作用：查询出来的表字段和java对象中的属性值相对应)</span><br><span class="line">        字段名 as &quot;别名&quot;</span><br><span class="line">    简写: 字段名  别名  （别名中不能有空格）</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">## 取别名，给 每个字段 取别名</span><br><span class="line"></span><br><span class="line">desc employees;</span><br><span class="line"># 1直接在字段后面跟着 别名  2 使用 as 关键字来取别名 3 如果别名上面有空格，那么这个别名要使用&quot;&quot; 引起来</span><br><span class="line">select first_name 名字 , last_name 姓氏 , email as 邮箱 , phone_number  &quot;手 机号&quot;  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  3. 查询结果 去重</span><br><span class="line">     distinct 字段</span><br><span class="line"> */</span><br><span class="line">select distinct department_id from employees;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  4.  空值参与运算，null</span><br><span class="line"></span><br><span class="line">      只要字段是null值，那么结果一定是 null</span><br><span class="line">      实际开发中，某个字段值是null 我们想将其看作是 0  ,使用 IFNULL(字段,0);</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"> # 查询员工一年的工资 （工资+奖金）*12 （有的员工的奖金是null 所以结果是 null ）</span><br><span class="line">select last_name, first_name, salary * (1 + commission_pct) * 12 一年工资</span><br><span class="line">from employees;</span><br><span class="line"># 正确写法：</span><br><span class="line">select last_name, first_name, salary,salary * (1 + IFNULL(commission_pct,0)) * 12 一年工资</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  5. 查询常数</span><br><span class="line">     特殊场景需要： 查询时，某个字段在每一条记录中都存在，但是又没有表中的字段与之对应。</span><br><span class="line">                 需要返回的结果集中，每一条记录都带有这个常数</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select &#x27;尚硅谷&#x27;, employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  6. 过滤数据 where  声明在from 后面</span><br><span class="line">      select * from 表名 where 过滤条件</span><br><span class="line"></span><br><span class="line">     在MySql中 where 后面的 语句 是一个可以计算得出结果的，条件成立 返回1，条件不成立返回0</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where job_id = &#x27;SH_CLERK&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  --select 查询的基本练习</span><br><span class="line">    1.查询员工12个月的工资总和，并起别名为 ANNUAL SALARY</span><br><span class="line">    2.查询employees表中去除重复的job id以后的数居</span><br><span class="line">    3.查询工资大于12000的 员工姓名和工资</span><br><span class="line">    4.查询员工号为176的员工的姓名和部门号</span><br><span class="line">    5.显示表departments的结构，并查而其中的全部数据</span><br><span class="line"> */</span><br><span class="line"> ## 1.查询员工12个月的工资总和，并起别名为 ANNUAL SALARY</span><br><span class="line"> select salary*(1+IFNULL(commission_pct,0))*12   &quot;ANNUAL SALARY&quot; from employees;</span><br><span class="line">## 2.查询employees表中去除重复的job_id 以后的数据</span><br><span class="line">select distinct job_id</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##    3.查询工资大于12000的 员工姓名和工资</span><br><span class="line"></span><br><span class="line">select last_name,first_name,salary from employees</span><br><span class="line">where salary &gt; 12000;</span><br><span class="line"></span><br><span class="line">## 4.查询员工号为176的员工的姓名和部门号</span><br><span class="line">select * from employees</span><br><span class="line">where employee_id=176;</span><br><span class="line"></span><br><span class="line">## 5.显示表departments的结构，并查而其中的全部数据</span><br><span class="line">desc departments;</span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  select * from jobs;</span><br><span class="line">select * from job_grades;</span><br><span class="line">select * from job_history;</span><br><span class="line"> */</span><br><span class="line">## -----------------------------------------------------------------------##</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  运算符</span><br><span class="line">     + - * /   div(除)  %   mod(取模)</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> ## 6. + - 运算符,浮点数参与运算，结果就是浮点型</span><br><span class="line">select 12+11, 22-0, 50+13.2 , 55-33.8  from dual;</span><br><span class="line">select 78+&#x27;12&#x27; from dual;## + 表示 加号，‘’单引号中的数字，隐式转换为数字1</span><br><span class="line">select 12+&#x27;e&#x27; from  dual;## &#x27;e&#x27; 看作是0</span><br><span class="line"></span><br><span class="line">## 7. * /(div)</span><br><span class="line">SELECT 100,</span><br><span class="line">       100 * 1,</span><br><span class="line">       100 * 1.0,</span><br><span class="line">       100 / 1.0,</span><br><span class="line">       100 / 2,</span><br><span class="line">       100 + 2 * 5 / 2,</span><br><span class="line">       100 / 3,</span><br><span class="line">       100 DIV 0</span><br><span class="line">FROM dual;</span><br><span class="line"></span><br><span class="line">## 练习：查询员工的ID 为偶数的员工信息</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where employee_id%2=0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  比较运算符</span><br><span class="line">     =   &lt;=&gt; （安全等于，为null而生的）</span><br><span class="line">     &lt;&gt;  !=   (不等于)</span><br><span class="line">     &lt; &lt;=</span><br><span class="line">     &gt; &gt;=</span><br><span class="line">比较运算符，返回的是真或者假， 这里真是1 假是0</span><br><span class="line"> */</span><br><span class="line"> select 1=2,1!=2,2&lt;&gt;3 from dual;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 8.NULL 参与运算，结果还是NULL</span><br><span class="line">## where 后面跟的结果是 null</span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct=null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 9.非符号类型的运算符</span><br><span class="line">## IS NULL  ; IS NOT NULL ; ISNULL() 函数</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct is null ;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where ISNULL(commission_pct);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct &lt;=&gt; NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   查询工资不在100-10000 之间的员工信息</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where NOT salary between 100 and 10000;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where salary &lt;100 || salary&gt;10000;</span><br><span class="line">## || 相当于 or</span><br><span class="line">select * from employees</span><br><span class="line">where salary &lt;100 or salary&gt;10000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 练习2：查询员工工资不是 6000 7000 8000 的员工信息</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where salary not in(6000,7000,8000);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">        like  模糊查询</span><br><span class="line">        % 表示匹配 不确定个数的字符（0个，1个，或者多个）</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">## 练习: 查询last_name 中包含字符&#x27;a&#x27; 的员工信息</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;%a%&#x27;;</span><br><span class="line">## 练习: 查询last_name 中 第一个是字符&#x27;a&#x27; 的员工信息</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;a%&#x27;;</span><br><span class="line">## 练习：查咨last_name 中 第二个是字符&#x27;a&#x27; 的员工信息</span><br><span class="line">## 这里 _ 表示任意字符占第一个位值，</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;_a%&#x27;;</span><br><span class="line"></span><br><span class="line">## 练习：查询last_name 中包含a 又包含 e 的 员工信息</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;%a%&#x27; and last_name like &#x27;%e%&#x27;;</span><br><span class="line"></span><br><span class="line">## 练习： 查询 第二个字符是_ 且 第三个字符是a 的员工信息</span><br><span class="line">##  like &#x27;_/_a%&#x27;; 表示 第一个字符是任意字符占第一个位置，第二个字符是_ 这里使用 \ 转义了就表示_ ， 第三个字符就是a ，后面%模糊匹配</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;_\_a%&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  正则表达式</span><br><span class="line">    ^s 表示以s开始</span><br><span class="line">    t$ 表示以t结尾</span><br><span class="line">   用到了查表</span><br><span class="line"> */</span><br><span class="line"> SELECT &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   逻辑运算符</span><br><span class="line">    and  与</span><br><span class="line">    or  或</span><br><span class="line">    not 非</span><br><span class="line">    XOR  异或（两边取不同，左真右假，左假右真，追求的就是这个异）</span><br><span class="line"> */</span><br><span class="line">SELECT 1 XOR -1, 1 XOR 0, 0 XOR 0, 1 XOR NULL, 1 XOR 1 XOR 1, 0 XOR 0 XOR 0;</span><br><span class="line"></span><br><span class="line">## 在10和20部门员工，且工资小于8000的 员工信息</span><br><span class="line">## 不在10和20部门员工，且工资大于8000的员工信息</span><br><span class="line">select last_name,department_id,salary</span><br><span class="line">from employees</span><br><span class="line">where department_id in (10,20) XOR salary &gt; 8000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   记住 () 的优先级最高</span><br><span class="line">   以后要想先运算谁，就用() 给它包起来</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 记住 least Greatest  只能用在 select 后面的 字段上面。</span><br><span class="line"># where  后面跟的条件，sql先执行where后面的条件，成立返回1，不成立返回0.</span><br><span class="line"># 这里面where 后面跟的 条件根本不能成立</span><br><span class="line">select * from employees</span><br><span class="line"> where 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    对字段进行限定的 关键词</span><br><span class="line">       distinct 字段   去除重复的 字段。</span><br><span class="line">       IFNULL(字段,0)  字段为null 则以0参与运算</span><br><span class="line">    求最大，最小值</span><br><span class="line">        least(字段1，字段2)</span><br><span class="line">        greatest(字段1，字段2)</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  练习</span><br><span class="line"> */</span><br><span class="line"># 1.选择工资不在5000到12000的员工的姓名和工资</span><br><span class="line">select last_name 姓名, salary 工资 from employees</span><br><span class="line">where salary not between 5000 and 12000;</span><br><span class="line"></span><br><span class="line"># 2.选择在20或50号部门工作的员工姓名和部门号</span><br><span class="line">select * from employees em</span><br><span class="line">where em.department_id =20|| em.department_id=50;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where department_id in(20,50);</span><br><span class="line"># 3.选择公司中没有管理者的员工姓名及job_id</span><br><span class="line">select * from employees</span><br><span class="line">where manager_id is null;</span><br><span class="line"># where manager_id &lt;=&gt; null;</span><br><span class="line"></span><br><span class="line"># 4.选择公司中有奖金的员工姓名,工资和奖金级别</span><br><span class="line">select * from employees</span><br><span class="line">where commission_pct is not null;</span><br><span class="line"></span><br><span class="line"># 5.选择员工姓名的第三个字母是a的员工姓名</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;__a%&#x27;;</span><br><span class="line"></span><br><span class="line"># 6.选择姓名中有字母a和k的员工姓名</span><br><span class="line">select * from employees</span><br><span class="line">where last_name like &#x27;%a%&#x27;and last_name like &#x27;%k%&#x27;;</span><br><span class="line"></span><br><span class="line"># 7.显示出表 employees 表中 first_name 以 &#x27;e&#x27;结尾的员工信息</span><br><span class="line">## 正则表达式</span><br><span class="line">select * from employees</span><br><span class="line">where first_name regexp &#x27;e$&#x27;;</span><br><span class="line"></span><br><span class="line">select * from employees</span><br><span class="line">where first_name like &#x27;%e&#x27;;</span><br><span class="line"></span><br><span class="line"># 8.显示出表 employees 部门编号在 80-100 之间的姓名、工种</span><br><span class="line">select * from employees</span><br><span class="line">where department_id between 80 and 100;</span><br><span class="line"></span><br><span class="line"># 9.显示出表 employees 的 manager_id 是 100,101,110 的员工姓名、工资、管理者id</span><br><span class="line">select * from employees</span><br><span class="line">where manager_id in(100,101,110);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;MySQL&lt;/center&gt;&lt;/h1&gt;

&lt;h3 id=&quot;一、SQL-语句的注意事项&quot;&gt;&lt;a href=&quot;#一、SQL-语句的注意事项&quot; class=&quot;headerlink&quot; title=&quot;一、SQL 语句的注意事项&quot;&gt;&lt;/a&gt;一、SQL 语句的注意事项&lt;</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>javaScript</title>
    <link href="https://protonlml.github.io/2019/10/01/java%E5%9F%BA%E7%A1%80/javascript/"/>
    <id>https://protonlml.github.io/2019/10/01/java%E5%9F%BA%E7%A1%80/javascript/</id>
    <published>2019-10-01T04:00:00.000Z</published>
    <updated>2024-06-16T02:11:23.105Z</updated>
    
    <content type="html"><![CDATA[<h1><center>javaScript</center></h1><blockquote><p>静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。</p><ol><li>程序设计有两种架构：1 c&#x2F;s架构，是客户端和服务器端，要开发两个程序。2 b&#x2F;s架构，是浏览器和服务端。只用浏览器来申请服务器端的资源，再展示出来就好了。只用开发服务器端一个软件。</li><li>javaWeb开发，是B&#x2F;S架构的。</li><li>事件：事件是什么意思？通俗的理解，HTML中的元素组件，被某个动作（事件的属性），触动后，会发生一定的变化。（执行了另一个js代码）。</li><li>将HTML，CSS，JavaScript分别独立出来，可以降低耦合度，</li></ol><p>javaScript最初被设计用于浏览器中，他和java语言没有关系，他是客户端脚本语言</p><p>javaScript语言运行出错，要在浏览器控制台上面查看。F12打开控制台。</p></blockquote><p>- </p><h2 id="一、javaScript"><a href="#一、javaScript" class="headerlink" title="一、javaScript"></a>一、javaScript</h2><ul><li>注意：在一个html的页面中，可以定义多个script的标签，而且存放的位置是任意的，但是会影响运行的先后顺序，一般都是等html页面元素全部加载完毕，再运行js代码，并且是一种等待状态。当在html中的某个位置，触发了某个事件，此时对应的js等待代码，就会执行。从而产生行为效果</li></ul><h3 id="1-javascript与HTML的关联方式："><a href="#1-javascript与HTML的关联方式：" class="headerlink" title="1.javascript与HTML的关联方式："></a>1.javascript与HTML的关联方式：</h3><ul><li><p>内部关联</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160949148.png" alt="image-20240130214055735"></p></li><li><p>外部关联</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951711.png" alt="image-20240130214133935"></p></li></ul><h3 id="2-javascript的数据类型"><a href="#2-javascript的数据类型" class="headerlink" title="2.javascript的数据类型"></a>2.javascript的数据类型</h3><ul><li><blockquote><p>原始数据类型：</p><pre><code>     1. number：数字 。 整数/小数/ NAN （not  a number 一个不是数字的数字类型）        2. string ：字符串。字符串 &quot;abc&quot; &quot;a&quot; &#39;abc&#39;        3. boolean：true 和 false        4. null：一个对象为空的占位符        5. undefined：未定义，如果一个变量没有给他初始化值，则会被默认赋值为undefined</code></pre><p>注意：NaN是number类型，他是（不是数字的数字）。在js当中，运算符，后面的运算数，不是运算符要求的类型，js就会自动的将运算数进行类型转换。比如：numb&#x3D; +”abc”;此时：number根据”+”运算符，如果是数字，就会直接转换成数字，但是转换符后面跟的不是数字类型，则会转换成不是数字的数字类型。值为NaN.</p></blockquote></li></ul><h3 id="3-JavaScript的变量"><a href="#3-JavaScript的变量" class="headerlink" title="3.JavaScript的变量"></a>3.JavaScript的变量</h3><ul><li><p>什么是变量：变量就是内存空间中的一小片区域。有类型，有名称，有值。比如：int a&#x3D;3;</p></li><li><p>JavaScript的变量是弱类型的，什么叫弱类型，就是不管定义什么类型的变量，都用var开头。</p></li><li><p>而java中定义整型用int，定义字符型用char 。所以java是强类型的。</p></li><li><p>☆ 通过typeof(变量名)可以得到变量的类型</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951978.png" alt="image-20240130215045915"></p></li><li><p>注释:你也许会问,为什么typeof运算符对于nul值会返回”object”.这实际上是javaScript最初实现中的个错误,然后被<br>ECMAScript沿用了,现在,null被认为是 对象的占位符,从而解释了这一矛盾,但从技求上来说,它仍是原始值。</p></li></ul><h3 id="4-javascript中的运算符"><a href="#4-javascript中的运算符" class="headerlink" title="4.javascript中的运算符"></a>4.javascript中的运算符</h3><ul><li><h4 id="①一元运算符：就是只有一个运运算数的运算符。"><a href="#①一元运算符：就是只有一个运运算数的运算符。" class="headerlink" title="①一元运算符：就是只有一个运运算数的运算符。"></a>①一元运算符：就是只有一个运运算数的运算符。</h4><ul><li>++ 、–、+（正号）、-（负号）</li><li>“++（–）”在前，先自增（自减），再运算。</li><li>“++（–）”在后，先运算，再自增（自减）。</li><li>+（-）（正负号）</li></ul></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160950599.png" alt="Image"></p></li><li><h4 id="②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）"><a href="#②算数运算符：“-”，“-”，“-”，“-”-，“-”（和java中使用方法相同）" class="headerlink" title="②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）"></a>②算数运算符：“+”，“-”，“* ”，“&#x2F;” ，“%”（和java中使用方法相同）</h4></li><li><h4 id="③赋值运算符：“-”，“-”“-”（和java中使用方法相同）"><a href="#③赋值运算符：“-”，“-”“-”（和java中使用方法相同）" class="headerlink" title="③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）"></a>③赋值运算符：“+&#x3D;”，“-&#x3D;”“&#x3D;”（和java中使用方法相同）</h4></li><li><h4 id="④-比较运算符：“-”，“-”，“"><a href="#④-比较运算符：“-”，“-”，“" class="headerlink" title="④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”"></a>④ 比较运算符：“&gt;”，“&lt;”，“&gt;&#x3D;”，“&lt;&#x3D;”，“&#x3D;&#x3D;”，   “&#x3D; &#x3D;&#x3D;（全等于）”</h4><ul><li>“&#x3D; &#x3D;”是比较两个数是否相等，“&#x3D;&#x3D;&#x3D;全等于”是加上了类型的比较。</li></ul></li><li><h3 id="⑤-逻辑运算符：“-”，“-”，“！”"><a href="#⑤-逻辑运算符：“-”，“-”，“！”" class="headerlink" title="⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”"></a>⑤ 逻辑运算符：“&amp;&amp;”，“||”，“！”</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951947.png" alt="Image [3]"></li></ul></li><li><h3 id="⑥-三元运算符“-？：表达式”"><a href="#⑥-三元运算符“-？：表达式”" class="headerlink" title="⑥ 三元运算符“ ？：表达式”"></a>⑥ 三元运算符“ <u>？：表达式</u>”</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951447.png" alt="Image [4]"></li></ul></li></ul><h2 id="二、javascript-中的特殊语法"><a href="#二、javascript-中的特殊语法" class="headerlink" title="二、javascript 中的特殊语法."></a>二、javascript 中的特殊语法.</h2><p>(了解一下就好，但是要和java规范一样写代码，不要省“；”，也不要省“var”，带var的变量，是局部变量，不带var的变量是全局变量 。)</p><h2 id="三、流程控制语句"><a href="#三、流程控制语句" class="headerlink" title="三、流程控制语句"></a>三、流程控制语句</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160951597.png" alt="Image [5]"></p><h2 id="练习-：javascript（9x9乘法表）"><a href="#练习-：javascript（9x9乘法表）" class="headerlink" title="练习 ：javascript（9x9乘法表）"></a>练习 ：javascript（9x9乘法表）</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160959985.png" alt="Image [6]"></p><hr><hr><h2 id="四、BOM对象："><a href="#四、BOM对象：" class="headerlink" title="四、BOM对象："></a>四、BOM对象：</h2><ul><li><h4 id="概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。"><a href="#概念：Browser-object-Model-浏览器对象模型。将浏览器各个组成部分封装为对象。" class="headerlink" title="概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。"></a>概念：Browser object Model 浏览器对象模型。将浏览器各个组成部分封装为对象。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406160954667.png" alt="Image [13]"></p></li><li><h4 id="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"><a href="#BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。" class="headerlink" title="BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。"></a>BOM对象有五个：窗口对象、历史记录对象、地址栏对象、浏览器对象、显示器对象。</h4><h3 id="①-window窗口对象。"><a href="#①-window窗口对象。" class="headerlink" title="① window窗口对象。"></a>① window窗口对象。</h3><ul><li><h4 id="window窗口的第一类方法：弹窗有关的方法"><a href="#window窗口的第一类方法：弹窗有关的方法" class="headerlink" title="window窗口的第一类方法：弹窗有关的方法"></a>window窗口的第一类方法：弹窗有关的方法</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161001435.png" alt="image-20240130231750600"></p></li><li><h4 id="window窗口的第二类方法：打开关闭窗口的方法。"><a href="#window窗口的第二类方法：打开关闭窗口的方法。" class="headerlink" title="window窗口的第二类方法：打开关闭窗口的方法。"></a>window窗口的第二类方法：打开关闭窗口的方法。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161002045.png" alt="image-20240130232026695"></p></li><li><h4 id="window窗口的第三类方法：与定时器有关的方法"><a href="#window窗口的第三类方法：与定时器有关的方法" class="headerlink" title="window窗口的第三类方法：与定时器有关的方法"></a>window窗口的第三类方法：与定时器有关的方法</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003416.png" alt="image-20240130232218944"></p></li><li><h4 id="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用"><a href="#Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（-html文件对象）。直接写就可以用" class="headerlink" title="Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用"></a>Window窗口对象属性，可以获取其他BOM对象，和一个DOM对象document（.html文件对象）。直接写就可以用</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003635.png" alt="Image [27]"></p></li></ul></li></ul><h2 id="②、-Location地址栏对象"><a href="#②、-Location地址栏对象" class="headerlink" title="②、 Location地址栏对象"></a>②、 Location地址栏对象</h2><ul><li><p>Location 对象的方法。reload().用来刷新当前页面。 属性：href</p></li><li><p>Location地址栏对象，他的一个属性href。有两个作用，设置当前页面的URL和获取当前页面的完整的URL.（这里面的设置和获取URL都是针对当前页面的。设置的话，就是重新赋值，设置为新的地址，这样当前页面就会跳转到设置的地址页面中去）</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161003845.png" alt="Image [28]"></p></li><li><h3 id="倒计时跳转网页案例"><a href="#倒计时跳转网页案例" class="headerlink" title="倒计时跳转网页案例"></a>倒计时跳转网页案例</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004716.png" alt="image-20240130233011287"></p></li></ul><h2 id="③、-history当前页面历史记录对象。"><a href="#③、-history当前页面历史记录对象。" class="headerlink" title="③、 history当前页面历史记录对象。"></a>③、 history当前页面历史记录对象。</h2><ul><li>属性：length：history.length；返回的是。历史记录的个数。 </li><li>方法：back();加载history列表中的上一个URL。绑定单击事件，就可以做一个后退的按钮。</li><li>方法： forword(); 加载history列表中的下一个URL。绑定单击事件，就可以做一个前进的按钮。</li><li>方法：go(); 加载history列表中的某一个具体页面。</li></ul><hr><hr><h2 id="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）"><a href="#五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML-DOM对象。）" class="headerlink" title="五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）"></a>五、DOM对象（只要是标记语言都有DOM对象，我们这里说的是HTML DOM对象。）</h2><ul><li><h4 id="☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"><a href="#☆-DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。" class="headerlink" title="☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。"></a>☆ DOM对象，其实就是把html文档里面的各个标签，都看做是一个对象。</h4></li><li><h4 id="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"><a href="#☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。" class="headerlink" title="☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。"></a>☆操作DOM对象，就相当于，在内存层面，来写HTML的代码。没有实体的标签，每个标签，都定义成了对象，每个标签都是一个节点对象。</h4></li><li><h4 id="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"><a href="#DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）" class="headerlink" title="DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）"></a>DOM方式：就是将标记语言，把文本全部给加载到内存里面去，形成一个DOM树。（标记语言文本的解析）</h4></li><li><h4 id="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"><a href="#DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。" class="headerlink" title="DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。"></a>DOM对象：通俗理解就是将HTML或者XML标记语言，各个部分封装为一个一个的对象。（一对标签可以看做一个对象，也叫节点，因为在树上）。在内存中对应着DOM树形结构。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004804.png" alt="Image [7]"></p></li><li><h3 id="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。"><a href="#①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element-其他标签对象-对象。或者是创建Element-其他标签对象-对象。" class="headerlink" title="①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。"></a>①：document对象、最大的DOM对象。（html文档对象），其他的标签对象，都在他的内部，所以是通过document来，获取Element(其他标签对象)对象。或者是创建Element (其他标签对象)对象。</h3><ul><li><h5 id="document-write-““-向页面上写出一条横线（就是往页面写出信息的）"><a href="#document-write-““-向页面上写出一条横线（就是往页面写出信息的）" class="headerlink" title="document.write(““)   向页面上写出一条横线（就是往页面写出信息的）"></a>document.write(“<hr>“)   向页面上写出一条横线（就是往页面写出信息的）</h5></li><li><h4 id="1-1-document对象：获取element对象的方法。"><a href="#1-1-document对象：获取element对象的方法。" class="headerlink" title="1.1 document对象：获取element对象的方法。"></a>1.1 document对象：获取element对象的方法。</h4></li><li><blockquote><ol><li>getElementById（） ：根据id属性值获取元素对象。id属性值一般唯一</li><li>getElementsByTagName （） ：根据元素名称获取元素对象们。返回值是一个数组</li><li>getElementsByClassName （）：根据Class属性值获取元素对象们。返回值是一个数组</li><li>getElementsByName（）：根据name属性值获取元素对象们。返回值是一个数组</li></ol></blockquote></li><li><h4 id="1-2-document对象：创建其他DOM对象："><a href="#1-2-document对象：创建其他DOM对象：" class="headerlink" title="1.2  document对象：创建其他DOM对象："></a>1.2  document对象：创建其他DOM对象：</h4></li><li><blockquote><ol><li>createElement（“标签名”）：创建元素节点（记住）</li><li>createAttribute（name）：创建拥有指定名称的属性节点，并返回新的Attr对象。（了解）</li><li>createComment（）：创建注释节点。（了解）</li><li>createTextNode（）：创建文本节点。（了解）</li></ol></blockquote></li></ul></li><li><h3 id="②：Element对象（元素标签对象）"><a href="#②：Element对象（元素标签对象）" class="headerlink" title="②：Element对象（元素标签对象）"></a>②：Element对象（元素标签对象）</h3><ul><li>1，获取&#x2F;创建：通过document来获取和创建</li><li>2.方法：<ul><li>removeAttribute（“”） ：删除属性</li><li>setAttribute（“属性名”，“属性值”） ：设置属性值。</li></ul></li><li>补充：input框框，有个value属性，用其节点对象.value可以得到，文本框里面的内容。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004004.png" alt="Image [8]"></li></ul></li><li><h3 id="③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"><a href="#③：Node对象-（是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。" class="headerlink" title="③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。"></a>③：Node对象 （是所有DOM对象的父亲），它里面定义了，对节点的，增删改的方法。所以所有的DOM对象，都有这三类方法。这样所有的当前节点，都可以添加它的子节点，也都可以删除它的子节点，也可以获取它的父节点。</h3></li><li><p>appendchild（节点对象名） ：向节点的子节点列表的结尾添加新的子节点。（增）</p></li><li><p>removechild（节点对象名） ：删除（并返回）当前节点的指定子节点。（删）</p></li><li><p>replacechild（节点对象名） ：用新节点替换一个子节点。（改，不常用）。</p></li><li><p>属性：父节点&#x3D;当前节点.parentNode; 返回当前节点的父节点。</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161004614.png" alt="Image [9]"></p></li></ul><h2 id="六、☆javascript-中的几个对象的学习。"><a href="#六、☆javascript-中的几个对象的学习。" class="headerlink" title="六、☆javascript 中的几个对象的学习。"></a>六、☆javascript 中的几个对象的学习。</h2><ul><li><h3 id="1-☆-function函数方法对象、Array数组对象。"><a href="#1-☆-function函数方法对象、Array数组对象。" class="headerlink" title="1.☆ function函数方法对象、Array数组对象。"></a>1.☆ function函数方法对象、Array数组对象。</h3></li><li><p>function对象，在javascript 中，定义方法，是用function对象，来定义方法的。</p><blockquote><ul><li>语法：function 方法名（参数列表）{方法体}</li><li>&#x2F;&#x2F; javascript中定义方法，的写法和java类似。 但是是用的function对象定义的方法</li><li>&#x2F;&#x2F; js中用function定义的方法，参数列表不用写类型，返回值不用写类型</li><li>&#x2F;&#x2F; js中用function定义的方法，如果有多个同名的方法，那么后面的同名方法，会覆盖前面的同名方法，</li><li>&#x2F;&#x2F; js中用function定义的方法，在调用方法时，只要方法名确定就会调用最后面的同名不同参数的方法。他和参数列表无关。</li><li>&#x2F;* js中用function定义的方法，参数列表的括号里面隐藏了一个内置对象，是一个arguments的数组。 所以当参数列表中不写形式参数时，function add(){ 方法体} 括号里面就是一个可变形参 每一个传递过来的实参，都存在arguments[0].arguments[1]……..等数组中。 *&#x2F;</li></ul></blockquote></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005585.png" alt="Image [31]"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005624.png" alt="Image [32]"></p></li><li><h3 id="2-☆-Array数组对象"><a href="#2-☆-Array数组对象" class="headerlink" title="2.☆ Array数组对象"></a>2.☆ Array数组对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005814.png" alt="image-20240130233856091"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005815.png" alt="image-20240130233912957"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005824.png" alt="image-20240130233952371"></li><li><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401302340524.png" alt="image-20240130234025914"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161005034.png" alt="image-20240130234102744"></li></ul></li><li><h3 id="3-☆-Date日期对象"><a href="#3-☆-Date日期对象" class="headerlink" title="3.☆ Date日期对象"></a>3.☆ Date日期对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006224.png" alt="image-20240130234717315"></li></ul></li><li><h3 id="4-☆Math数学对象"><a href="#4-☆Math数学对象" class="headerlink" title="4.☆Math数学对象"></a>4.☆Math数学对象</h3><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006954.png" alt="image-20240130234909211"></li></ul></li><li><h3 id="5-☆-regExp：正则表达式对象。"><a href="#5-☆-regExp：正则表达式对象。" class="headerlink" title="5.☆ regExp：正则表达式对象。"></a>5.☆ regExp：正则表达式对象。</h3><ul><li><h5 id="先了解什么是正则表达式"><a href="#先了解什么是正则表达式" class="headerlink" title="先了解什么是正则表达式"></a>先了解什么是正则表达式</h5></li><li><p>正则表达式就是定义字符串的组成规则（通用的规则，在Java中或者其他语言中都可以使用）。在表单的输入框的地方，实现校验输入的字符串是不是符合正则表达式的规则。不符合校验失败，阻止表单的提交。 </p></li><li><p>☆ Javascript对表单的校验，是依赖于正则表达式的。</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006465.png" alt="image-20240130235118937"></p></li><li><h3 id="正则表达式对象。regExp"><a href="#正则表达式对象。regExp" class="headerlink" title="正则表达式对象。regExp"></a>正则表达式对象。regExp</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006474.png" alt="image-20240130235241803"></p></li></ul></li><li><h3 id="6-☆全局对象"><a href="#6-☆全局对象" class="headerlink" title="6.☆全局对象"></a>6.☆全局对象</h3><ul><li>在javascript中，有一个全局对象Global，他不用创建对象，直接用其内部的方法，就可以实现对应的功能，一般有字符串的URL编解码方法。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161006591.png" alt="image-20240130235441038"></li></ul></li></ul><hr><hr><h2 id="七、-事件绑定的方式"><a href="#七、-事件绑定的方式" class="headerlink" title="七、 事件绑定的方式"></a>七、 事件绑定的方式</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007040.png" alt="Image [10]"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007483.png" alt="Image [11]"></p><ul><li><h3 id="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"><a href="#得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。" class="headerlink" title="得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。"></a>得到标签元素的对象。来换其属性值，和换其内容值。要查看参考文档找对应对象的方法。</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007833.png" alt="Image [12]"></p><hr><hr><h2 id="八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准"><a href="#八、HTML-DOM：是关于如何获取、修改、添加或删除HTML元素的标准" class="headerlink" title="八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准"></a>八、HTML DOM：是关于如何获取、修改、添加或删除HTML元素的标准</h2><ul><li><h3 id="☆①所有的节点对象都有的关键的属性innerHTML"><a href="#☆①所有的节点对象都有的关键的属性innerHTML" class="headerlink" title="☆①所有的节点对象都有的关键的属性innerHTML"></a>☆①所有的节点对象都有的关键的属性innerHTML</h3><ul><li><p>innerHTML。是获取节点对象，里面的所有内容。就是获取了，一对“&lt;&gt;标签体&lt;&#x2F;&gt;”中的标签体的内容。标签体可以是一段文字，也可以是其他标签。 </p></li><li><p>通过给innerHTML赋值或者追加值，可以改表标签体的内容。如下图</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007153.png" alt="image-20240131000856980"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007874.png" alt="image-20240131000909451"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007864.png" alt="image-20240131000922589"></p></li><li><h5 id="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"><a href="#上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。" class="headerlink" title="上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。"></a>上图中第3行，之后的表格，都是通过JavaScript代码（里面操作各种对象），一行一行添加的。很面向对象。写出来的代码非常的多。就会想简化写法。用innerHTML可以直接获取到上面的table的标签体，并且在后面追加样式就好了。这样简化了js代码，但不是面向对象了。</h5></li></ul></li><li><h3 id="☆②所有的节点对象都有的关键的属性style。"><a href="#☆②所有的节点对象都有的关键的属性style。" class="headerlink" title="☆②所有的节点对象都有的关键的属性style。"></a>☆②所有的节点对象都有的关键的属性style。</h3><ul><li><h4 id="1-给style属性赋值，就可以改变其样式。"><a href="#1-给style属性赋值，就可以改变其样式。" class="headerlink" title="1.给style属性赋值，就可以改变其样式。"></a>1.给style属性赋值，就可以改变其样式。</h4><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161007847.png" alt="Image [70]"></li></ul></li><li><p>注意：两个单词的写法</p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008113.png" alt="Image [71]"></p></li><li><p><img src="https://gitee.com/lmlpla/blogimages/raw/master/imgs/202401310011810.png" alt="image-20240131001138257"></p></li><li><h3 id="2-改变节点对象的class值。用className属性。"><a href="#2-改变节点对象的class值。用className属性。" class="headerlink" title="2. 改变节点对象的class值。用className属性。"></a>2. 改变节点对象的class值。用className属性。</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008443.png" alt="Image [72]"></p></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008722.png" alt="Image [73]"></p></li><li><h4 id="3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL"><a href="#3-要想设置和修改，节点的属性值。查Api文档。例如：-标签图片标签，每出现一次，一个-Image-对象就会被创建。找image对象的属性，src设置或返回图像的-URL" class="headerlink" title="3.要想设置和修改，节点的属性值。查Api文档。例如： 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL"></a>3.要想设置和修改，节点的属性值。查Api文档。例如：<img> 标签图片标签，每出现一次，一个 Image 对象就会被创建。找image对象的属性，src设置或返回图像的 URL</h4></li></ul></li></ul><hr><hr><h2 id="九、事件"><a href="#九、事件" class="headerlink" title="九、事件"></a>九、事件</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008164.png" alt="Image [74]"></p><ul><li><h3 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h3><ul><li><h4 id="1-点击事件"><a href="#1-点击事件" class="headerlink" title="1.点击事件"></a>1.点击事件</h4></li><li><blockquote><ol><li><p>onclick：单机事件</p></li><li><p>ondblclick ：双击事件</p></li></ol></blockquote></li><li><h4 id="2-焦点事件"><a href="#2-焦点事件" class="headerlink" title="2.焦点事件"></a>2.焦点事件</h4></li><li><blockquote><ol><li>onblur：失去焦点</li></ol><ul><li>一般用于表单验证,当光标不在输入框时，就会失去焦点，触发onblur事件发生。</li></ul><ol start="2"><li>onfocus：元素获得焦点</li></ol></blockquote></li><li><h4 id="3-加载事件"><a href="#3-加载事件" class="headerlink" title="3.加载事件"></a>3.加载事件</h4></li><li><blockquote><ol><li>onload：一张页面或者一幅图像完成加载</li></ol><ul><li>内部加载方式：script标签如果写在head标签里面，在上面的话，要使用窗口的事件机制，加载事件来控制，js 代码，在HTML页面加载完全，才运行。</li><li>如下图</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161008323.png" alt="Image [80]"></li></ul></blockquote></li><li><h4 id="4-鼠标事件"><a href="#4-鼠标事件" class="headerlink" title="4.鼠标事件"></a>4.鼠标事件</h4></li><li><blockquote><ol><li>onmousedown ：标按钮披按下.</li></ol><ul><li>定义方法时,定义一个形参,接受 event 对象.</li><li>eventi对象的button属性可以获取鼠标按钮键被点击了.</li></ul><ol start="2"><li>onmouseup  ：鼠标按键被松开.</li><li>onmousemove ：鼠标被移动.</li><li>onmouseover：鼠标移到某元素之上.</li><li>onmouseout：鼠标从某元素移开.</li></ol></blockquote></li><li><h4 id="5-键盘事件"><a href="#5-键盘事件" class="headerlink" title="5.键盘事件"></a>5.键盘事件</h4></li><li><blockquote><ol><li>onkeydown： 某个键盘按键被按下.</li><li>onkeyup ：某个键盘按键被松开.</li><li>onkeypress： 某个键盘按键被按下并松开.</li></ol></blockquote></li><li><h4 id="6-选择和改变事件"><a href="#6-选择和改变事件" class="headerlink" title="6.选择和改变事件"></a>6.选择和改变事件</h4></li><li><blockquote><ol><li>onchange：域的内容被改变.</li></ol><ul><li><h4 id="☆-当在选择的下拉列表上，选择某个选项会触发该事件。"><a href="#☆-当在选择的下拉列表上，选择某个选项会触发该事件。" class="headerlink" title="☆ 当在选择的下拉列表上，选择某个选项会触发该事件。"></a>☆ 当在选择的下拉列表上，选择某个选项会触发该事件。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009283.png" alt="Image [81]"></p></li></ul><ol start="2"><li>onselect：文本被选中.</li></ol></blockquote></li><li><h4 id="7-表单事件"><a href="#7-表单事件" class="headerlink" title="7.表单事件:"></a>7.表单事件:</h4></li><li><blockquote><ol><li>onsubmit：确认按钮被点击.</li></ol><ul><li>可以阻止表单的提交<ul><li>方法返回falsel则表单被阻止提交.</li></ul></li><li>写法：</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009623.png" alt="Image [82]"></li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009823.png" alt="Image [83]"></li></ul><ol start="2"><li>onreset：重置按钮被点击.</li></ol></blockquote></li></ul></li></ul><hr><hr><h2 id="练习：动态表格案例"><a href="#练习：动态表格案例" class="headerlink" title="练习：动态表格案例"></a>练习：动态表格案例</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009683.png" alt="image-20240131000210183"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161009764.png" alt="image-20240131000243636"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010442.png" alt="image-20240131000254150"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010003.png" alt="image-20240131000332037"></p><ul><li>☆动态表格案例总结：用DOM对象在内存层面你，不管创建了多少子节点或者父节点，这些结构都是在内存层面上的，在浏览器页面上不能够直接显示，要想显示，必须有html的已有标签对象。先获取已有的html标签对象节点，将内存层面上的节点，appendChild为已有节点的子节点。同时，属性的样式会关联到css样式表中，只要和css表中的选择器对应的上，就可以显示样式。</li><li>☆ 技巧：怎样获取当前标签的对象，直接在html标签后面，加上事件属性。绑定事件方式一，事件调用指定方法，括号里面写this。</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010543.png" alt="image-20240131000404203"></li><li>那么就可以在方法声明的地方，形式参数就是当前对象。如下图：</li><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161010436.png" alt="Image [62]"></li></ul><hr><hr><h2 id="总结1："><a href="#总结1：" class="headerlink" title="总结1："></a>总结1：</h2><ul><li><h3 id="怎么来理解BOM对象和DOM对象以及HTML-DOM对象？"><a href="#怎么来理解BOM对象和DOM对象以及HTML-DOM对象？" class="headerlink" title="怎么来理解BOM对象和DOM对象以及HTML DOM对象？"></a>怎么来理解BOM对象和DOM对象以及HTML DOM对象？</h3></li><li><p>1 . BOM对象，就是将浏览器各个组成部分，封装为对象。有显示器对象、浏览器对象、windows窗口对象、URL地址栏对象、以及历史记录对象，这5个BOM对象。windows窗口对象，是BOM对象中的主要对象，因为其他对象都在一个窗口当中。可以通过windows对象来获取，其他4个BOM对象。</p></li><li><p>2 .在windows窗口获取的document对象，是DOM对象。</p><ul><li>document对象是DOM对象的主要对象。DOM对象也在窗口内，但是只有document对象（.html文件对象）是通过窗口获取，其他DOM对象是通过document对象获取的。</li></ul></li><li><p>3 .document对象，他是将整个文档封装成一个document对象。对应着HTML里面最外层标签<html></html>。他可以获取其他节点对象</p><ul><li>document.getElementById()；。或者对象们；另外也可以创建其他DOM对象。</li></ul></li><li><p>4.有了一些基础的DOM对象，也就是有了某个标签的（节点）的对象之后。然后用HTML DOM来、对这个对象进行获取、修改、添加或删除操作。</p></li><li><p>5.从上往下看，一层一层的，从窗口(window)——&gt;文本对象(document)——&gt;单个文本元素对象(element)——&gt;单个文本元素操作（HTML DOM）这样方便记忆。也便于理解。</p></li><li><p>节点：在HTML中所有的单个元件，就是单个节点。对应着一对，一对的标签。</p></li><li><p>子节点：外标签包着内标签，也就是节点包着子节点。例如：<body>文字 <a>超链接</a></body>。</p></li><li><p>Node 节点对象：他可以认为是虚有的，它里面的方法用来“CRUDdom树”</p></li><li><p>其实就是所有的DOM对象，都是一个节点，DOM对象本身，就可以增加节点，删除节点，替换节点，查询节点。</p></li><li><p>有了DOM这些对象，用他们的功能。就可以用javaScript语言对HTML的标签进行操作。</p></li><li><p>要记住：虽然能用，JavaScript语言来操作，内存层面的HTML的元素对象代码，使其在浏览器上面显示样式。但是他和HTML里面的标签没有，任何关系。</p><ul><li>执行了“JavaScript语言操作的元件对象，比如添加节点，删除节点”不会再HTML文档中自动生成，HTML代码。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202406161011212.png" alt="Image [84]"></p><ul><li><h3 id="理解、标签、标签体、标签属性、控制元素的样式。"><a href="#理解、标签、标签体、标签属性、控制元素的样式。" class="headerlink" title="理解、标签、标签体、标签属性、控制元素的样式。"></a>理解、标签、标签体、标签属性、控制元素的样式。</h3><blockquote><p>1.1标签: 标签就是一对对的&lt;&gt;&lt;&#x2F;&gt;。例如：<code>&lt;img&gt; &lt;/img&gt; </code></p><p>1.2标签体:一对标签里面的内容。例如：<code>&lt;img&gt;这是标签体，可以是子标签也可以是文字 &lt;/img&gt;</code></p><p>1.3 标签属性: 定义在标签&lt;&gt;里面的。例如：<code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code></p><p>1.4 标签控制样式:</p></blockquote></li></ul><h2 id="总结2："><a href="#总结2：" class="headerlink" title="总结2："></a>总结2：</h2><ul><li><h4 id="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。"><a href="#一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求-js代码，标签一般都写在-body标签的最下面。" class="headerlink" title="一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 &lt;script&gt;js代码&lt;/script&gt;，标签一般都写在&lt;body&gt;......&lt;script&gt;&lt;/body&gt;body标签的最下面。"></a>一般都是先加载了web的HTML界面之后，JavaScript脚本语言才会加载，这样js里面获取的元素对象，才会被拿到。如果是内部加载的话。所以要求 <code>&lt;script&gt;js代码&lt;/script&gt;</code>，标签一般都写在<code>&lt;body&gt;......&lt;script&gt;&lt;/body&gt;</code>body标签的最下面。</h4></li><li><h4 id="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"><a href="#js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。" class="headerlink" title="js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。"></a>js代码（可以理解为一个一个的等待的动作），就像是当HTML页面加载完全之后，它已经运行了内部代码，但是，都还是在等待的状态。如果界面中触发了某个事件，就会执行相应“事件器代码”，完成效果。</h4></li></ul><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;javaScript&lt;/center&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;静态网页资源的三剑客：HTML（文本），CSS（样式），JavaScript（行为）。把后面两个效果，加在HTML文本上，就会呈现出很好看的网页界面。&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="javaScript" scheme="https://protonlml.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>0.Docker中安装mysql8.0.22</title>
    <link href="https://protonlml.github.io/2019/10/01/mysql/0.Docker%E4%B8%AD%E5%AE%89%E8%A3%85mysql8.0.22/"/>
    <id>https://protonlml.github.io/2019/10/01/mysql/0.Docker%E4%B8%AD%E5%AE%89%E8%A3%85mysql8.0.22/</id>
    <published>2019-09-30T17:00:00.000Z</published>
    <updated>2024-07-22T16:09:20.799Z</updated>
    
    <content type="html"><![CDATA[<h1><center>Docker中安装mysql8.0.22</center></h1><h2 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h2><ul><li>第一步：在<a href="https://hub.docker.com/">hub.docker.com</a>上搜索mysql镜像</li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407222307366.png" alt="image-20240722230703225"></p><ul><li>第二步：拉取指定版本的mysql</li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407222310929.png" alt="image-20240722231036347"></p><ul><li>也可以指定拉取版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mysql:<span class="number">8.0</span><span class="number">.22</span></span><br></pre></td></tr></table></figure><ul><li>第三步：检查mysql镜像</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><ul><li>第四步：启动运行mysql镜像 (docker run 用于启动一个容器)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">3310</span>:<span class="number">3306</span> --name mysql8 \</span><br><span class="line">-v /usr/local/docker/mysql8/mysql-files:/<span class="keyword">var</span>/lib/mysql-files \</span><br><span class="line">-v /usr/local/docker/mysql8/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /usr/local/docker/mysql8/logs:/<span class="keyword">var</span>/log/mysql \</span><br><span class="line">-v /usr/local/docker/mysql8/data:/<span class="keyword">var</span>/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=PCfan0906. \</span><br><span class="line">-d mysql:<span class="number">8.0</span><span class="number">.22</span></span><br></pre></td></tr></table></figure><ul><li><p>第四步解释</p><ul><li><p>将端口号映射为3310</p></li><li><p>容器名字为 mysql8</p></li><li><p>-v 表示挂载的卷，conf,logs,data都挂在到主机中</p></li><li><p>修改登陆密码：PCfan0906.（默认是root   最好是修改个密码，要不然后面使用Navacat连接会有问题）</p></li><li><p>-d 启动mysql:8.0.22</p></li></ul></li><li><p>假如安装过程中失败了，则可通过docker ps -a 查看以前的容器，假如已存在，则通过docker rm 镜像id 删除再重新安装即可。</p></li><li><p>第五步：停止mysql8服务（可选）</p></li><li><p>执行完第四个步骤（启动运行mysql镜像），mysql就会自动启动了，假如需要停止这个</p><p>服务可以执行：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mysql8</span><br></pre></td></tr></table></figure><ul><li>第六步：启动mysql服务</li><li>假如mysql8服务没有启动运行，但是mysql8容器是存在的，可以通过如下方式启动mysql8。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start mysql8</span><br></pre></td></tr></table></figure><ul><li>假如希望查看mysql8启动时的日志，可以执行 docker container logs mysql8 这个指令</li><li>第七步：查看docker启动的服务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li>第八步：进入容器 (退出容器用exit)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mysql8 bash</span><br></pre></td></tr></table></figure><ul><li>第九步：登陆(默认密码root)，一定要先进入mysql容器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -pPCfan0906.</span><br></pre></td></tr></table></figure><ul><li>第十步：设置mysql开机自启动（可选）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update mysql8 --restart=always</span><br></pre></td></tr></table></figure><ul><li>如何重启mysql服务？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql8</span><br></pre></td></tr></table></figure><ul><li>查看MySQL安装到哪了?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql8</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二、连接MySQL时要注意"><a href="#二、连接MySQL时要注意" class="headerlink" title="二、连接MySQL时要注意"></a>二、连接MySQL时要注意</h2><ul><li>第一步：关闭linux宿主机的防火墙 (假如直击连接),命令忘了可以通过搜索引擎查。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><ul><li>第二步：重启docker</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>第三步：启动mysql</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start mysql8</span><br></pre></td></tr></table></figure><hr><hr><h2 id="三、Navacat连接MySQL"><a href="#三、Navacat连接MySQL" class="headerlink" title="三、Navacat连接MySQL"></a>三、Navacat连接MySQL</h2><p>连接mysql如果遇到以下问题可以这样解决</p><p>问题描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1251</span>-client does not support authentication protocol requesred by server;consider upgrading MySQL Client</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407222358806.png" alt="image-20240722235822575"></p><p>解决办法：</p><p>（1）mysql容器内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mysql8 bash</span><br></pre></td></tr></table></figure><p>（2）进入mysql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -pPCfan0906.</span><br></pre></td></tr></table></figure><p>输入密码 PCfan0906.</p><p>（3）查看用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,plugin,authentication_string from mysql.user; </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407230003245.png" alt="image-20240723000356219"></p><p>备注：host为 % 表示不限制ip localhost表示本机使用 plugin非mysql_native_password 则需要修改密码</p><p>（5）修改用户密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>; </span><br></pre></td></tr></table></figure><p>（6）更新user为root，host为% 的密码为123456</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>; </span><br></pre></td></tr></table></figure><p>更新user为root，host为localhost 的密码为123456</p><p>7）再次连接即可成功 </p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;Docker中安装mysql8.0.22&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、下载安装&quot;&gt;&lt;a href=&quot;#一、下载安装&quot; class=&quot;headerlink&quot; title=&quot;一、下载安装&quot;&gt;&lt;/a&gt;一、下载安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>对Mysql中的sql语句的理解</title>
    <link href="https://protonlml.github.io/2019/10/01/mysql/%E5%AF%B9Mysql%E4%B8%AD%E7%9A%84sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://protonlml.github.io/2019/10/01/mysql/%E5%AF%B9Mysql%E4%B8%AD%E7%9A%84sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2019-09-30T16:00:00.000Z</published>
    <updated>2024-10-13T15:57:49.017Z</updated>
    
    <content type="html"><![CDATA[<h1><center>对Mysql中的sql语句的理解</center></h1><h2 id="理解SQL语句的执行顺序"><a href="#理解SQL语句的执行顺序" class="headerlink" title="理解SQL语句的执行顺序"></a>理解SQL语句的执行顺序</h2><blockquote><p>1.理解sql的执行顺序，对理解整个sql语句想要表达的什么内容，尤为重要。</p></blockquote><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410082255599.png" alt="image-20241008225541514"></p><p>上图 ④和⑤颠倒一下顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># where或者on  后面的过滤条件,可以读作,得到 满足 条件所存在的行.如下</span><br><span class="line"># on 后面可以读作, e员工表中有 部门的行,取出来.</span><br><span class="line">   通用句式 表中 有 xxx 的值取出来 。 </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202410082311840.png" alt="image-20241008231137358"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如上：</span><br><span class="line">from employees e join departments d </span><br><span class="line">on d.department_id = e.department_id 后面可以读作：部门中有员工的数据 取出来</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">from employees e right join departments d </span><br><span class="line">on d.department_id = e.department_id  读作 部门中有员工的行取出来，右因 right join departments（右外连接departments） 所以departments部门中没有员工的行也去出来。就是连接后  departments这一边所有的数据都出来，不管这个部门有没有员工都取出来</span><br></pre></td></tr></table></figure><h2 id="你需要记住-SELECT-查询时的两个顺序"><a href="#你需要记住-SELECT-查询时的两个顺序" class="headerlink" title="你需要记住 SELECT 查询时的两个顺序:"></a>你需要记住 SELECT 查询时的两个顺序:</h2><h3 id="1-关键字的顺序是不能颠倒的"><a href="#1-关键字的顺序是不能颠倒的" class="headerlink" title="1. 关键字的顺序是不能颠倒的:"></a>1. 关键字的顺序是不能颠倒的:</h3><h4 id="SELECT-FROM-WHERE-GROUP-BY-HAVING-ORDER-BY-LIMIT"><a href="#SELECT-FROM-WHERE-GROUP-BY-HAVING-ORDER-BY-LIMIT" class="headerlink" title="SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT..."></a><code>SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...</code></h4><h3 id="2-SELECT-语句的执行顺序-在-MySQL-和-Oracle-中-SELECT-执行顺序基本相同"><a href="#2-SELECT-语句的执行顺序-在-MySQL-和-Oracle-中-SELECT-执行顺序基本相同" class="headerlink" title="2.SELECT 语句的执行顺序(在 MySQL 和 Oracle 中,SELECT 执行顺序基本相同):"></a>2.SELECT 语句的执行顺序(在 MySQL 和 Oracle 中,SELECT 执行顺序基本相同):</h3><h4 id="FROM-WHERE-GROUP-BY-HAVING-SELECT-的字段-DISTINCT-ORDER-BY-LIMIT"><a href="#FROM-WHERE-GROUP-BY-HAVING-SELECT-的字段-DISTINCT-ORDER-BY-LIMIT" class="headerlink" title="FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT"></a><code>FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT</code></h4><h3 id="3-比如你写了一个-SQL-语句-那么它的关键字顺序和执行顺序是下面这样的"><a href="#3-比如你写了一个-SQL-语句-那么它的关键字顺序和执行顺序是下面这样的" class="headerlink" title="3.比如你写了一个 SQL 语句,那么它的关键字顺序和执行顺序是下面这样的:"></a>3.比如你写了一个 SQL 语句,那么它的关键字顺序和执行顺序是下面这样的:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5</span><br><span class="line">FROM player JOIN team ON player.team_id = team.team_id # 顺序 1</span><br><span class="line">WHERE height &gt; 1.80 # 顺序 2</span><br><span class="line">GROUP BY player.team_id # 顺序 3</span><br><span class="line">HAVING num &gt; 2 # 顺序 4</span><br><span class="line">ORDER BY num DESC # 顺序 6</span><br><span class="line">LIMIT 2 # 顺序 7</span><br></pre></td></tr></table></figure><ul><li><h4 id="在-SELECT-语句执行这些步骤的时候-每个步骤都会产生一个-虚拟表-然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是-这些步骤隐含在-SQL-的执行过程中-对于我们来说是不可见的。"><a href="#在-SELECT-语句执行这些步骤的时候-每个步骤都会产生一个-虚拟表-然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是-这些步骤隐含在-SQL-的执行过程中-对于我们来说是不可见的。" class="headerlink" title="在 SELECT 语句执行这些步骤的时候,每个步骤都会产生一个 虚拟表 ,然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是,这些步骤隐含在 SQL 的执行过程中,对于我们来说是不可见的。"></a>在 SELECT 语句执行这些步骤的时候,每个步骤都会产生一个 虚拟表 ,然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是,这些步骤隐含在 SQL 的执行过程中,对于我们来说是不可见的。</h4></li></ul><h3 id="同时因为-SQL-是一门类似英语的结构化查询语言-所以我们在写-SELECT-语句的时候-还要注意相应的关键字顺序"><a href="#同时因为-SQL-是一门类似英语的结构化查询语言-所以我们在写-SELECT-语句的时候-还要注意相应的关键字顺序" class="headerlink" title="同时因为 SQL 是一门类似英语的结构化查询语言,所以我们在写 SELECT 语句的时候,还要注意相应的关键字顺序,"></a>同时因为 SQL 是一门类似英语的结构化查询语言,所以我们在写 SELECT 语句的时候,还要注意相应的关键字顺序,</h3><h3 id="所谓底层运行的原理-就是我们刚才讲到的执行顺序。"><a href="#所谓底层运行的原理-就是我们刚才讲到的执行顺序。" class="headerlink" title="所谓底层运行的原理,就是我们刚才讲到的执行顺序。"></a>所谓底层运行的原理,就是我们刚才讲到的执行顺序。</h3><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;对Mysql中的sql语句的理解&lt;/center&gt;&lt;/h1&gt;





&lt;h2 id=&quot;理解SQL语句的执行顺序&quot;&gt;&lt;a href=&quot;#理解SQL语句的执行顺序&quot; class=&quot;headerlink&quot; title=&quot;理解SQL语句的执行顺序&quot;&gt;&lt;/a&gt;理解</summary>
      
    
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/categories/mysql8-0-22/"/>
    
    
    <category term="mysql8.0.22" scheme="https://protonlml.github.io/tags/mysql8-0-22/"/>
    
  </entry>
  
  <entry>
    <title>59.动态代理</title>
    <link href="https://protonlml.github.io/2019/09/30/java%E5%9F%BA%E7%A1%80/59.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://protonlml.github.io/2019/09/30/java%E5%9F%BA%E7%A1%80/59.%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2019-09-30T15:38:00.000Z</published>
    <updated>2024-07-20T15:00:19.850Z</updated>
    
    <content type="html"><![CDATA[<h1><center>动态代理</center></h1><h2 id="一、动态代理"><a href="#一、动态代理" class="headerlink" title="一、动态代理;"></a>一、动态代理;</h2><ul><li><h3 id="为什么要有动态代理对象？"><a href="#为什么要有动态代理对象？" class="headerlink" title="为什么要有动态代理对象？"></a>为什么要有动态代理对象？</h3></li><li><h4 id="因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。"><a href="#因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。" class="headerlink" title="因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。"></a>因为在已有的项目的老代码中，我们不可能去修改，某个对象中的方法。修改了之后可能会导致整体项目崩溃。</h4></li><li><h4 id="那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。"><a href="#那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。" class="headerlink" title="那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。"></a>那么我们在新业务中又想用这个已有老对象中的老方法，但是这个方法，它功能太落后了。我想给它添加一些其他功能，而且又不能修改原有代码。</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202259509.png" alt="image-20240717210216800"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法;"></a>解决办法;</h2><ul><li><h4 id="非侵入式增加功能。"><a href="#非侵入式增加功能。" class="headerlink" title="非侵入式增加功能。"></a>非侵入式增加功能。</h4></li><li><h4 id="1-我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。"><a href="#1-我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。" class="headerlink" title="1.我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。"></a>1.我们可以将这个对象中要用到，需要增强功能的多个方法，给抽象到一个接口当中。然后将这个对象所在类实现这个接口。</h4></li><li><h4 id="2-然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。"><a href="#2-然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。" class="headerlink" title="2.然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。"></a>2.然后生成一个代理对象，这个代理对象也要实现这个接口，重写接口中的方法，这样这个代理对象就有了需要用到的所有方法。并且可以在其中添加增强功能的代码，然后真正的核心代码还是调用老对象中的老方法来实现。代理对象中，只做了增强功能的代码，核心还是原来老对象的方法。</h4><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202259371.png" alt="image-20240717210530854"></p><h2 id="注意：代理对象在java中是有固定对象的，newProxyInstance"><a href="#注意：代理对象在java中是有固定对象的，newProxyInstance" class="headerlink" title="注意：代理对象在java中是有固定对象的，newProxyInstance();"></a>注意：代理对象在java中是有固定对象的，newProxyInstance();</h2><ul><li><h4 id="所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。"><a href="#所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。" class="headerlink" title="所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。"></a>所以我们要创建一个生成动态代理对象的工具类，在这个工具类中定义生成某个对象的代理对象方法。</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202300080.png" alt="image-20240717210924197"></p></li></ul><hr><hr><hr><h2 id="动态代理的写法"><a href="#动态代理的写法" class="headerlink" title="动态代理的写法"></a>动态代理的写法</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;动态代理&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、动态代理&quot;&gt;&lt;a href=&quot;#一、动态代理&quot; class=&quot;headerlink&quot; title=&quot;一、动态代理;&quot;&gt;&lt;/a&gt;一、动态代理;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;为什么要有动</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>58.反射</title>
    <link href="https://protonlml.github.io/2019/09/29/java%E5%9F%BA%E7%A1%80/58.%E5%8F%8D%E5%B0%84/"/>
    <id>https://protonlml.github.io/2019/09/29/java%E5%9F%BA%E7%A1%80/58.%E5%8F%8D%E5%B0%84/</id>
    <published>2019-09-29T14:38:00.000Z</published>
    <updated>2024-07-20T14:58:43.828Z</updated>
    
    <content type="html"><![CDATA[<h1><center>反射</center></h1><h2 id="一、反射"><a href="#一、反射" class="headerlink" title="一、反射"></a>一、反射</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172323015.png" alt="image-20240717232338015"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172326086.png" alt="image-20240717232612040"></p><h2 id="二、获取class对象的三种方式"><a href="#二、获取class对象的三种方式" class="headerlink" title="二、获取class对象的三种方式"></a>二、获取class对象的三种方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取反射的 class对象的三种方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflexDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取class字节码对象的三种方式</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  1.Class.forName(全限定类名);</span></span><br><span class="line"><span class="comment">         *  2.类名.class</span></span><br><span class="line"><span class="comment">         *  3.对象.getclass</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.Class.forName();</span></span><br><span class="line">        <span class="comment">// 最为常用</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atlml.reflex.Student&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.类名.class</span></span><br><span class="line">        <span class="comment">//当作参数传递</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        synchronized (Student.class)&#123;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        Class&lt;Student&gt; studentClass = Student.class;</span><br><span class="line">        System.out.println(studentClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 对象.getClass</span></span><br><span class="line">        <span class="comment">//有局限性，当只有 对象 才能使用</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; aClass = student.getClass();</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//class com.atlml.reflex.Student</span></span><br><span class="line">        <span class="comment">//class com.atlml.reflex.Student</span></span><br><span class="line">        <span class="comment">//class com.atlml.reflex.Student</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172327128.png" alt="image-20240717232724110"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172340964.png" alt="image-20240717234049023"></p><hr><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//年级 这个成员变量是 公共的</span></span><br><span class="line">    <span class="keyword">public</span> String grade;</span><br><span class="line">    <span class="comment">//性别 公共的</span></span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的全参构造器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Student(Integer age, String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公有的静态方法，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lookbook</span><span class="params">(String book)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公有的静态方法，学生看&quot;</span> + book + <span class="string">&quot;书&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的静态方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shopping</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有的静态方法，学生购物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学生学习方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是公有的方法，学生学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的  吃饭方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">eat</span><span class="params">(String fan, Integer price)</span> <span class="keyword">throws</span> IOException, NullPointerException, RuntimeException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是私有的方法，学生吃&quot;</span> + fan + <span class="string">&quot;饭,花了&quot;</span> + price + <span class="string">&quot;元&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、利用反射获取构造方法"><a href="#三、利用反射获取构造方法" class="headerlink" title="三、利用反射获取构造方法"></a>三、利用反射获取构造方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407180008499.png" alt="image-20240718000745857"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用反射获取构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflexDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射 获取Student 的字节码class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atlml.reflex.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//获取 student类中的 构造器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取所有公有的构造器方法</span></span><br><span class="line">            Constructor[] constructors1 = clazz.getConstructors();</span><br><span class="line">            System.out.println(Arrays.asList(constructors1));</span><br><span class="line">            <span class="comment">//[public com.atlml.reflex.Student(), public com.atlml.reflex.Student(java.lang.Integer), public com.atlml.reflex.Student(java.lang.String)]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.获取所有构造器，包括私有的</span></span><br><span class="line">            List&lt;Constructor&gt; constructors = Arrays.asList(declaredConstructors);</span><br><span class="line">            System.out.println(constructors);</span><br><span class="line">            <span class="comment">//[public com.atlml.reflex.Student(), private com.atlml.reflex.Student(java.lang.Integer,java.lang.String), public com.atlml.reflex.Student(java.lang.String), public com.atlml.reflex.Student(java.lang.Integer)]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                使用Declared 表示当前构造方法是私有的也可以被获取</span></span><br><span class="line"><span class="comment">                    直接使用 getConstructor() 获取单个构造器，只能是公共的</span></span><br><span class="line"><span class="comment">                    如果获取的不是公共的，或报错</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.获取单个构造器(空参的)</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">            <span class="comment">//public com.atlml.reflex.Student()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.获取单个构造器，一个参数的</span></span><br><span class="line">            <span class="comment">// 参数是 构造器参数是 ，参数类型的字节码</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">            System.out.println(declaredConstructor);</span><br><span class="line">            <span class="comment">//public com.atlml.reflex.Student(java.lang.String)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.获取单个构造器，一个参数的</span></span><br><span class="line">            <span class="comment">// 参数是 构造器参数是 ，参数类型的字节码</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">declaredConstructor1</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Integer.class);</span><br><span class="line">            System.out.println(declaredConstructor1);</span><br><span class="line">            <span class="comment">//public com.atlml.reflex.Student(java.lang.Integer)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//6.获取单个构造器，一个参数的</span></span><br><span class="line">            <span class="comment">// 参数是 构造器参数是 ，参数类型的字节码</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">declaredConstructor2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Integer.class, String.class);</span><br><span class="line">            System.out.println(declaredConstructor2);</span><br><span class="line">            <span class="comment">//private com.atlml.reflex.Student(java.lang.Integer,java.lang.String)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 构造方法获取到了，就能获取 构造方法上的所有内容</span></span><br><span class="line"><span class="comment">             *    1.权限修饰符</span></span><br><span class="line"><span class="comment">             *    2.获取所有形参</span></span><br><span class="line"><span class="comment">             *    3.能创建这个类的对象</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7.通过反射来获取 构造方法中的所有内容</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//7.获取权限修饰符</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> declaredConstructor2.getModifiers();</span><br><span class="line">            System.out.println(modifiers);<span class="comment">//2</span></span><br><span class="line">            <span class="comment">// private-&gt; 2 ，public-&gt;1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//8. 获取当前构造函数的所有参数</span></span><br><span class="line">            Parameter[] parameters = declaredConstructor2.getParameters();</span><br><span class="line">            System.out.println(Arrays.toString(parameters));</span><br><span class="line">            <span class="comment">//[java.lang.Integer arg0, java.lang.String arg1]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//9. 通过构造方法，创建对象</span></span><br><span class="line">            <span class="comment">// 注意：这个方法是private私有的</span></span><br><span class="line">            <span class="comment">//临时取消权限的校验,没有下面这句话会报错（暴力反射）</span></span><br><span class="line">            declaredConstructor2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) declaredConstructor2.newInstance(<span class="number">23</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            System.out.println(student);</span><br><span class="line">            <span class="comment">//Student&#123;age=23, name=&#x27;张三&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><h2 id="五、利用反射获取成员变量"><a href="#五、利用反射获取成员变量" class="headerlink" title="五、利用反射获取成员变量"></a>五、利用反射获取成员变量</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407200005478.png" alt="image-20240718222315601"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用反射获取成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflexDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 反射 字节码文件</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atlml.reflex.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.返回所有 公共的 成员变量</span></span><br><span class="line">            Field[] fields = clazz.getFields();</span><br><span class="line">            System.out.println(Arrays.toString(fields));</span><br><span class="line">            <span class="comment">//[public java.lang.String com.atlml.reflex.Student.grade, public java.lang.String com.atlml.reflex.Student.gender]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.返回所有成员变量对象的数组(公有，私有)</span></span><br><span class="line">            Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">            System.out.println(Arrays.toString(declaredFields));</span><br><span class="line">            <span class="comment">//[public java.lang.String com.atlml.reflex.Student.grade, public java.lang.String com.atlml.reflex.Student.gender, private java.lang.Integer com.atlml.reflex.Student.age, private java.lang.String com.atlml.reflex.Student.name]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.返回单个公共成员变量对象</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">            System.out.println(field);</span><br><span class="line">            <span class="comment">//public java.lang.String com.atlml.reflex.Student.gender</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.返回单个成员变量对象</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">//5.获取成员变量 修饰符</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> name.getModifiers();</span><br><span class="line">            <span class="comment">// 6.获取成员变量 名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> name.getName();</span><br><span class="line">            <span class="comment">// 7.获取成员变量 数据类型</span></span><br><span class="line">            Class&lt;?&gt; type = name.getType();</span><br><span class="line">            System.out.println(type);<span class="comment">//String</span></span><br><span class="line">            System.out.println(n);<span class="comment">//name</span></span><br><span class="line">            System.out.println(modifiers);<span class="comment">// 2</span></span><br><span class="line">            System.out.println(name);<span class="comment">//private java.lang.String com.atlml.reflex.Student.name</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//8.获取成员变量 记录的值</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">12</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            name.setAccessible(<span class="literal">true</span>);<span class="comment">//临时获取权限</span></span><br><span class="line">            <span class="comment">//9.获取 s 这个对象，name记录的值</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> name.get(s);</span><br><span class="line">            System.out.println(value);<span class="comment">//张三</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//9.修改name成员变量，对象里面记录的值</span></span><br><span class="line">            name.set(s, <span class="string">&quot;王一平&quot;</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            <span class="comment">//Student&#123;age=12, name=&#x27;王一平&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="六、利用反射获取成员方法"><a href="#六、利用反射获取成员方法" class="headerlink" title="六、利用反射获取成员方法"></a>六、利用反射获取成员方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407191847059.png" alt="image-20240719184726716"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.reflex;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用反射 获取 成员方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflexDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atlml.reflex.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.返回所有 公共成员方法 的数组，包括继承的</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//2.返回所有  成员方法  的数组，不包括继承的</span></span><br><span class="line">        Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(declaredMethod);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回单个公共成员方法对象(这个方法必须是公有的)</span></span><br><span class="line">        <span class="comment">// 参数一：方法的名字，</span></span><br><span class="line">        <span class="comment">// 参数二、方法的形参类型，可以是多个（为了方法的重载）</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">lookbook</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;lookbook&quot;</span>, String.class);</span><br><span class="line">        System.out.println(lookbook); <span class="comment">//public static void com.atlml.reflex.Student.lookbook(java.lang.String)</span></span><br><span class="line">            <span class="comment">// 运行当前的方法</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            <span class="comment">//参数1：是哪个学生对象，调用方法的形参是什么</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> lookbook.invoke(student, <span class="string">&quot;鲁宾孙漂流记&quot;</span>);</span><br><span class="line">            System.out.println(a);<span class="comment">//没有返回值 null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.返回单个成员方法对象(私有的，公有的都能获取)</span></span><br><span class="line">        <span class="comment">// 参数一：方法的名字，</span></span><br><span class="line">        <span class="comment">// 参数二、方法的形参类型，可以是多个（为了方法的重载）</span></span><br><span class="line">        <span class="comment">//eat 是私有的</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>,String.class,Integer.class);</span><br><span class="line">        System.out.println(eat);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.1获取当前方法的权限修饰</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> eat.getModifiers();</span><br><span class="line">        System.out.println(modifiers); <span class="comment">//2 私有的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2 获取方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> eat.getName();</span><br><span class="line">        System.out.println(name); <span class="comment">//eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3 获取方法的形参,这里两个参数</span></span><br><span class="line">        Parameter[] parameters = eat.getParameters();</span><br><span class="line">        System.out.println(Arrays.toString(parameters));</span><br><span class="line">        <span class="comment">// [java.lang.String arg0, java.lang.Integer arg1]</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.4 获取方法的抛出的异常</span></span><br><span class="line">        Class&lt;?&gt;[] exceptionTypes = eat.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; exceptionType : exceptionTypes) &#123;</span><br><span class="line">            System.out.println(exceptionType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//class java.io.IOException</span></span><br><span class="line">        <span class="comment">//class java.lang.NullPointerException</span></span><br><span class="line">        <span class="comment">//class java.lang.RuntimeException</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.5 运行当前方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        eat.setAccessible(<span class="literal">true</span>);<span class="comment">//临时获取访问权限（eat是私有的方法）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) eat.invoke(student1, <span class="string">&quot;鱼香肉丝&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(result);<span class="comment">//这是私有的方法，学生吃鱼香肉丝饭,花了18元</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="七、反射的作用"><a href="#七、反射的作用" class="headerlink" title="七、反射的作用"></a>七、反射的作用</h1><h2 id="获取一个类里面所有的信息，获取到了之后，再执行其他的业务逻辑"><a href="#获取一个类里面所有的信息，获取到了之后，再执行其他的业务逻辑" class="headerlink" title="获取一个类里面所有的信息，获取到了之后，再执行其他的业务逻辑"></a>获取一个类里面所有的信息，获取到了之后，再执行其他的业务逻辑</h2><h2 id="结合配置文件，动态的创建对象并调用方法"><a href="#结合配置文件，动态的创建对象并调用方法" class="headerlink" title="结合配置文件，动态的创建对象并调用方法"></a>结合配置文件，动态的创建对象并调用方法</h2><h4 id="练习1：对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去"><a href="#练习1：对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去" class="headerlink" title="练习1：对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去"></a>练习1：对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习1</span></span><br><span class="line"><span class="comment"> *  对于任意一个对象，都可以</span></span><br><span class="line"><span class="comment"> *         把对象所有的字段名和值，</span></span><br><span class="line"><span class="comment"> *         保存到文件中去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小A&quot;</span>, <span class="number">23</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">167.5</span>, <span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;波妞&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 思路</span></span><br><span class="line"><span class="comment">//            利用反射，来获取某个对象中的私有成员变量 信息</span></span><br><span class="line">        saveToFile(student);</span><br><span class="line">        saveToFile(teacher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 对象 中的信息 保存到本地文件中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveToFile</span><span class="params">(Object o)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = o.getClass();</span><br><span class="line">      <span class="comment">/*  //获取构造方法数组</span></span><br><span class="line"><span class="comment">        Constructor[] declaredConstructors = aClass.getDeclaredConstructors();</span></span><br><span class="line"><span class="comment">        for (Constructor declaredConstructor : declaredConstructors) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(declaredConstructor);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//写到本地文件中</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;javabasis\\aaa\\ObjectMemberVariable.txt&quot;</span>), <span class="literal">true</span>));<span class="comment">//追加</span></span><br><span class="line">        <span class="comment">//获取所有的 成员变量（公有，私有都存在）</span></span><br><span class="line">        Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            <span class="comment">//临时取消私有权限</span></span><br><span class="line">            declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> declaredField.getName(); <span class="comment">//name</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> declaredField.get(o);<span class="comment">//value</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//成员变量值，每个值都拿出来</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;=&quot;</span> + value.toString());</span><br><span class="line">            bufferedWriter.write(name + <span class="string">&quot;=&quot;</span> + value.toString());</span><br><span class="line">            bufferedWriter.newLine();<span class="comment">//换一行</span></span><br><span class="line">        &#125;</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习2：反射可以跟配置文件结合的方式，动态的创建对象，并调用方法"><a href="#练习2：反射可以跟配置文件结合的方式，动态的创建对象，并调用方法" class="headerlink" title="练习2：反射可以跟配置文件结合的方式，动态的创建对象，并调用方法"></a>练习2：反射可以跟配置文件结合的方式，动态的创建对象，并调用方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202209151.png" alt="image-20240720220912010"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.reflex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 练习二</span></span><br><span class="line"><span class="comment"> *  反射可以跟配置文件结合的方式，动态的创建对象，并调用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Practice2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.将配置文件加载到内存中</span></span><br><span class="line">        <span class="comment">// Properties 的父类是一个map集合</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;javabasis\\src\\main\\resources\\properties.properties&quot;</span>)));</span><br><span class="line">        System.out.println(properties);<span class="comment">//&#123;classname=com.atlml.reflex.Student, method=study&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输出配置文件中的内容</span></span><br><span class="line">        <span class="comment">//3.根据配置文件中的全限定类名，反射创建对象，调用方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(properties.getProperty(<span class="string">&quot;classname&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取构造函数</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);<span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) declaredConstructor.newInstance();</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员方法,并调用。从配置文件中拿到方法名</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">study</span> <span class="operator">=</span> clazz.getDeclaredMethod(properties.getProperty(<span class="string">&quot;method&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> study.invoke(student);<span class="comment">//这是公有的方法，学生正在学习</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202212473.png" alt="image-20240720221217993"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;反射&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、反射&quot;&gt;&lt;a href=&quot;#一、反射&quot; class=&quot;headerlink&quot; title=&quot;一、反射&quot;&gt;&lt;/a&gt;一、反射&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubuser</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>57.多线程</title>
    <link href="https://protonlml.github.io/2019/09/28/java%E5%9F%BA%E7%A1%80/57.%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://protonlml.github.io/2019/09/28/java%E5%9F%BA%E7%A1%80/57.%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2019-09-28T01:38:00.000Z</published>
    <updated>2024-07-20T14:58:48.429Z</updated>
    
    <content type="html"><![CDATA[<h1><center>多线程</center></h1><h2 id="一、多线程"><a href="#一、多线程" class="headerlink" title="一、多线程"></a>一、多线程</h2><hr><hr><h3 id="多线程："><a href="#多线程：" class="headerlink" title="多线程："></a>多线程：</h3><ul><li>一个软件运行了，就相当于一个“进程”，然后软件中，有很多独立的功能，多个功能就是多个线程。</li><li>比如：腾讯电脑管家运行了，他是一个进程，里面的“病毒查杀”“垃圾清理”“电脑加速”等功能分别是多个线程，他们可以同时在这个“电脑管家”进程中，同步进行。并列执行。这就是多线程</li><li>（比如：手机启动游戏的时候，有线程是加载本地文件，有的线程是加载背景音乐，有的线程是加载动态背景图，多个线程并行运行）</li></ul><h5 id="开发中，需要用到多线程的时候，当前模块项目就是一个进程，里面有很多独立的业务流程，他们是可以并行执行的。不一定都是单线程的，执行了这个功能，需要等待执行完才能执行下一个功能。这样是很慢的。所以需要多线程。"><a href="#开发中，需要用到多线程的时候，当前模块项目就是一个进程，里面有很多独立的业务流程，他们是可以并行执行的。不一定都是单线程的，执行了这个功能，需要等待执行完才能执行下一个功能。这样是很慢的。所以需要多线程。" class="headerlink" title="开发中，需要用到多线程的时候，当前模块项目就是一个进程，里面有很多独立的业务流程，他们是可以并行执行的。不一定都是单线程的，执行了这个功能，需要等待执行完才能执行下一个功能。这样是很慢的。所以需要多线程。"></a>开发中，需要用到多线程的时候，当前模块项目就是一个进程，里面有很多独立的业务流程，他们是可以并行执行的。不一定都是单线程的，执行了这个功能，需要等待执行完才能执行下一个功能。这样是很慢的。所以需要多线程。</h5><h5 id="当业务代码中需要多线程的时候，我们用代码手动创建另一个或者多个线程，将不同的业务代码流程，分别写在多个线程内部。当执行这个软件的时候，执行到此部分多线程业务时，会自动的开多线程并行执行多个业务功能，同时产生结果，最终返回给主线程。、"><a href="#当业务代码中需要多线程的时候，我们用代码手动创建另一个或者多个线程，将不同的业务代码流程，分别写在多个线程内部。当执行这个软件的时候，执行到此部分多线程业务时，会自动的开多线程并行执行多个业务功能，同时产生结果，最终返回给主线程。、" class="headerlink" title="当业务代码中需要多线程的时候，我们用代码手动创建另一个或者多个线程，将不同的业务代码流程，分别写在多个线程内部。当执行这个软件的时候，执行到此部分多线程业务时，会自动的开多线程并行执行多个业务功能，同时产生结果，最终返回给主线程。、"></a>当业务代码中需要多线程的时候，我们用代码手动创建另一个或者多个线程，将不同的业务代码流程，分别写在多个线程内部。当执行这个软件的时候，执行到此部分多线程业务时，会自动的开多线程并行执行多个业务功能，同时产生结果，最终返回给主线程。、</h5><h5 id="项目主业务流程都是在，main中开始的线程，就是主线程。当需要执行其他的业务流程时，需要从main其中开启其他线程的。"><a href="#项目主业务流程都是在，main中开始的线程，就是主线程。当需要执行其他的业务流程时，需要从main其中开启其他线程的。" class="headerlink" title="项目主业务流程都是在，main中开始的线程，就是主线程。当需要执行其他的业务流程时，需要从main其中开启其他线程的。"></a>项目主业务流程都是在，main中开始的线程，就是主线程。当需要执行其他的业务流程时，需要从main其中开启其他线程的。</h5><h5 id="（比如：手机启动游戏的时候，有线程是加载本地文件，有的线程是加载背景音乐，有的线程是加载动态背景图，多个线程并行运行）"><a href="#（比如：手机启动游戏的时候，有线程是加载本地文件，有的线程是加载背景音乐，有的线程是加载动态背景图，多个线程并行运行）" class="headerlink" title="（比如：手机启动游戏的时候，有线程是加载本地文件，有的线程是加载背景音乐，有的线程是加载动态背景图，多个线程并行运行）"></a>（比如：手机启动游戏的时候，有线程是加载本地文件，有的线程是加载背景音乐，有的线程是加载动态背景图，多个线程并行运行）</h5><p>&#x2F;&#x2F;一般java中有线程池，我们使用线程池来拿线程就行了，然后进行使用。目的是：线程也是资源，每次都要创建需要耗费时间，如果某个线程一直不释放，就会占用很长时间的资源内存。所以我们写代码时，不要自己创建，java已经给创建好了，我们只需要从线程池中拿线程对象来开启新线程。并且java也会自动管理这个线程。&#x2F;&#x2F;</p><h5 id="CPU-执行多个线程，单核cpu就是，执行1线程，然后又去执行2线程，执行3线程，多个线程交替执行，由于cpu速度非常快，感觉几个线程是，同时并行执行的，其实不是。"><a href="#CPU-执行多个线程，单核cpu就是，执行1线程，然后又去执行2线程，执行3线程，多个线程交替执行，由于cpu速度非常快，感觉几个线程是，同时并行执行的，其实不是。" class="headerlink" title="CPU 执行多个线程，单核cpu就是，执行1线程，然后又去执行2线程，执行3线程，多个线程交替执行，由于cpu速度非常快，感觉几个线程是，同时并行执行的，其实不是。"></a>CPU 执行多个线程，单核cpu就是，执行1线程，然后又去执行2线程，执行3线程，多个线程交替执行，由于cpu速度非常快，感觉几个线程是，同时并行执行的，其实不是。</h5><h5 id="CPU多核多线程，如4核8线程，指的是CPU能够同时一下8个线程同时并行执行，每个线程都是独立的，速度更快。如果此时开启了16个线程，那么它也是8个线程，和另8个线程交替执行。"><a href="#CPU多核多线程，如4核8线程，指的是CPU能够同时一下8个线程同时并行执行，每个线程都是独立的，速度更快。如果此时开启了16个线程，那么它也是8个线程，和另8个线程交替执行。" class="headerlink" title="CPU多核多线程，如4核8线程，指的是CPU能够同时一下8个线程同时并行执行，每个线程都是独立的，速度更快。如果此时开启了16个线程，那么它也是8个线程，和另8个线程交替执行。"></a>CPU多核多线程，如4核8线程，指的是CPU能够同时一下8个线程同时并行执行，每个线程都是独立的，速度更快。如果此时开启了16个线程，那么它也是8个线程，和另8个线程交替执行。</h5><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407162109692.png" alt="image-20240716210939135"></p><hr><hr><h3 id="并发：在同一时刻，多个指令在单个CPU上交替执行。"><a href="#并发：在同一时刻，多个指令在单个CPU上交替执行。" class="headerlink" title="并发：在同一时刻，多个指令在单个CPU上交替执行。"></a>并发：在同一时刻，多个指令在单个CPU上交替执行。</h3><h3 id="并行：在同一时刻。有多个指令在多个CPU上同时执行。"><a href="#并行：在同一时刻。有多个指令在多个CPU上同时执行。" class="headerlink" title="并行：在同一时刻。有多个指令在多个CPU上同时执行。"></a>并行：在同一时刻。有多个指令在多个CPU上同时执行。</h3><h2 id="二、多线程三种实现方式"><a href="#二、多线程三种实现方式" class="headerlink" title="二、多线程三种实现方式"></a>二、多线程三种实现方式</h2><ul><li><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407170010593.png" alt="image-20240716231323298"></li></ul></li><li><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172314637.png" alt="image-20240716231542532"></li></ul></li><li><h4 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h4><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172314542.png" alt="image-20240716231717003"></li></ul></li></ul><h2 id="三、Thread中常见的成员方法"><a href="#三、Thread中常见的成员方法" class="headerlink" title="三、Thread中常见的成员方法"></a>三、Thread中常见的成员方法</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172314187.png" alt="image-20240716231816958"></p><ul><li><h5 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h5><ul><li>设置线程 的优先级，线程默认的优先级是5，主线程main线程默认的也是5，如果设置的优先级越高，线程抢到Cpu的概率就越高</li></ul></li><li><h5 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h5><ul><li>线程设置为守护线程（备胎线程），当其他的非守护线程执行完毕，守护线程会陆续结束。<ul><li>例如：线程1是正常线程，线程2是守护线程，（线程1，线程2并行，同时抢占CPU线程）如果线程1中的要执行的业务结束了，那么线程2也会慢慢的结束掉自己的线程。线程2不是立马结束的。</li></ul></li><li>应用场景<ul><li>qq聊天，同时传输完毕，聊天是线程1，传输文件是线程2，聊天窗口结束了，传输文件也没必要存在了，会陆续结束</li></ul></li></ul></li><li><h5 id="出让线程"><a href="#出让线程" class="headerlink" title="出让线程"></a>出让线程</h5><ul><li>出让当前线程的执行权，当前线程抢到了cpu资源，执行完线程中的代码，最下面可以出让当前cpu资源，这样就尽可能的保证每个线程都运行均匀的，每个线程执行是平均的（了解）</li></ul></li><li><h5 id="插入线程"><a href="#插入线程" class="headerlink" title="插入线程"></a>插入线程</h5><ul><li>将其他线程，插入到当前线程。（了解）</li></ul></li></ul><hr><hr><h2 id="四、线程的生命周期"><a href="#四、线程的生命周期" class="headerlink" title="四、线程的生命周期"></a>四、线程的生命周期</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172314669.png" alt="image-20240716233244394"></p><hr><hr><hr><h2 id="五、线程安全问题："><a href="#五、线程安全问题：" class="headerlink" title="五、线程安全问题："></a>五、线程安全问题：</h2><ul><li><h3 id="1-出现线程安全的例子"><a href="#1-出现线程安全的例子" class="headerlink" title="1.出现线程安全的例子"></a>1.出现线程安全的例子</h3><ul><li><p>比如，卖100张票，创建了3个线程假设为3个窗口，3个线程中执行的业务代码是一样的，3个线程都要对这同100张票进行售卖。</p></li><li><p>这里100张票，属于3个线程的共享数据，共享数据只能有一份。某个线程对这个共享数据进行修改了，都会影响到其他线程中使用这个数据。</p></li><li><p>这里static 修饰的ticket变量作为“电影票变量”  在 线程任务对象中，只有一份，不管创建几个同种任务对象，都共享这个变量的值ticket,因为其是static的，属于类，类加载就加载了在方法区，只有一份。以后每次new的任务对象都在堆中，所以可以共享。（静态变量可以作数据共享，如所有学生对象，有同一个静态变量老师）</p></li><li><p>但是，在每个线程中，操作共享数据的代码，每个线程是抢夺cpu调度的，也就是说，线程1在操作这个共享ticket数据时，刚改完，线程2可能就抢到了cpu调度，线程2又把这个共享ticket数据给改了，那就会导致最终的共享数据是错误的。</p></li><li><h3 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h3></li><li><p>就是，将线程中，操作共享数据的这部分代码，给锁起来。如：线程1抢到了cpu调度时，执行操作共享数据这部分代码时，给包裹起来，此时只有线程1能执行它线程中这部分代码。其他线程都得等线程1执行完共享数据的操作，开锁了。其他线程才可以抢cpu调度 {执行操作共享数据的代码}。</p></li><li><p>这样就保证了，多线程共享数据的安全性，只有当某个线程全部操作完共享数据的代码，就是改完了确定改好了，才让其他线程去改。</p></li><li><p>这个锁就是同步代码块，让同步代码块里面的代码是线程轮流执行的</p></li></ul></li><li><h3 id="3-同步代码块"><a href="#3-同步代码块" class="headerlink" title="3.同步代码块"></a>3.同步代码块</h3><ul><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172314872.png" alt="image-20240716233808998"></p></li><li><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172315543.png" alt="image-20240716235608810"></li></ul></li></ul></li><li><h3 id="4-同步方法"><a href="#4-同步方法" class="headerlink" title="4.同步方法"></a>4.同步方法</h3><ul><li><h4 id="我们想要把一个方法中所有的代码都锁起来，直接在方法上加关键字synchronized"><a href="#我们想要把一个方法中所有的代码都锁起来，直接在方法上加关键字synchronized" class="headerlink" title="我们想要把一个方法中所有的代码都锁起来，直接在方法上加关键字synchronized"></a>我们想要把一个方法中所有的代码都锁起来，直接在方法上加关键字synchronized</h4><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172321046.png" alt="image-20240717000339935"></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172316132.png" alt="image-20240717000359423"></p><hr><hr><h3 id="字符串拼接的时候StringBuffer-是线程安全的"><a href="#字符串拼接的时候StringBuffer-是线程安全的" class="headerlink" title="字符串拼接的时候StringBuffer 是线程安全的"></a>字符串拼接的时候StringBuffer 是线程安全的</h3><ul><li><h4 id="StringBuffer-是线程安全的，它的所有方法，都是synchronized修饰的，同步方法，所以它线程安全（一个线程执行当前方法，其他任何线程只能等着我当前线程执行完毕，才释放）这种运行慢"><a href="#StringBuffer-是线程安全的，它的所有方法，都是synchronized修饰的，同步方法，所以它线程安全（一个线程执行当前方法，其他任何线程只能等着我当前线程执行完毕，才释放）这种运行慢" class="headerlink" title="StringBuffer 是线程安全的，它的所有方法，都是synchronized修饰的，同步方法，所以它线程安全（一个线程执行当前方法，其他任何线程只能等着我当前线程执行完毕，才释放）这种运行慢"></a>StringBuffer 是线程安全的，它的所有方法，都是synchronized修饰的，同步方法，所以它线程安全（一个线程执行当前方法，其他任何线程只能等着我当前线程执行完毕，才释放）这种运行慢</h4></li><li><h4 id="StringBuilder-是线程不安全的"><a href="#StringBuilder-是线程不安全的" class="headerlink" title="StringBuilder 是线程不安全的"></a>StringBuilder 是线程不安全的</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172316509.png" alt="image-20240717000908402"></p><hr><hr><h2 id="六、Lock锁"><a href="#六、Lock锁" class="headerlink" title="六、Lock锁"></a>六、Lock锁</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172321144.png" alt="image-20240717001410133"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172321923.png" alt="image-20240717200036131"></p><h2 id="七、死锁是一个错误"><a href="#七、死锁是一个错误" class="headerlink" title="七、死锁是一个错误"></a>七、死锁是一个错误</h2><ul><li><h4 id="以后在写锁得时候，千万千万不能让几个锁嵌套在一起了，之所以出现死锁是因为将，锁嵌套的写了。"><a href="#以后在写锁得时候，千万千万不能让几个锁嵌套在一起了，之所以出现死锁是因为将，锁嵌套的写了。" class="headerlink" title="以后在写锁得时候，千万千万不能让几个锁嵌套在一起了，之所以出现死锁是因为将，锁嵌套的写了。"></a>以后在写锁得时候，千万千万不能让几个锁嵌套在一起了，之所以出现死锁是因为将，锁嵌套的写了。</h4></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172322153.png" alt="image-20240717200516612"></p></li></ul><hr><hr><h2 id="八、等待唤醒机制（生产者，消费者"><a href="#八、等待唤醒机制（生产者，消费者" class="headerlink" title="八、等待唤醒机制（生产者，消费者)"></a>八、等待唤醒机制（生产者，消费者)</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172320979.png" alt="image-20240717200713011"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172320920.png" alt="image-20240717200833346"></p><ul><li><h2 id="8-1-（使用阻塞队列）实现消息唤醒"><a href="#8-1-（使用阻塞队列）实现消息唤醒" class="headerlink" title="8.1.（使用阻塞队列）实现消息唤醒"></a>8.1.（使用阻塞队列）实现消息唤醒</h2><ul><li><h4 id="连接生产者与消费者之间的管道"><a href="#连接生产者与消费者之间的管道" class="headerlink" title="连接生产者与消费者之间的管道"></a>连接生产者与消费者之间的管道</h4></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172319292.png" alt="image-20240717201508690"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172319901.png" alt="image-20240717201829145"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172318453.png" alt="image-20240717202953133"></p><ul><li><h3 id="厨师往队列中放一个，吃货从队列中吃一个"><a href="#厨师往队列中放一个，吃货从队列中吃一个" class="headerlink" title="厨师往队列中放一个，吃货从队列中吃一个"></a>厨师往队列中放一个，吃货从队列中吃一个</h3></li></ul><hr><hr><h2 id="九、线程的6种状态"><a href="#九、线程的6种状态" class="headerlink" title="九、线程的6种状态"></a>九、线程的6种状态</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172318960.png" alt="image-20240717203309171"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407172317184.png" alt="image-20240717203531276"></p><hr><hr><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;多线程&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、多线程&quot;&gt;&lt;a href=&quot;#一、多线程&quot; class=&quot;headerlink&quot; title=&quot;一、多线程&quot;&gt;&lt;/a&gt;一、多线程&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;多线程：&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>56.zip文件的导入导出</title>
    <link href="https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/56.zip%E6%96%87%E4%BB%B6%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <id>https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/56.zip%E6%96%87%E4%BB%B6%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</id>
    <published>2019-09-26T03:40:00.000Z</published>
    <updated>2024-07-20T14:53:41.462Z</updated>
    
    <content type="html"><![CDATA[<h1><center>zip文件的导入导出</center></h1><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;zip文件的导入导出&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一、&quot; class=&quot;headerlink&quot; title=&quot;一、&quot;&gt;&lt;/a&gt;一、&lt;/h2&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;© 版权声明&lt;/p&gt;
&lt;escape&gt;

&lt;</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>55.压缩、解压缩流</title>
    <link href="https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/55.%E5%8E%8B%E7%BC%A9%EF%BC%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81/"/>
    <id>https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/55.%E5%8E%8B%E7%BC%A9%EF%BC%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B5%81/</id>
    <published>2019-09-26T02:40:00.000Z</published>
    <updated>2024-07-21T16:01:09.472Z</updated>
    
    <content type="html"><![CDATA[<h1><center>压缩、解压缩流</center></h1><h2 id="一、体系"><a href="#一、体系" class="headerlink" title="一、体系"></a>一、体系</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407220000312.png" alt="image-20240722000001802"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;压缩、解压缩流&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、体系&quot;&gt;&lt;a href=&quot;#一、体系&quot; class=&quot;headerlink&quot; title=&quot;一、体系&quot;&gt;&lt;/a&gt;一、体系&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githu</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>54.字节打印流&amp;字符打印流</title>
    <link href="https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/54.%E5%AD%97%E8%8A%82%E6%89%93%E5%8D%B0%E6%B5%81&amp;%E5%AD%97%E7%AC%A6%E6%89%93%E5%8D%B0%E6%B5%81/"/>
    <id>https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/54.%E5%AD%97%E8%8A%82%E6%89%93%E5%8D%B0%E6%B5%81&amp;%E5%AD%97%E7%AC%A6%E6%89%93%E5%8D%B0%E6%B5%81/</id>
    <published>2019-09-26T01:50:00.000Z</published>
    <updated>2024-07-21T15:59:59.222Z</updated>
    
    <content type="html"><![CDATA[<h1><center>字节打印流&字符打印流</center></h1><h2 id="一、打印流不能读，只能写，他只有输出流"><a href="#一、打印流不能读，只能写，他只有输出流" class="headerlink" title="一、打印流不能读，只能写，他只有输出流"></a>一、打印流不能读，只能写，他只有输出流</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212227332.png" alt="image-20240721222705122"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212330118.png" alt="image-20240721233044006"></p><h1 id="一、字节打印流"><a href="#一、字节打印流" class="headerlink" title="一、字节打印流"></a>一、字节打印流</h1><p>  <img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212333249.png" alt="image-20240721233301157"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212333168.png" alt="image-20240721233344942"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212337427.png" alt="image-20240721233701462"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.io_stream.myprintstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//% n表示换行</span></span><br><span class="line">        ps.printf(<span class="string">&quot;我叫%s %n&quot;</span>, <span class="string">&quot;阿玮&quot;</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;%s喜欢%s %n&quot;</span>, <span class="string">&quot;阿珍&quot;</span>, <span class="string">&quot;阿强&quot;</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;字母H的大写：%c %n&quot;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;8&gt;3的结果是：%b %n&quot;</span>, <span class="number">8</span> &gt; <span class="number">3</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;100的一半是：%d %n&quot;</span>, <span class="number">100</span> / <span class="number">2</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;100的16进制数是：%x %n&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;100的8进制数是：%o %n&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;50元的书打8.5折扣是：%f元%n&quot;</span>, <span class="number">50</span> * <span class="number">0.85</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;计算的结果转16进制：%a %n&quot;</span>, <span class="number">50</span> * <span class="number">0.85</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;计算的结果转科学计数法表示：%e %n&quot;</span>, <span class="number">50</span> * <span class="number">0.85</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;计算的结果转成指数和浮点数，结果的长度较短的是：%g %n&quot;</span>, <span class="number">50</span> * <span class="number">0.85</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;带有百分号的符号表示法，以百分之85为例：%d%% %n&quot;</span>, <span class="number">85</span>);</span><br><span class="line">        ps.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">        ps.printf(<span class="string">&quot;num: %.4g %n&quot;</span>, num1);</span><br><span class="line">        ps.printf(<span class="string">&quot;num: %.5g %n&quot;</span>, num1);</span><br><span class="line">        ps.printf(<span class="string">&quot;num: %.6g %n&quot;</span>, num1);</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">1.0F</span>;</span><br><span class="line">        ps.printf(<span class="string">&quot;num: %.4f %n&quot;</span>, num2);</span><br><span class="line">        ps.printf(<span class="string">&quot;num: %.5f %n&quot;</span>, num2);</span><br><span class="line">        ps.printf(<span class="string">&quot;num: %.6f %n&quot;</span>, num2);</span><br><span class="line">        ps.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ps.printf(<span class="string">&quot;数字前面带有0的表示方式：%03d %n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;数字前面带有0的表示方式：%04d %n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;数字前面带有空格的表示方式：% 8d %n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;整数分组的效果是：%,d %n&quot;</span>, <span class="number">9989997</span>);</span><br><span class="line">        ps.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终结果是10位，小数点后面是5位，不够在前面补空格，补满10位</span></span><br><span class="line">        <span class="comment">//如果实际数字小数点后面过长，但是只规定两位，会四舍五入</span></span><br><span class="line">        <span class="comment">//如果整数部分过长，超出规定的总长度，会以实际为准</span></span><br><span class="line">        ps.printf(<span class="string">&quot;一本书的价格是：%2.5f元%n&quot;</span>, <span class="number">49.8</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;%(f%n&quot;</span>, -<span class="number">76.04</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//%f，默认小数点后面7位，</span></span><br><span class="line">        <span class="comment">//&lt;，表示采取跟前面一样的内容</span></span><br><span class="line">        ps.printf(<span class="string">&quot;%f和%3.2f %n&quot;</span>, <span class="number">86.04</span>, <span class="number">1.789651</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;%f和%&lt;3.2f %n&quot;</span>, <span class="number">86.04</span>, <span class="number">1.789651</span>);</span><br><span class="line">        ps.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">// %t 表示时间，但是不能单独出现，要指定时间的格式</span></span><br><span class="line">        <span class="comment">// %tc 周二 12月 06 22:08:40 CST 2022</span></span><br><span class="line">        <span class="comment">// %tD 斜线隔开</span></span><br><span class="line">        <span class="comment">// %tF 冒号隔开（12小时制）</span></span><br><span class="line">        <span class="comment">// %tr 冒号隔开（24小时制）</span></span><br><span class="line">        <span class="comment">// %tT 冒号隔开（24小时制，带时分秒）</span></span><br><span class="line">        ps.printf(<span class="string">&quot;全部日期和时间信息：%tc %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;月/日/年格式：%tD %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;年-月-日格式：%tF %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;HH:MM:SS PM格式(12时制)：%tr %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;HH:MM格式(24时制)：%tR %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;HH:MM:SS格式(24时制)：%tT %n&quot;</span>, date);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;星期的简称：%ta %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;星期的全称：%tA %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;英文月份简称：%tb %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;英文月份全称：%tB %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;年的前两位数字(不足两位前面补0)：%tC %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;年的后两位数字(不足两位前面补0)：%ty %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;一年中的第几天：%tj %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字的月份(不足两位前面补0)：%tm %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字的日(不足两位前面补0)：%td %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;月份的日(前面不补0)：%te  %n&quot;</span>, date);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字24时制的小时(不足2位前面补0):%tH %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字12时制的小时(不足2位前面补0):%tI %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字24时制的小时(前面不补0):%tk %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字12时制的小时(前面不补0):%tl %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字的分钟(不足2位前面补0):%tM %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;两位数字的秒(不足2位前面补0):%tS %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;三位数字的毫秒(不足3位前面补0):%tL %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;九位数字的毫秒数(不足9位前面补0):%tN %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;小写字母的上午或下午标记(英)：%tp %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;小写字母的上午或下午标记(中)：%tp %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;相对于GMT的偏移量:%tz %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;时区缩写字符串:%tZ%n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;1970-1-1 00:00:00 到现在所经过的秒数：%ts %n&quot;</span>, date);</span><br><span class="line">        ps.printf(<span class="string">&quot;1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ %n&quot;</span>, date);</span><br><span class="line"></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><h1 id="二、字符打印流"><a href="#二、字符打印流" class="headerlink" title="二、字符打印流"></a>二、字符打印流</h1><ul><li><h3 id="字符打印流，它是带有缓冲区的，打印效率更高一点"><a href="#字符打印流，它是带有缓冲区的，打印效率更高一点" class="headerlink" title="字符打印流，它是带有缓冲区的，打印效率更高一点"></a>字符打印流，它是带有缓冲区的，打印效率更高一点</h3></li><li><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212352579.png" alt="image-20240721235241676"></p></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212353074.png" alt="image-20240721235241676.png"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212356736.png" alt="image-20240721235338406"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212358534.png" alt="image-20240721235814786"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212359796.png" alt="image-20240721235913900"></p><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;字节打印流&amp;字符打印流&lt;/center&gt;&lt;/h1&gt;

&lt;h2 id=&quot;一、打印流不能读，只能写，他只有输出流&quot;&gt;&lt;a href=&quot;#一、打印流不能读，只能写，他只有输出流&quot; class=&quot;headerlink&quot; title=&quot;一、打印流不能读，只能写，他只</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>53.序列化流反序列化流</title>
    <link href="https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/53.%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/"/>
    <id>https://protonlml.github.io/2019/09/26/java%E5%9F%BA%E7%A1%80/53.%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81/</id>
    <published>2019-09-26T01:40:00.000Z</published>
    <updated>2024-07-21T14:25:50.380Z</updated>
    
    <content type="html"><![CDATA[<h1><center>序列化流反序列化流</center></h1><h1 id="序列化流（对象操作输出流）"><a href="#序列化流（对象操作输出流）" class="headerlink" title="序列化流（对象操作输出流）"></a>序列化流（对象操作输出流）</h1><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212225359.png" alt="image-20240721222543452"></p><h3 id="一、可以把java中的对象写到本地文件中"><a href="#一、可以把java中的对象写到本地文件中" class="headerlink" title="一、可以把java中的对象写到本地文件中"></a>一、可以把java中的对象写到本地文件中</h3><ul><li><h4 id="写到本地文件中的对象信息，我们是看不懂的，需要进行反序列化，读取到内存中，即可成为对象"><a href="#写到本地文件中的对象信息，我们是看不懂的，需要进行反序列化，读取到内存中，即可成为对象" class="headerlink" title="写到本地文件中的对象信息，我们是看不懂的，需要进行反序列化，读取到内存中，即可成为对象"></a>写到本地文件中的对象信息，我们是看不懂的，需要进行反序列化，读取到内存中，即可成为对象</h4></li></ul><h3 id="二、为什么不直接将对象属性值，给保存到本地文件中呢，非得使用序列化给序列到本地文件中，还是看不懂的？"><a href="#二、为什么不直接将对象属性值，给保存到本地文件中呢，非得使用序列化给序列到本地文件中，还是看不懂的？" class="headerlink" title="二、为什么不直接将对象属性值，给保存到本地文件中呢，非得使用序列化给序列到本地文件中，还是看不懂的？"></a>二、为什么不直接将对象属性值，给保存到本地文件中呢，非得使用序列化给序列到本地文件中，还是看不懂的？</h3><ul><li><h4 id="比如游戏中的关键信息，不使用序列化的话，在本地直接明文展示，那就会被修改了，游戏中的属性也就被修改了"><a href="#比如游戏中的关键信息，不使用序列化的话，在本地直接明文展示，那就会被修改了，游戏中的属性也就被修改了" class="headerlink" title="比如游戏中的关键信息，不使用序列化的话，在本地直接明文展示，那就会被修改了，游戏中的属性也就被修改了"></a>比如游戏中的关键信息，不使用序列化的话，在本地直接明文展示，那就会被修改了，游戏中的属性也就被修改了</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202332127.png" alt="image-20240720233221141"></p><h2 id="三、序列化流的细节"><a href="#三、序列化流的细节" class="headerlink" title="三、序列化流的细节"></a>三、序列化流的细节</h2><ul><li><h3 id="使用对象输出流将对象保存到文件时会出现NotSerializableException异常"><a href="#使用对象输出流将对象保存到文件时会出现NotSerializableException异常" class="headerlink" title="使用对象输出流将对象保存到文件时会出现NotSerializableException异常"></a>使用对象输出流将对象保存到文件时会出现NotSerializableException异常</h3></li><li><h3 id="解决方案：需要让javabean类实现Serializable接口-同时自动生成版本号UID"><a href="#解决方案：需要让javabean类实现Serializable接口-同时自动生成版本号UID" class="headerlink" title="解决方案：需要让javabean类实现Serializable接口,同时自动生成版本号UID"></a>解决方案：需要让javabean类实现Serializable接口,同时自动生成版本号UID</h3></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407210003873.png" alt="image-20240721000353503"></p><h1 id="反序列化流"><a href="#反序列化流" class="headerlink" title="反序列化流"></a>反序列化流</h1><h2 id="一、本地文件中的序列化对象，反序列化到内存"><a href="#一、本地文件中的序列化对象，反序列化到内存" class="headerlink" title="一、本地文件中的序列化对象，反序列化到内存"></a>一、本地文件中的序列化对象，反序列化到内存</h2><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407202347575.png" alt="image-20240720234733168"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407210044370.png" alt="image-20240721004416055"></p><hr><hr><h1 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h1><ul><li><h4 id="一个对象实现了Serializable接口，说明这个类的对象可以被序列化的"><a href="#一个对象实现了Serializable接口，说明这个类的对象可以被序列化的" class="headerlink" title="一个对象实现了Serializable接口，说明这个类的对象可以被序列化的"></a>一个对象实现了Serializable接口，说明这个类的对象可以被序列化的</h4></li><li><h4 id="java底层会根据这个类的成员变量，静态变量，构造方法，成员方法，简单的说就是根据这个类中的所有内容计算出一个long类型的序列号。这个序列号，就是这个类的版本号。"><a href="#java底层会根据这个类的成员变量，静态变量，构造方法，成员方法，简单的说就是根据这个类中的所有内容计算出一个long类型的序列号。这个序列号，就是这个类的版本号。" class="headerlink" title="java底层会根据这个类的成员变量，静态变量，构造方法，成员方法，简单的说就是根据这个类中的所有内容计算出一个long类型的序列号。这个序列号，就是这个类的版本号。"></a>java底层会根据这个类的成员变量，静态变量，构造方法，成员方法，简单的说就是根据这个类中的所有内容计算出一个long类型的序列号。这个序列号，就是这个类的版本号。</h4></li><li><h4 id="在将对象序列化，以及反序列化的时候，使用的UID是唯一的"><a href="#在将对象序列化，以及反序列化的时候，使用的UID是唯一的" class="headerlink" title="在将对象序列化，以及反序列化的时候，使用的UID是唯一的"></a>在将对象序列化，以及反序列化的时候，使用的UID是唯一的</h4></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407210059140.png" alt="image-20240721005942108"></p><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407210101542.png" alt="image-20240721010128414"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li><h2 id="将多个对象序列化到本地，再反序列化到内存"><a href="#将多个对象序列化到本地，再反序列化到内存" class="headerlink" title="将多个对象序列化到本地，再反序列化到内存"></a>将多个对象序列化到本地，再反序列化到内存</h2><ul><li><h4 id="使用ArrayList集合来装多个对象，然后再进行序列化和反序列化"><a href="#使用ArrayList集合来装多个对象，然后再进行序列化和反序列化" class="headerlink" title="使用ArrayList集合来装多个对象，然后再进行序列化和反序列化"></a>使用ArrayList集合来装多个对象，然后再进行序列化和反序列化</h4></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/protonlml/blogimages/master/imgs/202407212222367.png" alt="image-20240721222252005"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.Serialized_stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serial;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  小狗类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Serial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5061231638733610552L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.Serialized_stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将多个自定义对象序列化到文件中，但是由于对象的个数不确定，反序列化流该如何读取呢？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializedStream2</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果在代码中，一次需要将多个对象序列化到本地文件中， </span></span><br><span class="line"><span class="comment">         *          我们一般会采用，将多个对象放在集合当中</span></span><br><span class="line"><span class="comment">         *          我们将这个集合给序列化到本地文件中</span></span><br><span class="line"><span class="comment">         *          取得时候，也是直接取一个集合。</span></span><br><span class="line"><span class="comment">         *          然后再遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">bozai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">5</span>, <span class="string">&quot;波仔&quot;</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">keji</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">3</span>, <span class="string">&quot;柯基&quot;</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">tudou</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">1</span>, <span class="string">&quot;土豆&quot;</span>);</span><br><span class="line">        ArrayList&lt;Dog&gt; dogs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dogs.add(bozai);</span><br><span class="line">        dogs.add(keji);</span><br><span class="line">        dogs.add(tudou);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化流，将多个对象 序列化到 本地文件中去</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;javabasis\\aaa\\myio\\a.txt&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(dogs);<span class="comment">//序列化集合</span></span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atlml.Serialized_stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反序列化，</span></span><br><span class="line"><span class="comment"> *     将保存在本地的 对象。 反序列化到程序中</span></span><br><span class="line"><span class="comment"> *     这里是将 ArrayList 集合反序列化到内存中</span></span><br><span class="line"><span class="comment"> *      List集合中，存放了多个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializedStream3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化一个集合</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;javabasis\\aaa\\myio\\a.txt&quot;</span>));</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">doglist</span> <span class="operator">=</span> (ArrayList) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        doglist.forEach(d-&gt; System.out.println(d));</span><br><span class="line">        <span class="comment">//Dog&#123;age=5, name=&#x27;波仔&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//Dog&#123;age=3, name=&#x27;柯基&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//Dog&#123;age=1, name=&#x27;土豆&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p>© 版权声明</p><escape><div>    <h3 align="center"  style="color: brown;" >版权声明</h3>    <table>           <tr>            <ol>                <li>本网站名称：𝚲𝚳𝚲</li>                <li>𝚲𝚳𝚲提供的资源仅供您个人用于非商业性目的。</li>                <li>本站文章部分内容可能来源于网络，仅供大家学习与参考，如有侵权，请联系我进行删除处理。</li>                <li>本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责。</li>                <li>本站一律禁止以任何方式发布或转载任何违法的相关信息，访客发现请举报</li>                 <li>本站资源大多存储在云盘，如发现链接失效，请联系我，我会第一时间更新。</li>                <li>本站强烈打击盗版/破解等有损他人权益和违法作为，请支持正版！</li>              </ol>        </tr>    </table></div></escape><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;序列化流反序列化流&lt;/center&gt;&lt;/h1&gt;

&lt;h1 id=&quot;序列化流（对象操作输出流）&quot;&gt;&lt;a href=&quot;#序列化流（对象操作输出流）&quot; class=&quot;headerlink&quot; title=&quot;序列化流（对象操作输出流）&quot;&gt;&lt;/a&gt;序列化流（对象操作输</summary>
      
    
    
    
    <category term="java" scheme="https://protonlml.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://protonlml.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
